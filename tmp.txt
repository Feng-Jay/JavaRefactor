Chart-1_buggy
Chart-10_buggy
Chart-11_buggy
Chart-12_buggy
Chart-13_buggy
Chart-17_buggy
Chart-20_buggy
Chart-24_buggy
Chart-26_buggy
Chart-3_buggy
Chart-4_buggy
Chart-5_buggy
Chart-6_buggy
Chart-7_buggy
Chart-8_buggy
Chart-9_buggy
Cli-11_buggy
Cli-12_buggy
Cli-14_buggy
Cli-15_buggy
Cli-17_buggy
Cli-19_buggy
Cli-20_buggy
Cli-23_buggy
Cli-24_buggy
Cli-25_buggy
Cli-26_buggy
Cli-27_buggy
Cli-28_buggy
Cli-29_buggy
Cli-32_buggy
Cli-35_buggy
Cli-37_buggy
Cli-38_buggy
Cli-4_buggy
Cli-40_buggy
Cli-5_buggy
Cli-8_buggy
Cli-9_buggy
Closure-1_buggy
Closure-10_buggy
Closure-101_buggy
Closure-102_buggy
Closure-104_buggy
Closure-105_buggy
Closure-107_buggy
Closure-109_buggy
Closure-11_buggy
Closure-111_buggy
Closure-112_buggy
Closure-113_buggy
Closure-114_buggy
Closure-115_buggy
Closure-116_buggy
Closure-117_buggy
Closure-118_buggy
Closure-119_buggy
Closure-12_buggy
Closure-120_buggy
Closure-121_buggy
Closure-122_buggy
Closure-123_buggy
Closure-124_buggy
Closure-125_buggy
Closure-126_buggy
Closure-128_buggy
Closure-129_buggy
Closure-13_buggy
Closure-130_buggy
Closure-131_buggy
Closure-132_buggy
Closure-133_buggy
Closure-14_buggy
Closure-145_buggy
Closure-146_buggy
Closure-15_buggy
Closure-150_buggy
Closure-152_buggy
Closure-159_buggy
Closure-160_buggy
Closure-161_buggy
Closure-164_buggy
Closure-164_fix
Closure-166_buggy
Closure-166_fix
Closure-168_buggy
Closure-168_fix
Closure-17_buggy
Closure-17_fix
Closure-172_buggy
Closure-172_fix
Closure-176_buggy
Closure-176_fix
Closure-18_buggy
Closure-18_fix
Closure-19_buggy
Closure-19_fix
Closure-2_buggy
Closure-2_fix
Closure-20_buggy
Closure-20_fix
Closure-21_buggy
Closure-21_fix
Closure-22_buggy
Closure-22_fix
Closure-23_buggy
Closure-23_fix
Closure-24_buggy
Closure-24_fix
Closure-25_buggy
Closure-25_fix
Closure-29_buggy
Closure-29_fix
Closure-31_buggy
Closure-31_fix
Closure-32_buggy
Closure-32_fix
Closure-33_buggy
Closure-33_fix
Closure-35_buggy
Closure-35_fix
Closure-36_buggy
Closure-36_fix
Closure-38_buggy
Closure-38_fix
Closure-39_buggy
Closure-39_fix
Closure-4_buggy
Closure-4_fix
Closure-40_buggy
Closure-40_fix
Closure-42_buggy
Closure-42_fix
Closure-44_buggy
Closure-44_fix
Closure-48_buggy
Closure-48_fix
Closure-5_buggy
Closure-5_fix
Closure-50_buggy
Closure-50_fix
Closure-51_buggy
Closure-51_fix
Closure-52_buggy
Closure-52_fix
Closure-53_buggy
Closure-53_fix
Closure-55_buggy
Closure-55_fix
Closure-56_buggy
Closure-56_fix
Closure-57_buggy
Closure-57_fix
Closure-58_buggy
Closure-58_fix
Closure-59_buggy
Closure-59_fix
Closure-61_buggy
Closure-61_fix
Closure-62_buggy
Closure-62_fix
Closure-65_buggy
Closure-65_fix
Closure-66_buggy
Closure-66_fix
Closure-67_buggy
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
Chart-1_buggy
Chart-10_buggy
Chart-11_buggy
Chart-12_buggy
Chart-13_buggy
Chart-17_buggy
Chart-20_buggy
Chart-24_buggy
Chart-26_buggy
Chart-3_buggy
Chart-4_buggy
Chart-5_buggy
Chart-6_buggy
Chart-7_buggy
Chart-8_buggy
Chart-9_buggy
Cli-11_buggy
Cli-12_buggy
Cli-14_buggy
Cli-15_buggy
Cli-17_buggy
Cli-19_buggy
Cli-20_buggy
Cli-23_buggy
Cli-24_buggy
Cli-25_buggy
Cli-26_buggy
Cli-27_buggy
Cli-28_buggy
Cli-29_buggy
Cli-32_buggy
Cli-35_buggy
Cli-37_buggy
Cli-38_buggy
Cli-4_buggy
Cli-40_buggy
Cli-5_buggy
Cli-8_buggy
Cli-9_buggy
Closure-1_buggy
Closure-10_buggy
Closure-101_buggy
Closure-102_buggy
Closure-104_buggy
Closure-105_buggy
Closure-107_buggy
Closure-109_buggy
Closure-11_buggy
Closure-111_buggy
Closure-112_buggy
Closure-113_buggy
Closure-114_buggy
Closure-115_buggy
Closure-116_buggy
Closure-117_buggy
Closure-118_buggy
Closure-119_buggy
Closure-12_buggy
Closure-120_buggy
Closure-121_buggy
Closure-122_buggy
Closure-123_buggy
Closure-124_buggy
Closure-125_buggy
Closure-126_buggy
Closure-128_buggy
Closure-129_buggy
Closure-13_buggy
Closure-130_buggy
Closure-131_buggy
Closure-132_buggy
Closure-133_buggy
Closure-14_buggy
Closure-145_buggy
Closure-146_buggy
Closure-15_buggy
Closure-150_buggy
Closure-152_buggy
Closure-159_buggy
Closure-160_buggy
Closure-161_buggy
Closure-164_buggy
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
Closure-164_fix
Chart-1_buggy
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
Chart-1_fix
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
Chart-10_buggy
2#String TRANSVAR0
Chart-10_fix
2#String TRANSVAR0
Chart-11_buggy
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p1.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
Chart-11_fix
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p2.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
Chart-12_buggy
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
Chart-12_fix
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
Chart-13_buggy
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth() - w[2]),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
Chart-13_fix
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,Math.max(constraint.getWidth() - w[2],0.0)),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
Chart-17_buggy
3#TRANSVAR0=createCopy(0,getItemCount() - 1)
Chart-17_fix
3#TRANSVAR0=(TimeSeries)super.clone()
Chart-20_buggy
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
Chart-20_fix
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
Chart-24_buggy
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
Chart-24_fix
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
Chart-26_buggy
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
102#TRANSVAR37=owner.getEntityCollection()
Chart-26_fix
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
103#TRANSVAR37=owner.getEntityCollection()
Chart-3_buggy
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
13#TRANSVAR3=start
14#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
16#TRANSVAR5=(TimeSeriesDataItem)item.clone()
20#SeriesException TRANSVAR6
Chart-3_fix
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
15#TRANSVAR3=start
16#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
18#TRANSVAR5=(TimeSeriesDataItem)item.clone()
22#SeriesException TRANSVAR6
Chart-4_buggy
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
70#TRANSVAR14=r.getAnnotations()
71#TRANSVAR15=c.iterator()
73#TRANSVAR16=(XYAnnotation)i.next()
81#TRANSVAR17=includedAnnotations.iterator()
83#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
Chart-4_fix
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
71#TRANSVAR14=r.getAnnotations()
72#TRANSVAR15=c.iterator()
74#TRANSVAR16=(XYAnnotation)i.next()
83#TRANSVAR17=includedAnnotations.iterator()
85#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
Chart-5_buggy
2#Number TRANSVAR0
2#Number TRANSVAR1
8#TRANSVAR2=null
9#TRANSVAR3=indexOf(x)
11#TRANSVAR4=(XYDataItem)this.data.get(index)
15#CloneNotSupportedException TRANSVAR5
Chart-5_fix
2#Number TRANSVAR0
2#Number TRANSVAR1
12#TRANSVAR2=null
13#TRANSVAR3=indexOf(x)
15#TRANSVAR4=(XYDataItem)this.data.get(index)
19#CloneNotSupportedException TRANSVAR5
Chart-6_buggy
2#Object TRANSVAR0
Chart-6_fix
2#Object TRANSVAR0
10#TRANSVAR1=(ShapeList)obj
11#TRANSVAR2=size()
12#TRANSVAR3=0
Chart-7_buggy
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
Chart-7_fix
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
Chart-8_buggy
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
Chart-8_fix
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
Chart-9_buggy
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
Chart-9_fix
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
Cli-11_buggy
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
Cli-11_fix
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
Cli-12_buggy
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
Cli-12_fix
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
Cli-14_buggy
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
Cli-14_fix
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
Cli-15_buggy
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
Cli-15_fix
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
22#TRANSVAR3=valueList.size()
Cli-17_buggy
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
Cli-17_fix
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
Cli-19_buggy
2#String TRANSVAR0
2#boolean TRANSVAR1
Cli-19_fix
2#String TRANSVAR0
2#boolean TRANSVAR1
Cli-20_buggy
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
Cli-20_fix
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
19#TRANSVAR5=token.indexOf('=')
20#TRANSVAR6=pos == -1 ? token : token.substring(0,pos)
Cli-23_buggy
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
21#TRANSVAR6=pos
Cli-23_fix
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
Cli-24_buggy
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
24#TRANSVAR5=createPadding(nextLineTabStop)
Cli-24_fix
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
Cli-25_buggy
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
Cli-25_fix
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
Cli-26_buggy
2#String TRANSVAR0
5#TRANSVAR1=new Option(opt,description)
Cli-26_fix
2#String TRANSVAR0
4#TRANSVAR1=null
Cli-27_buggy
2#Option TRANSVAR0
Cli-27_fix
2#Option TRANSVAR0
Cli-28_buggy
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
Cli-28_fix
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
Cli-29_buggy
2#String TRANSVAR0
8#TRANSVAR1=str.length()
Cli-29_fix
2#String TRANSVAR0
4#TRANSVAR1=str.length()
Cli-32_buggy
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
Cli-32_fix
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
Cli-35_buggy
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
10#String TRANSVAR2
Cli-35_fix
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
13#String TRANSVAR2
Cli-37_buggy
2#String TRANSVAR0
Cli-37_fix
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
Cli-38_buggy
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
Cli-38_fix
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
Cli-4_buggy
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer()
Cli-4_fix
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
Cli-40_buggy
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
Cli-40_fix
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
Cli-5_buggy
2#String TRANSVAR0
Cli-5_fix
2#String TRANSVAR0
Cli-8_buggy
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
Cli-8_fix
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
Cli-9_buggy
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
Cli-9_fix
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
Closure-1_buggy
2#Scope TRANSVAR0
13#TRANSVAR1=fnScope.getRootNode()
21#TRANSVAR2=getFunctionArgList(function)
22#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
26#TRANSVAR4
28#TRANSVAR5=fnScope.getVar(lastArg.getString())
Closure-1_fix
2#Scope TRANSVAR0
16#TRANSVAR1=fnScope.getRootNode()
24#TRANSVAR2=getFunctionArgList(function)
25#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
29#TRANSVAR4
31#TRANSVAR5=fnScope.getVar(lastArg.getString())
Closure-10_buggy
2#Node TRANSVAR0
2#boolean TRANSVAR1
Closure-10_fix
2#Node TRANSVAR0
2#boolean TRANSVAR1
Closure-101_buggy
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
Closure-101_fix
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
Closure-102_buggy
2#Node TRANSVAR0
2#Node TRANSVAR1
5#TRANSVAR2=new MakeDeclaredNamesUnique()
6#TRANSVAR3=new NodeTraversal(compiler,renamer)
Closure-102_fix
2#Node TRANSVAR0
2#Node TRANSVAR1
6#TRANSVAR2=new MakeDeclaredNamesUnique()
7#TRANSVAR3=new NodeTraversal(compiler,renamer)
Closure-104_buggy
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
Closure-104_fix
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
Closure-105_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=new StringBuilder()
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
49#TRANSVAR12=InlineCostEstimator.getCost(n)
52#TRANSVAR13=Node.newString("")
57#TRANSVAR14=arrayFoldedChildren.remove(0)
65#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
77#TRANSVAR16="[].join()".length()
84#Node TRANSVAR17
Closure-105_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=null
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
51#TRANSVAR12=InlineCostEstimator.getCost(n)
54#TRANSVAR13=Node.newString("")
59#TRANSVAR14=arrayFoldedChildren.remove(0)
67#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
79#TRANSVAR16="[].join()".length()
86#Node TRANSVAR17
Closure-107_buggy
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
Closure-107_fix
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
Closure-109_buggy
2#JsDocToken TRANSVAR0
Closure-109_fix
2#JsDocToken TRANSVAR0
Closure-11_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
Closure-11_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
Closure-111_buggy
2#JSType TRANSVAR0
Closure-111_fix
2#JSType TRANSVAR0
Closure-112_buggy
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=inferTemplateTypesFromParameters(fnType,n)
17#TRANSVAR4=new TemplateTypeReplacer(registry,inferred)
19#TRANSVAR5=n.getFirstChild()
21#TRANSVAR6=fnType.visit(replacer).toMaybeFunctionType()
Closure-112_fix
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=Maps.filterKeys(inferTemplateTypesFromParameters(fnType,n),new Predicate<TemplateType>(){
  @Override public boolean apply(  TemplateType key){
    return keys.contains(key);
  }
}
)
16#TemplateType TRANSVAR4
23#TRANSVAR5=new TemplateTypeReplacer(registry,inferred)
25#TRANSVAR6=n.getFirstChild()
27#TRANSVAR7=fnType.visit(replacer).toMaybeFunctionType()
Closure-113_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
Closure-113_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
Closure-114_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
Closure-114_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
Closure-115_buggy
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
19#TRANSVAR5=callNode.getFirstChild().getNext()
38#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-115_fix
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
11#TRANSVAR3=callNode.getFirstChild().getNext()
30#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-116_buggy
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
12#TRANSVAR3=callNode.getFirstChild().getNext()
31#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-116_fix
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
21#TRANSVAR5=callNode.getFirstChild().getNext()
40#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-117_buggy
2#Node TRANSVAR0
2#boolean TRANSVAR1
10#TRANSVAR2=getJSType(n.getFirstChild()).dereference()
12#TRANSVAR3=n.getLastChild().getString()
34#TRANSVAR4=getJSType(n)
36#TRANSVAR5=type.dereference()
46#TRANSVAR6=n.getQualifiedName()
Closure-117_fix
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR2=getJSType(n)
5#TRANSVAR3=type.dereference()
22#TRANSVAR4=getJSType(n.getFirstChild()).dereference()
24#TRANSVAR5=n.getLastChild().getString()
46#TRANSVAR6=n.getQualifiedName()
Closure-118_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
9#TRANSVAR3=child.getString()
10#TRANSVAR4=typeSystem.getType(getScope(),n,name)
12#TRANSVAR5=getProperty(name)
Closure-118_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
12#TRANSVAR3=child.getString()
13#TRANSVAR4=typeSystem.getType(getScope(),n,name)
15#TRANSVAR5=getProperty(name)
Closure-119_buggy
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
Closure-119_fix
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
Closure-12_buggy
2#Node TRANSVAR0
Closure-12_fix
2#Node TRANSVAR0
3#TRANSVAR1=getCfg().getOutEdges(cfgNode)
4#DiGraphEdge<Node,Branch> TRANSVAR2
Closure-120_buggy
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
Closure-120_fix
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
Closure-121_buggy
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
56#TRANSVAR11=referenceInfo.references
57#TRANSVAR12=1
58#TRANSVAR13=refs.get(i).getNode()
60#TRANSVAR14=aliasCandidates.get(nameNode)
63#TRANSVAR15
65#TRANSVAR16=aliasInit.getAssignedValue()
Closure-121_fix
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
58#TRANSVAR11=referenceInfo.references
59#TRANSVAR12=1
60#TRANSVAR13=refs.get(i).getNode()
62#TRANSVAR14=aliasCandidates.get(nameNode)
65#TRANSVAR15
67#TRANSVAR16=aliasInit.getAssignedValue()
Closure-122_buggy
2#Comment TRANSVAR0
Closure-122_fix
2#Comment TRANSVAR0
3#TRANSVAR1=Pattern.compile("(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]")
Closure-123_buggy
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=Context.OTHER
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
Closure-123_fix
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=getContextForNoInOperator(context)
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
Closure-124_buggy
2#Node TRANSVAR0
2#Node TRANSVAR1
Closure-124_fix
2#Node TRANSVAR0
2#Node TRANSVAR1
Closure-125_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
Closure-125_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
Closure-126_buggy
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
38#TRANSVAR9=n.getLastChild()
45#TRANSVAR10=n.getLastChild()
60#Node TRANSVAR11
64#TRANSVAR12=c
65#TRANSVAR13
65#TRANSVAR14
90#TRANSVAR15=n.getLastChild()
Closure-126_fix
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
41#TRANSVAR9=n.getLastChild()
56#Node TRANSVAR10
60#TRANSVAR11=c
61#TRANSVAR12
61#TRANSVAR13
86#TRANSVAR14=n.getLastChild()
Closure-128_buggy
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
Closure-128_fix
2#String TRANSVAR0
3#TRANSVAR1=s.length()
7#TRANSVAR2=0
8#TRANSVAR3=s.charAt(index)
Closure-129_buggy
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
Closure-129_fix
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
Closure-13_buggy
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
16#TRANSVAR3=c.getNext()
Closure-13_fix
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
15#TRANSVAR3=c.getNext()
Closure-130_buggy
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
Closure-130_fix
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
Closure-131_buggy
2#String TRANSVAR0
3#TRANSVAR1=s.length()
10#TRANSVAR2=1
Closure-131_fix
2#String TRANSVAR0
3#TRANSVAR1=s.length()
11#TRANSVAR2=1
Closure-132_buggy
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
151#TRANSVAR22=thenOp.removeFirstChild()
152#TRANSVAR23=thenOp.removeFirstChild()
153#TRANSVAR24=elseOp.getLastChild()
156#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
157#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
159#TRANSVAR27=NodeUtil.newExpr(assign)
171#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
178#TRANSVAR29=isVarBlock(thenBranch)
179#TRANSVAR30=isVarBlock(elseBranch)
185#TRANSVAR31=getBlockVar(thenBranch)
186#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
188#TRANSVAR33=var.getFirstChild()
189#TRANSVAR34=elseAssign.getFirstChild()
194#TRANSVAR35=name1.removeChildren()
195#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
197#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
210#TRANSVAR38=getBlockVar(elseBranch)
211#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
213#TRANSVAR40=thenAssign.getFirstChild()
214#TRANSVAR41=var.getFirstChild()
219#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
220#TRANSVAR43=name2.removeChildren()
222#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
Closure-132_fix
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
153#TRANSVAR22=thenOp.removeFirstChild()
154#TRANSVAR23=thenOp.removeFirstChild()
155#TRANSVAR24=elseOp.getLastChild()
158#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
159#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
161#TRANSVAR27=NodeUtil.newExpr(assign)
173#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
180#TRANSVAR29=isVarBlock(thenBranch)
181#TRANSVAR30=isVarBlock(elseBranch)
187#TRANSVAR31=getBlockVar(thenBranch)
188#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
190#TRANSVAR33=var.getFirstChild()
191#TRANSVAR34=elseAssign.getFirstChild()
196#TRANSVAR35=name1.removeChildren()
197#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
199#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
212#TRANSVAR38=getBlockVar(elseBranch)
213#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
215#TRANSVAR40=thenAssign.getFirstChild()
216#TRANSVAR41=var.getFirstChild()
221#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
222#TRANSVAR43=name2.removeChildren()
224#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
Closure-133_buggy
3#TRANSVAR0=stream.getRemainingJSDocLine()
Closure-133_fix
3#TRANSVAR0=stream.getRemainingJSDocLine()
Closure-14_buggy
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
Closure-14_fix
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
Closure-145_buggy
2#Node TRANSVAR0
Closure-145_fix
2#Node TRANSVAR0
4#TRANSVAR1=n.getLastChild()
Closure-146_buggy
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
Closure-146_fix
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
12#TRANSVAR2=getNativeType(JSTypeNative.NO_TYPE)
Closure-15_buggy
2#Node TRANSVAR0
21#TRANSVAR1=n.getFirstChild()
Closure-15_fix
2#Node TRANSVAR0
24#TRANSVAR1=n.getFirstChild()
Closure-150_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
Closure-150_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
Closure-152_buggy
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
13#TRANSVAR2=false
14#TRANSVAR3=ImmutableList.builder()
16#ObjectType TRANSVAR4
17#TRANSVAR5=(ObjectType)iface.resolve(t,scope)
26#TRANSVAR6=0
Closure-152_fix
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
11#TRANSVAR2=safeResolve(typeOfThis,t,scope)
16#TRANSVAR3=false
17#TRANSVAR4=ImmutableList.builder()
19#ObjectType TRANSVAR5
20#TRANSVAR6=(ObjectType)iface.resolve(t,scope)
29#TRANSVAR7=0
Closure-159_buggy
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
7#TRANSVAR2=node.getFirstChild()
13#TRANSVAR3=node.getFirstChild()
Closure-159_fix
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
12#TRANSVAR2=node.getFirstChild()
Closure-160_buggy
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
Closure-160_fix
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
44#TRANSVAR3=new ComposeWarningsGuard(guards)
Closure-161_buggy
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
14#TRANSVAR4=right.getDouble()
15#TRANSVAR5=(int)index
26#TRANSVAR6=left.getFirstChild()
27#TRANSVAR7=0
Closure-161_fix
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=0
Closure-164_buggy
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
Closure-164_fix
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
50#TRANSVAR8=thisIsVarArgs || thisParam.isOptionalArg()
51#TRANSVAR9=thatIsVarArgs || thatParam.isOptionalArg()
60#TRANSVAR10=thatIsVarArgs && (thatParamType == null || thatParamType.isUnknownType() || thatParamType.isNoType())
Closure-166_buggy
2#JSType TRANSVAR0
Closure-166_fix
2#JSType TRANSVAR0
20#JSType TRANSVAR1
Closure-168_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
Closure-168_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
Closure-17_buggy
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
36#TRANSVAR5=rValue.getFirstChild()
37#TRANSVAR6=firstClause.getNext()
38#TRANSVAR7=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
Closure-17_fix
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
26#TRANSVAR5=rValue.getJSDocInfo()
40#TRANSVAR6=rValue.getFirstChild()
41#TRANSVAR7=firstClause.getNext()
42#TRANSVAR8=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
Closure-172_buggy
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
14#TRANSVAR5=true
31#TRANSVAR6=n.getParent()
41#TRANSVAR7=getFunctionAnalysisResults(scope.getRootNode())
Closure-172_fix
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
11#TRANSVAR5=qName.substring(0,qName.lastIndexOf(".prototype"))
12#TRANSVAR6=scope.getSlot(className)
13#TRANSVAR7=slot == null ? null : slot.getType()
20#TRANSVAR8=true
37#TRANSVAR9=n.getParent()
47#TRANSVAR10=getFunctionAnalysisResults(scope.getRootNode())
Closure-176_buggy
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=left.hasChildren()
27#TRANSVAR7=!isVarDeclaration || var == null || var.isTypeInferred()
47#TRANSVAR8=var.getType()
53#TRANSVAR9=left.getQualifiedName()
Closure-176_fix
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=var == null ? null : var.getType()
10#TRANSVAR7=left.hasChildren() && varType != null && !var.isTypeInferred()
29#TRANSVAR8=isVarDeclaration && !resultType.isNullType() && !resultType.isVoidType()
51#TRANSVAR9=var.getType()
57#TRANSVAR10=left.getQualifiedName()
Closure-18_buggy
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-18_fix
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-19_buggy
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
Closure-19_fix
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
Closure-2_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
11#String TRANSVAR8
12#TRANSVAR9=properties.get(name)
24#ObjectType TRANSVAR10
Closure-2_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
15#String TRANSVAR8
16#TRANSVAR9=properties.get(name)
28#ObjectType TRANSVAR10
Closure-20_buggy
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
15#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
Closure-20_fix
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
Closure-21_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
36#Node TRANSVAR5
37#TRANSVAR6=an.getType()
50#TRANSVAR7="This code lacks side-effects. Is there a bug?"
Closure-21_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
Closure-22_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
20#TRANSVAR3=parent.getParent()
30#Node TRANSVAR4
31#TRANSVAR5=an.getType()
48#TRANSVAR6=NodeUtil.isExpressionResultUsed(n)
49#TRANSVAR7=NodeUtil.isSimpleOperatorType(n.getType())
57#TRANSVAR8="This code lacks side-effects. Is there a bug?"
Closure-22_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
Closure-23_buggy
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
Closure-23_fix
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
Closure-24_buggy
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
Closure-24_fix
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
Closure-25_buggy
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
4#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
26#TRANSVAR6=constructor.getNext()
Closure-25_fix
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
5#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
Closure-29_buggy
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#Reference TRANSVAR2
5#TRANSVAR3=ref.getNode()
6#TRANSVAR4=ref.getParent()
7#TRANSVAR5=ref.getGrandparent()
36#TRANSVAR6=ref.getAssignedValue()
55#TRANSVAR7=val.getFirstChild()
64#TRANSVAR8=child.getFirstChild()
68#Reference TRANSVAR9
69#TRANSVAR10=t.getParent()
Closure-29_fix
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
29#TRANSVAR7=parent.getLastChild().getString()
45#TRANSVAR8=ref.getAssignedValue()
64#TRANSVAR9=val.getFirstChild()
74#TRANSVAR10=child.getFirstChild()
78#Reference TRANSVAR11
79#TRANSVAR12=t.getParent()
Closure-31_buggy
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
53#CompilerInput TRANSVAR5
56#String TRANSVAR6
66#CircularDependencyException TRANSVAR7
74#MissingProvideException TRANSVAR8
85#CompilerInput TRANSVAR9
86#TRANSVAR10=input.getAstRoot(this)
94#TRANSVAR11=n.getJSDocInfo()
119#CompilerInput TRANSVAR12
120#TRANSVAR13=input.getAstRoot(this)
137#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-31_fix
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
52#CompilerInput TRANSVAR5
55#String TRANSVAR6
65#CircularDependencyException TRANSVAR7
73#MissingProvideException TRANSVAR8
84#CompilerInput TRANSVAR9
85#TRANSVAR10=input.getAstRoot(this)
93#TRANSVAR11=n.getJSDocInfo()
118#CompilerInput TRANSVAR12
119#TRANSVAR13=input.getAstRoot(this)
136#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-32_buggy
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
70#TRANSVAR7=builder.toString()
76#TRANSVAR8=stream.getLineno()
77#TRANSVAR9=stream.getCharno()
Closure-32_fix
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
31#TRANSVAR7=-1
65#TRANSVAR8=token == JsDocToken.EOC
68#TRANSVAR9=stream.getCharno() - lineStartChar
69#TRANSVAR10=0
85#TRANSVAR11=builder.toString()
91#TRANSVAR12=stream.getLineno()
92#TRANSVAR13=stream.getCharno()
Closure-33_buggy
2#ObjectType TRANSVAR0
15#String TRANSVAR1
16#TRANSVAR2=constraintObj.getPropertyType(prop)
18#TRANSVAR3=propType
Closure-33_fix
2#ObjectType TRANSVAR0
18#String TRANSVAR1
19#TRANSVAR2=constraintObj.getPropertyType(prop)
21#TRANSVAR3=propType
Closure-35_buggy
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
11#TRANSVAR3=ObjectType.cast(type.restrictByNotNullOrUndefined())
13#String TRANSVAR4
14#TRANSVAR5=constraintObj.getPropertyType(prop)
16#TRANSVAR6=propType
Closure-35_fix
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
Closure-36_buggy
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
Closure-36_fix
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
Closure-38_buggy
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
Closure-38_fix
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
Closure-39_buggy
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
Closure-39_fix
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
Closure-4_buggy
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
Closure-4_fix
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
Closure-40_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,false)
Closure-40_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,true)
Closure-42_buggy
2#ForInLoop TRANSVAR0
Closure-42_fix
2#ForInLoop TRANSVAR0
Closure-44_buggy
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
Closure-44_fix
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
Closure-48_buggy
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
115#TRANSVAR13=getObjectSlot(ownerName)
119#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
134#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
137#TRANSVAR16=ownerType.getTypeOfThis()
138#TRANSVAR17=codingConvention.getDelegateSuperclassName()
139#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
Closure-48_fix
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
118#TRANSVAR13=getObjectSlot(ownerName)
122#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
137#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
140#TRANSVAR16=ownerType.getTypeOfThis()
141#TRANSVAR17=codingConvention.getDelegateSuperclassName()
142#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
Closure-5_buggy
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
32#TRANSVAR7=parent.getLastChild().getString()
48#TRANSVAR8=ref.getAssignedValue()
67#TRANSVAR9=val.getFirstChild()
77#TRANSVAR10=child.getFirstChild()
81#Reference TRANSVAR11
82#TRANSVAR12=t.getParent()
Closure-5_fix
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
35#TRANSVAR7=parent.getLastChild().getString()
51#TRANSVAR8=ref.getAssignedValue()
70#TRANSVAR9=val.getFirstChild()
80#TRANSVAR10=child.getFirstChild()
84#Reference TRANSVAR11
85#TRANSVAR12=t.getParent()
Closure-50_buggy
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
26#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
27#TRANSVAR6=Lists.newLinkedList()
28#TRANSVAR7=null
29#TRANSVAR8=0
30#TRANSVAR9=null
31#TRANSVAR10=arrayNode.getFirstChild()
67#TRANSVAR11=InlineCostEstimator.getCost(n)
70#TRANSVAR12=Node.newString("")
75#TRANSVAR13=arrayFoldedChildren.remove(0)
83#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
96#TRANSVAR15="[].join()".length()
103#Node TRANSVAR16
Closure-50_fix
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
31#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
32#TRANSVAR6=Lists.newLinkedList()
33#TRANSVAR7=null
34#TRANSVAR8=0
35#TRANSVAR9=null
36#TRANSVAR10=arrayNode.getFirstChild()
72#TRANSVAR11=InlineCostEstimator.getCost(n)
75#TRANSVAR12=Node.newString("")
80#TRANSVAR13=arrayFoldedChildren.remove(0)
88#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
101#TRANSVAR15="[].join()".length()
108#Node TRANSVAR16
Closure-51_buggy
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
Closure-51_fix
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
Closure-52_buggy
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
Closure-52_fix
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
Closure-53_buggy
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
39#TRANSVAR11=replacement
40#TRANSVAR12
43#TRANSVAR13=new Node(Token.COMMA)
50#TRANSVAR14=ref.getParent()
Closure-53_fix
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
42#TRANSVAR11=replacement
43#TRANSVAR12
46#TRANSVAR13=new Node(Token.COMMA)
54#TRANSVAR14=ref.getParent()
Closure-55_buggy
2#Node TRANSVAR0
Closure-55_fix
2#Node TRANSVAR0
Closure-56_buggy
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
Closure-56_fix
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
Closure-57_buggy
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
Closure-57_fix
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
Closure-58_buggy
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
37#TRANSVAR6=n.getFirstChild()
71#TRANSVAR7=n.getFirstChild()
81#TRANSVAR8=n.getFirstChild()
Closure-58_fix
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
41#TRANSVAR6=n.getFirstChild()
75#TRANSVAR7=n.getFirstChild()
85#TRANSVAR8=n.getFirstChild()
Closure-59_buggy
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
44#TRANSVAR2=Lists.newArrayList()
50#TRANSVAR3=new ComposeWarningsGuard(guards)
Closure-59_fix
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
45#TRANSVAR2=Lists.newArrayList()
51#TRANSVAR3=new ComposeWarningsGuard(guards)
Closure-61_buggy
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
42#TRANSVAR4=nameNode.getNext()
Closure-61_fix
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
35#TRANSVAR4=nameNode.getFirstChild().getString()
48#TRANSVAR5=nameNode.getNext()
Closure-62_buggy
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
Closure-62_fix
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
Closure-65_buggy
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
Closure-65_fix
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
Closure-66_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
149#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
150#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
151#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
169#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
170#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
199#TRANSVAR14="left side of comparison"
272#TRANSVAR15=getJSType(parent.getFirstChild())
273#TRANSVAR16=getJSType(n.getFirstChild())
279#TRANSVAR17=n.getFirstChild()
334#Node TRANSVAR18
Closure-66_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
151#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
152#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
153#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
171#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
172#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
201#TRANSVAR14="left side of comparison"
274#TRANSVAR15=getJSType(parent.getFirstChild())
275#TRANSVAR16=getJSType(n.getFirstChild())
281#TRANSVAR17=n.getFirstChild()
336#Node TRANSVAR18
Closure-67_buggy
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
Closure-67_fix
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
Closure-69_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
Closure-69_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
Closure-7_buggy
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
Closure-7_fix
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
Closure-70_buggy
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
Closure-70_fix
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
Closure-71_buggy
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
Closure-71_fix
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=parent.getJSDocInfo() != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
Closure-73_buggy
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
Closure-73_fix
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
Closure-77_buggy
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
29#TRANSVAR9="/script"
32#TRANSVAR10="!--"
Closure-77_fix
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
Closure-78_buggy
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
73#TRANSVAR8=Node.newNumber(result)
Closure-78_fix
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
71#TRANSVAR8=Node.newNumber(result)
Closure-81_buggy
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
10#TRANSVAR3=newNode(Token.FUNCTION)
11#TRANSVAR4=transform(name)
19#TRANSVAR5=functionNode.getAbsolutePosition() + functionNode.getLp()
25#TRANSVAR6=newNode(Token.LP)
32#TRANSVAR7=functionNode.getFunctionName()
38#TRANSVAR8=functionNode.getLp() + functionNode.getAbsolutePosition()
42#AstNode TRANSVAR9
47#TRANSVAR10=transform(functionNode.getBody())
Closure-81_fix
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
6#TRANSVAR3=functionNode.getFunctionType()
17#TRANSVAR4=newNode(Token.FUNCTION)
18#TRANSVAR5=transform(name)
26#TRANSVAR6=functionNode.getAbsolutePosition() + functionNode.getLp()
32#TRANSVAR7=newNode(Token.LP)
39#TRANSVAR8=functionNode.getFunctionName()
45#TRANSVAR9=functionNode.getLp() + functionNode.getAbsolutePosition()
49#AstNode TRANSVAR10
54#TRANSVAR11=transform(functionNode.getBody())
Closure-82_buggy
Closure-82_fix
Closure-83_buggy
2#Parameters TRANSVAR0
3#TRANSVAR1=params.getParameter(0)
9#TRANSVAR2=param.toLowerCase()
Closure-83_fix
2#Parameters TRANSVAR0
3#TRANSVAR1=null
6#CmdLineException TRANSVAR2
12#TRANSVAR3=param.toLowerCase()
Closure-86_buggy
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
Closure-86_fix
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
Closure-87_buggy
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
Closure-87_fix
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
14#TRANSVAR2=maybeExpr.getFirstChild().getFirstChild()
Closure-88_buggy
3#Node TRANSVAR0
3#String TRANSVAR1
16#TRANSVAR2=n.getFirstChild()
19#TRANSVAR3=isVariableReadBeforeKill(child,variable)
Closure-88_fix
3#Node TRANSVAR0
3#String TRANSVAR1
10#TRANSVAR2=n.getNext()
11#TRANSVAR3=isVariableReadBeforeKill(rhs,variable)
22#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=isVariableReadBeforeKill(child,variable)
Closure-91_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
38#TRANSVAR5=parent.getFirstChild()
39#TRANSVAR6=lhs.getNext()
56#TRANSVAR7=lhs.getFirstChild()
Closure-91_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
35#TRANSVAR5=parent.getParent()
37#TRANSVAR6=gramps.getJSDocInfo()
47#TRANSVAR7=parent.getFirstChild()
48#TRANSVAR8=lhs.getNext()
65#TRANSVAR9=lhs.getFirstChild()
Closure-92_buggy
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.indexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
Closure-92_fix
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.lastIndexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
Closure-94_buggy
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
Closure-94_fix
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
Closure-95_buggy
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
35#TRANSVAR7=scopeToDeclareIn.getVar(variableName)
42#TRANSVAR8=compiler.getInput(sourceName)
46#TRANSVAR9=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
48#TRANSVAR10=input.isExtern()
63#TRANSVAR11=(FunctionType)type
65#TRANSVAR12=fnType.getSuperClassConstructor()
Closure-95_fix
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
31#TRANSVAR7=scope.getGlobalScope()
42#TRANSVAR8=scopeToDeclareIn.getVar(variableName)
49#TRANSVAR9=compiler.getInput(sourceName)
53#TRANSVAR10=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
55#TRANSVAR11=input.isExtern()
70#TRANSVAR12=(FunctionType)type
72#TRANSVAR13=fnType.getSuperClassConstructor()
Closure-96_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
23#TRANSVAR8=call.getChildCount() - 1
24#TRANSVAR9=functionType.getMinArguments()
25#TRANSVAR10=functionType.getMaxArguments()
Closure-96_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
26#TRANSVAR8=call.getChildCount() - 1
27#TRANSVAR9=functionType.getMinArguments()
28#TRANSVAR10=functionType.getMaxArguments()
Closure-97_buggy
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
55#TRANSVAR8=Node.newNumber(result)
Closure-97_fix
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
48#TRANSVAR8=lvalInt & 0xffffffffL
56#TRANSVAR9=Node.newNumber(result)
Closure-99_buggy
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
20#TRANSVAR4=parent.getType()
30#TRANSVAR5=parent.getFirstChild()
31#TRANSVAR6=lhs.getNext()
Closure-99_fix
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
21#TRANSVAR4=parent.getType()
31#TRANSVAR5=parent.getFirstChild()
32#TRANSVAR6=lhs.getNext()
49#TRANSVAR7=lhs.getFirstChild()
Codec-10_buggy
2#String TRANSVAR0
Codec-10_fix
2#String TRANSVAR0
Codec-15_buggy
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=str.charAt(index - 1)
9#TRANSVAR4=str.charAt(index - 2)
10#TRANSVAR5=this.map(preHWChar)
Codec-15_fix
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=index - 1
8#TRANSVAR4=str.charAt(i)
Codec-17_buggy
2#final byte[] TRANSVAR0
Codec-17_fix
2#final byte[] TRANSVAR0
Codec-18_buggy
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
Codec-18_fix
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
Codec-2_buggy
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
Codec-2_fix
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
Codec-3_buggy
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
Codec-3_fix
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
Codec-4_buggy
Codec-4_fix
Codec-5_buggy
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
Codec-5_fix
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
Codec-6_buggy
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
29#TRANSVAR3=new byte[doEncode ? 4096 : 8192]
30#TRANSVAR4=in.read(buf)
Codec-6_fix
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
12#TRANSVAR3=0
31#TRANSVAR4=new byte[doEncode ? 4096 : 8192]
32#TRANSVAR5=in.read(buf)
Codec-7_buggy
2#byte[] TRANSVAR0
Codec-7_fix
2#byte[] TRANSVAR0
Codec-9_buggy
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,MIME_CHUNK_SIZE,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
Codec-9_fix
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,isChunked ? MIME_CHUNK_SIZE : 0,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
Collections-26_buggy
Collections-26_fix
Compress-1_buggy
Compress-1_fix
Compress-10_buggy
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#ZipArchiveEntry TRANSVAR1
10#TRANSVAR2=entries.get(ze)
11#TRANSVAR3=offsetEntry.headerOffset
13#TRANSVAR4=new byte[SHORT]
15#TRANSVAR5=ZipShort.getValue(b)
17#TRANSVAR6=ZipShort.getValue(b)
18#TRANSVAR7=fileNameLen
20#TRANSVAR8=archive.skipBytes(lenToSkip)
27#TRANSVAR9=new byte[extraFieldLen]
34#TRANSVAR10=ze.getName()
35#TRANSVAR11=entriesWithoutUTF8Flag.get(ze)
Compress-10_fix
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#TRANSVAR1=new LinkedHashMap<ZipArchiveEntry,OffsetEntry>(entries)
12#ZipArchiveEntry TRANSVAR2
13#TRANSVAR3=origMap.get(ze)
14#TRANSVAR4=offsetEntry.headerOffset
16#TRANSVAR5=new byte[SHORT]
18#TRANSVAR6=ZipShort.getValue(b)
20#TRANSVAR7=ZipShort.getValue(b)
21#TRANSVAR8=fileNameLen
23#TRANSVAR9=archive.skipBytes(lenToSkip)
30#TRANSVAR10=new byte[extraFieldLen]
37#TRANSVAR11=ze.getName()
38#TRANSVAR12=entriesWithoutUTF8Flag.get(ze)
Compress-11_buggy
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
46#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
49#Exception TRANSVAR6
54#IOException TRANSVAR7
Compress-11_fix
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
50#Exception TRANSVAR6
56#IOException TRANSVAR7
Compress-12_buggy
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
34#TRANSVAR3=new StringBuffer()
35#TRANSVAR4=new byte[SMALL_BUFFER_SIZE]
36#TRANSVAR5=0
Compress-12_fix
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
30#IllegalArgumentException TRANSVAR3
31#TRANSVAR4=new IOException("Error detected parsing the header")
40#TRANSVAR5=new StringBuffer()
41#TRANSVAR6=new byte[SMALL_BUFFER_SIZE]
42#TRANSVAR7=0
Compress-13_buggy
2#String TRANSVAR0
Compress-13_fix
2#String TRANSVAR0
Compress-14_buggy
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
Chart-1_buggy
Chart-10_buggy
Chart-11_buggy
Chart-12_buggy
Chart-13_buggy
Chart-17_buggy
Chart-20_buggy
Chart-24_buggy
Chart-26_buggy
Chart-3_buggy
Chart-4_buggy
Chart-5_buggy
Chart-6_buggy
Chart-7_buggy
Chart-8_buggy
Chart-9_buggy
Cli-11_buggy
Cli-12_buggy
Cli-14_buggy
Cli-15_buggy
Cli-17_buggy
Cli-19_buggy
Cli-20_buggy
Cli-23_buggy
Cli-24_buggy
Cli-25_buggy
Cli-26_buggy
Cli-27_buggy
Cli-28_buggy
Cli-29_buggy
Cli-32_buggy
Cli-35_buggy
Cli-37_buggy
Cli-38_buggy
Cli-4_buggy
Cli-40_buggy
Cli-5_buggy
Cli-8_buggy
Cli-9_buggy
Closure-1_buggy
Closure-10_buggy
Closure-101_buggy
Closure-102_buggy
Closure-104_buggy
Closure-105_buggy
Closure-107_buggy
Closure-109_buggy
Closure-11_buggy
Closure-111_buggy
Closure-112_buggy
Closure-113_buggy
Closure-114_buggy
Closure-115_buggy
Closure-116_buggy
Closure-117_buggy
Closure-118_buggy
Closure-119_buggy
Closure-12_buggy
Closure-120_buggy
Closure-121_buggy
Closure-122_buggy
Closure-123_buggy
Closure-124_buggy
Closure-125_buggy
Closure-126_buggy
Closure-128_buggy
Closure-129_buggy
Closure-13_buggy
Closure-130_buggy
Closure-131_buggy
Closure-132_buggy
Closure-133_buggy
Closure-14_buggy
Closure-145_buggy
Closure-146_buggy
Closure-15_buggy
Closure-150_buggy
Closure-152_buggy
Closure-159_buggy
Closure-160_buggy
Closure-161_buggy
Closure-164_buggy
Closure-166_buggy
Closure-168_buggy
Closure-17_buggy
Closure-172_buggy
Closure-176_buggy
Closure-18_buggy
Closure-19_buggy
Closure-2_buggy
Closure-20_buggy
Closure-21_buggy
Closure-22_buggy
Closure-23_buggy
Closure-24_buggy
Closure-25_buggy
Closure-29_buggy
Closure-31_buggy
Closure-32_buggy
Closure-33_buggy
Closure-35_buggy
Closure-36_buggy
Closure-38_buggy
Closure-39_buggy
Closure-4_buggy
Closure-40_buggy
Closure-42_buggy
Closure-44_buggy
Closure-48_buggy
Closure-5_buggy
Closure-50_buggy
Closure-51_buggy
Closure-52_buggy
Closure-53_buggy
Closure-55_buggy
Closure-56_buggy
Closure-57_buggy
Closure-58_buggy
Closure-59_buggy
Closure-61_buggy
Closure-62_buggy
Closure-65_buggy
Closure-66_buggy
Closure-67_buggy
Closure-69_buggy
Closure-7_buggy
Closure-70_buggy
Closure-71_buggy
Closure-73_buggy
Closure-77_buggy
Closure-78_buggy
Closure-81_buggy
Closure-82_buggy
Closure-83_buggy
Closure-86_buggy
Closure-87_buggy
Closure-88_buggy
Closure-91_buggy
Closure-92_buggy
Closure-94_buggy
Closure-95_buggy
Closure-96_buggy
Closure-97_buggy
Closure-99_buggy
Codec-10_buggy
Codec-15_buggy
Codec-17_buggy
Codec-18_buggy
Codec-2_buggy
Codec-3_buggy
Codec-4_buggy
Codec-5_buggy
Codec-6_buggy
Codec-7_buggy
Codec-9_buggy
Collections-26_buggy
Compress-1_buggy
Compress-10_buggy
Compress-11_buggy
Compress-12_buggy
Compress-13_buggy
Compress-14_buggy
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
Compress-14_fix
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
Compress-15_buggy
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
Compress-15_fix
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
Compress-16_buggy
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
51#Exception TRANSVAR6
58#IOException TRANSVAR7
Compress-16_fix
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
52#Exception TRANSVAR6
59#IOException TRANSVAR7
Compress-17_buggy
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
Compress-17_fix
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
41#TRANSVAR7=buffer[start]
Compress-18_buggy
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
10#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
13#TRANSVAR4=new StringWriter()
14#Map.Entry<String,String> TRANSVAR5
15#TRANSVAR6=h.getKey()
16#TRANSVAR7=h.getValue()
17#TRANSVAR8=key.length() + value.length() + 3+ 2
20#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
21#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
34#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
Compress-18_fix
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
13#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
16#TRANSVAR4=new StringWriter()
17#Map.Entry<String,String> TRANSVAR5
18#TRANSVAR6=h.getKey()
19#TRANSVAR7=h.getValue()
20#TRANSVAR8=key.length() + value.length() + 3+ 2
23#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
24#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
37#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
Compress-19_buggy
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
Compress-19_fix
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
Compress-21_buggy
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
Compress-21_fix
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
Compress-23_buggy
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
Compress-23_fix
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
Compress-24_buggy
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
42#TRANSVAR7=buffer[start]
Compress-24_fix
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
Compress-25_buggy
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
Compress-25_fix
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
Compress-26_buggy
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
Compress-26_fix
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
13#TRANSVAR4=new byte[SKIP_BUF_SIZE]
15#TRANSVAR5=readFully(input,skipBuf,0,(int)Math.min(numToSkip,SKIP_BUF_SIZE))
Compress-27_buggy
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
Compress-27_fix
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
Compress-28_buggy
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
Compress-28_fix
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
Compress-30_buggy
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
18#TRANSVAR3=offs + len
19#TRANSVAR4=offs
20#TRANSVAR5
26#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
Compress-30_fix
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
21#TRANSVAR3=offs + len
22#TRANSVAR4=offs
23#TRANSVAR5
29#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
Compress-31_buggy
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
Compress-31_fix
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
Compress-32_buggy
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
Compress-32_fix
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
Compress-35_buggy
2#byte[] TRANSVAR0
3#TRANSVAR1=0
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
Compress-35_fix
2#byte[] TRANSVAR0
3#TRANSVAR1=parseOctal(header,CHKSUM_OFFSET,CHKSUMLEN)
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
Compress-36_buggy
11#TRANSVAR0=deferredBlockStreams.remove(0)
Compress-36_fix
14#TRANSVAR0=deferredBlockStreams.remove(0)
Compress-37_buggy
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
14#TRANSVAR5=new ByteArrayOutputStream()
18#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
20#TRANSVAR7=len - read
24#TRANSVAR8=new byte[restLen]
25#TRANSVAR9=IOUtils.readFully(i,rest)
34#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
Compress-37_fix
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
16#TRANSVAR5=new ByteArrayOutputStream()
20#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
22#TRANSVAR7=len - read
26#TRANSVAR8=new byte[restLen]
27#TRANSVAR9=IOUtils.readFully(i,rest)
36#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
Compress-38_buggy
Compress-38_fix
Compress-40_buggy
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
21#TRANSVAR2
Compress-40_fix
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
19#TRANSVAR2=0
20#TRANSVAR3=0l
23#TRANSVAR4=count - bitsCachedSize
25#TRANSVAR5=in.read()
30#TRANSVAR6=nextByte & MASKS[bitsToAddCount]
35#TRANSVAR7=(nextByte >>> (overflowBits)) & MASKS[bitsToAddCount]
42#TRANSVAR8
Compress-41_buggy
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
35#TRANSVAR3=WORD
38#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
42#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
43#TRANSVAR6=gpFlag.usesUTF8ForNames()
44#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
53#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
57#TRANSVAR9=null
57#TRANSVAR10=null
71#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
75#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
78#TRANSVAR13=new byte[fileNameLen]
82#TRANSVAR14=new byte[extraLen]
Compress-41_fix
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
36#TRANSVAR3=WORD
39#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
43#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
44#TRANSVAR6=gpFlag.usesUTF8ForNames()
45#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
54#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
58#TRANSVAR9=null
58#TRANSVAR10=null
72#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
76#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
79#TRANSVAR13=new byte[fileNameLen]
83#TRANSVAR14=new byte[extraLen]
Compress-44_buggy
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
Compress-44_fix
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
Compress-45_buggy
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
Compress-45_fix
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
Compress-46_buggy
2#long TRANSVAR0
3#TRANSVAR1=0x100000000L
Compress-46_fix
2#long TRANSVAR0
Compress-5_buggy
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
Compress-5_fix
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
Compress-7_buggy
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
Compress-7_fix
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
7#TRANSVAR6=buffer[i]
Compress-8_buggy
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=true
5#TRANSVAR5=offset + length
6#TRANSVAR6=offset
8#TRANSVAR7=start
9#TRANSVAR8=buffer[i]
Compress-8_fix
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
Csv-1_buggy
3#TRANSVAR0=super.read()
Csv-1_fix
3#TRANSVAR0=super.read()
Csv-10_buggy
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
Csv-10_fix
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
Csv-11_buggy
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header.trim().isEmpty()
Csv-11_fix
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header == null || header.trim().isEmpty()
Csv-14_buggy
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
Csv-14_fix
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
Csv-15_buggy
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
Csv-15_fix
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
89#TRANSVAR14=value.charAt(pos)
Csv-2_buggy
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
Csv-2_fix
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
10#ArrayIndexOutOfBoundsException TRANSVAR2
Csv-3_buggy
4#TRANSVAR0=in.read()
Csv-3_fix
4#TRANSVAR0=in.read()
Csv-4_buggy
Csv-4_fix
Csv-5_buggy
3#TRANSVAR0=format.getRecordSeparator()
Csv-5_fix
3#TRANSVAR0=format.getRecordSeparator()
Csv-6_buggy
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
Csv-6_fix
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
Csv-9_buggy
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
Csv-9_fix
2#final M TRANSVAR0
6#final Entry<String,Integer> TRANSVAR1
7#TRANSVAR2=entry.getValue().intValue()
Gson-11_buggy
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
Gson-11_fix
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
Gson-12_buggy
Gson-12_fix
Gson-13_buggy
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
Gson-13_fix
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
Gson-15_buggy
2#double TRANSVAR0
Gson-15_fix
2#double TRANSVAR0
Gson-16_buggy
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
15#TRANSVAR5=(Class<?>)toResolve
16#TRANSVAR6=original.getComponentType()
17#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
23#TRANSVAR8=(GenericArrayType)toResolve
24#TRANSVAR9=original.getGenericComponentType()
25#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
31#TRANSVAR11=(ParameterizedType)toResolve
32#TRANSVAR12=original.getOwnerType()
33#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
34#TRANSVAR14=newOwnerType != ownerType
36#TRANSVAR15=original.getActualTypeArguments()
37#TRANSVAR16=0
37#TRANSVAR17=args.length
38#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
53#TRANSVAR19=(WildcardType)toResolve
54#TRANSVAR20=original.getLowerBounds()
55#TRANSVAR21=original.getUpperBounds()
58#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
63#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
Gson-16_fix
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
20#TRANSVAR5=(Class<?>)toResolve
21#TRANSVAR6=original.getComponentType()
22#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
28#TRANSVAR8=(GenericArrayType)toResolve
29#TRANSVAR9=original.getGenericComponentType()
30#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
36#TRANSVAR11=(ParameterizedType)toResolve
37#TRANSVAR12=original.getOwnerType()
38#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
39#TRANSVAR14=newOwnerType != ownerType
41#TRANSVAR15=original.getActualTypeArguments()
42#TRANSVAR16=0
42#TRANSVAR17=args.length
43#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
58#TRANSVAR19=(WildcardType)toResolve
59#TRANSVAR20=original.getLowerBounds()
60#TRANSVAR21=original.getUpperBounds()
63#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
68#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
Gson-17_buggy
2#JsonReader TRANSVAR0
6#TRANSVAR1=deserializeToDate(in.nextString())
Gson-17_fix
2#JsonReader TRANSVAR0
7#TRANSVAR1=deserializeToDate(in.nextString())
Gson-18_buggy
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
Gson-18_fix
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
Gson-5_buggy
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
103#TRANSVAR20="GMT" + timezoneOffset
108#TRANSVAR21=timezone.getID()
115#TRANSVAR22=act.replace(":","")
126#TRANSVAR23=new GregorianCalendar(timezone)
140#IndexOutOfBoundsException TRANSVAR24
142#NumberFormatException TRANSVAR25
144#IllegalArgumentException TRANSVAR26
147#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
148#TRANSVAR28=fail.getMessage()
152#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
Gson-5_fix
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
104#TRANSVAR20="GMT" + timezoneOffset
109#TRANSVAR21=timezone.getID()
116#TRANSVAR22=act.replace(":","")
127#TRANSVAR23=new GregorianCalendar(timezone)
141#IndexOutOfBoundsException TRANSVAR24
143#NumberFormatException TRANSVAR25
145#IllegalArgumentException TRANSVAR26
148#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
149#TRANSVAR28=fail.getMessage()
153#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
Gson-6_buggy
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
Gson-6_fix
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
JacksonCore-11_buggy
JacksonCore-11_fix
JacksonCore-15_buggy
11#TRANSVAR0=_exposedContext
15#TRANSVAR1=ctxt.nextTokenToRead()
52#TRANSVAR2=delegate.nextToken()
59#TRANSVAR3
138#TRANSVAR4=_headContext.isStartHandled()
153#TRANSVAR5=delegate.getCurrentName()
JacksonCore-15_fix
20#TRANSVAR0=_exposedContext
24#TRANSVAR1=ctxt.nextTokenToRead()
61#TRANSVAR2=delegate.nextToken()
68#TRANSVAR3
147#TRANSVAR4=_headContext.isStartHandled()
162#TRANSVAR5=delegate.getCurrentName()
JacksonCore-20_buggy
2#Object TRANSVAR0
JacksonCore-20_fix
2#Object TRANSVAR0
JacksonCore-21_buggy
26#TRANSVAR0=_exposedContext
30#TRANSVAR1=ctxt.nextTokenToRead()
67#TRANSVAR2=delegate.nextToken()
75#TRANSVAR3
154#TRANSVAR4=_headContext.isStartHandled()
169#TRANSVAR5=delegate.getCurrentName()
JacksonCore-21_fix
28#TRANSVAR0=_exposedContext
32#TRANSVAR1=ctxt.nextTokenToRead()
69#TRANSVAR2=delegate.nextToken()
77#TRANSVAR3
156#TRANSVAR4=_headContext.isStartHandled()
171#TRANSVAR5=delegate.getCurrentName()
JacksonCore-23_buggy
JacksonCore-23_fix
JacksonCore-25_buggy
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
JacksonCore-25_fix
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
JacksonCore-26_buggy
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
JacksonCore-26_fix
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
JacksonCore-3_buggy
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
JacksonCore-3_fix
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
JacksonCore-4_buggy
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
8#TRANSVAR2=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1))
JacksonCore-4_fix
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
7#TRANSVAR2=len + (len >> 1)
JacksonCore-5_buggy
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i++)
16#TRANSVAR4=NumberInput.parseLong(str)
JacksonCore-5_fix
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i)
16#TRANSVAR4=NumberInput.parseLong(str)
JacksonCore-6_buggy
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=0
11#TRANSVAR3=str.charAt(i)
17#TRANSVAR4=NumberInput.parseLong(str)
JacksonCore-6_fix
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
17#TRANSVAR3=1
24#TRANSVAR4=NumberInput.parseLong(str)
JacksonCore-7_buggy
12#TRANSVAR0=_index
JacksonCore-7_fix
15#TRANSVAR0=_index
JacksonCore-8_buggy
JacksonCore-8_fix
JacksonDatabind-1_buggy
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
14#TRANSVAR4=_serializer
16#TRANSVAR5=value.getClass()
17#TRANSVAR6=_dynamicSerializers
JacksonDatabind-1_fix
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
15#TRANSVAR4=_serializer
17#TRANSVAR5=value.getClass()
18#TRANSVAR6=_dynamicSerializers
JacksonDatabind-100_buggy
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
10#TRANSVAR2=n.binaryValue()
15#TRANSVAR3=((POJONode)n).getPojo()
JacksonDatabind-100_fix
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
JacksonDatabind-101_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
60#TRANSVAR10=_beanProperties.find(propName)
80#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
86#Exception TRANSVAR12
94#TRANSVAR13
97#Exception TRANSVAR14
JacksonDatabind-101_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
64#TRANSVAR10=_beanProperties.find(propName)
84#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
90#Exception TRANSVAR12
98#TRANSVAR13
101#Exception TRANSVAR14
JacksonDatabind-102_buggy
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
10#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
15#TRANSVAR3=format.getShape()
23#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
26#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
27#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
34#TRANSVAR7=format.hasLocale()
35#TRANSVAR8=format.hasTimeZone()
36#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
42#TRANSVAR10=serializers.getConfig().getDateFormat()
45#TRANSVAR11=(StdDateFormat)df0
63#TRANSVAR12=(SimpleDateFormat)df0
70#TRANSVAR13=format.getTimeZone()
71#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
JacksonDatabind-102_fix
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
7#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
12#TRANSVAR3=format.getShape()
20#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
24#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
31#TRANSVAR7=format.hasLocale()
32#TRANSVAR8=format.hasTimeZone()
33#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
39#TRANSVAR10=serializers.getConfig().getDateFormat()
42#TRANSVAR11=(StdDateFormat)df0
60#TRANSVAR12=(SimpleDateFormat)df0
67#TRANSVAR13=format.getTimeZone()
68#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
JacksonDatabind-107_buggy
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
JacksonDatabind-107_fix
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
JacksonDatabind-11_buggy
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name)
26#TRANSVAR4=type.getBounds()
JacksonDatabind-11_fix
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name,false)
26#TRANSVAR4=type.getBounds()
JacksonDatabind-112_buggy
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getDelegateType(ctxt.getConfig())
15#TRANSVAR5=_valueDeserializer
16#TRANSVAR6=_containerType.getContentType()
29#TRANSVAR7=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
31#TRANSVAR8=findContentNullProvider(ctxt,property,valueDeser)
JacksonDatabind-112_fix
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getArrayDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
14#TRANSVAR5=_valueInstantiator.getDelegateType(ctxt.getConfig())
18#TRANSVAR6=_valueDeserializer
19#TRANSVAR7=_containerType.getContentType()
32#TRANSVAR8=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
34#TRANSVAR9=findContentNullProvider(ctxt,property,valueDeser)
JacksonDatabind-12_buggy
JacksonDatabind-12_fix
JacksonDatabind-16_buggy
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
JacksonDatabind-16_fix
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
JacksonDatabind-17_buggy
2#JavaType TRANSVAR0
JacksonDatabind-17_fix
2#JavaType TRANSVAR0
JacksonDatabind-19_buggy
2#Class<?> TRANSVAR0
5#TRANSVAR1=findTypeParameters(rawClass,Map.class)
JacksonDatabind-19_fix
2#Class<?> TRANSVAR0
8#TRANSVAR1=findTypeParameters(rawClass,Map.class)
JacksonDatabind-24_buggy
2#DateFormat TRANSVAR0
6#TRANSVAR1=(df == null) ? _timeZone : df.getTimeZone()
JacksonDatabind-24_fix
2#DateFormat TRANSVAR0
JacksonDatabind-27_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
JacksonDatabind-27_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
JacksonDatabind-28_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
JacksonDatabind-28_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
JacksonDatabind-33_buggy
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
JacksonDatabind-33_fix
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
JacksonDatabind-34_buggy
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
JacksonDatabind-34_fix
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
JacksonDatabind-35_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
21#TRANSVAR3=p.getText()
22#TRANSVAR4=_findDeserializer(ctxt,typeId)
28#TRANSVAR5=new TokenBuffer(null,false)
36#TRANSVAR6=deser.deserialize(p,ctxt)
JacksonDatabind-35_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
12#TRANSVAR3=p.getCurrentToken()
23#TRANSVAR4=p.getText()
24#TRANSVAR5=_findDeserializer(ctxt,typeId)
30#TRANSVAR6=new TokenBuffer(null,false)
38#TRANSVAR7=deser.deserialize(p,ctxt)
JacksonDatabind-37_buggy
2#Class<?> TRANSVAR0
JacksonDatabind-37_fix
2#Class<?> TRANSVAR0
JacksonDatabind-39_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
JacksonDatabind-39_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
8#TRANSVAR2=p.nextToken()
JacksonDatabind-42_buggy
JacksonDatabind-42_fix
JacksonDatabind-44_buggy
2#Class<?> TRANSVAR0
JacksonDatabind-44_fix
2#Class<?> TRANSVAR0
20#TRANSVAR1=subclass.getSuperclass()
26#TRANSVAR2=_narrow(next)
31#TRANSVAR3=subclass.getInterfaces()
32#Class<?> TRANSVAR4
38#TRANSVAR5=_narrow(iface)
JacksonDatabind-45_buggy
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
16#TRANSVAR4=format.getTimeZone()
17#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
20#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR7=new SimpleDateFormat(pattern,loc)
JacksonDatabind-45_fix
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
17#TRANSVAR4=format.getTimeZone()
18#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
21#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR7=new SimpleDateFormat(pattern,loc)
JacksonDatabind-46_buggy
2#StringBuilder TRANSVAR0
JacksonDatabind-46_fix
2#StringBuilder TRANSVAR0
JacksonDatabind-47_buggy
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
27#IllegalArgumentException TRANSVAR6
39#TRANSVAR7=type.getKeyType()
40#TRANSVAR8=findSerializationKeyType(a,keyType)
45#TRANSVAR9=keyType.getRawClass()
59#IllegalArgumentException TRANSVAR10
70#TRANSVAR11=type.getContentType()
73#TRANSVAR12=findSerializationContentType(a,contentType)
81#TRANSVAR13=contentType.getRawClass()
92#IllegalArgumentException TRANSVAR14
JacksonDatabind-47_fix
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
23#TRANSVAR6=type.getRawClass()
36#IllegalArgumentException TRANSVAR7
48#TRANSVAR8=type.getKeyType()
49#TRANSVAR9=findSerializationKeyType(a,keyType)
54#TRANSVAR10=keyType.getRawClass()
68#IllegalArgumentException TRANSVAR11
79#TRANSVAR12=type.getContentType()
82#TRANSVAR13=findSerializationContentType(a,contentType)
90#TRANSVAR14=contentType.getRawClass()
101#IllegalArgumentException TRANSVAR15
JacksonDatabind-49_buggy
2#Object TRANSVAR0
JacksonDatabind-49_fix
2#Object TRANSVAR0
JacksonDatabind-5_buggy
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
JacksonDatabind-5_fix
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
JacksonDatabind-51_buggy
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
JacksonDatabind-51_fix
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
JacksonDatabind-54_buggy
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-54_fix
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-57_buggy
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
JacksonDatabind-57_fix
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
JacksonDatabind-58_buggy
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
17#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
20#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
27#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
29#TRANSVAR8=type.getTypeHandler()
30#TRANSVAR9
42#TRANSVAR10=propDef.findReferenceType()
46#TRANSVAR11=propDef.findObjectIdInfo()
JacksonDatabind-58_fix
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
22#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
25#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
32#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
34#TRANSVAR8=type.getTypeHandler()
35#TRANSVAR9
47#TRANSVAR10=propDef.findReferenceType()
51#TRANSVAR11=propDef.findObjectIdInfo()
JacksonDatabind-6_buggy
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
51#TRANSVAR7=new StringBuilder(dateStr)
61#TRANSVAR8=new StringBuilder(dateStr)
63#TRANSVAR9=len - dateStr.lastIndexOf('T') - 1
JacksonDatabind-6_fix
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
49#TRANSVAR7=len - dateStr.lastIndexOf('T') - 6
51#TRANSVAR8=len - 5
52#TRANSVAR9=new StringBuilder(dateStr)
77#TRANSVAR10=new StringBuilder(dateStr)
79#TRANSVAR11=len - dateStr.lastIndexOf('T') - 1
JacksonDatabind-62_buggy
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
21#TRANSVAR4=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
24#TRANSVAR5=_valueDeserializer
28#TRANSVAR6=_collectionType.getContentType()
35#TRANSVAR7=_valueTypeDeserializer
JacksonDatabind-62_fix
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
17#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
29#TRANSVAR5=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
32#TRANSVAR6=_valueDeserializer
36#TRANSVAR7=_collectionType.getContentType()
43#TRANSVAR8=_valueTypeDeserializer
JacksonDatabind-64_buggy
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
113#TRANSVAR16=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
118#TRANSVAR17=_annotationIntrospector.findNullSerializer(am)
123#TRANSVAR18=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-64_fix
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
64#TRANSVAR16
77#Exception TRANSVAR17
118#TRANSVAR18=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
123#TRANSVAR19=_annotationIntrospector.findNullSerializer(am)
128#TRANSVAR20=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-67_buggy
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
27#BeanDeserializerModifier TRANSVAR6
JacksonDatabind-67_fix
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
28#BeanDeserializerModifier TRANSVAR6
JacksonDatabind-7_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
JacksonDatabind-7_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
12#TRANSVAR2
JacksonDatabind-70_buggy
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
JacksonDatabind-70_fix
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
JacksonDatabind-71_buggy
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
JacksonDatabind-71_fix
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
JacksonDatabind-74_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
JacksonDatabind-74_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
26#TRANSVAR5=p.getText().trim()
JacksonDatabind-76_buggy
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
21#TRANSVAR8
24#Exception TRANSVAR9
47#TRANSVAR10=_beanProperties.find(propName)
65#TRANSVAR11
69#Exception TRANSVAR12
JacksonDatabind-76_fix
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
27#TRANSVAR8=_beanProperties.find(propName)
45#TRANSVAR9
49#Exception TRANSVAR10
JacksonDatabind-8_buggy
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
JacksonDatabind-8_fix
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
9#TRANSVAR5
26#TRANSVAR6=oldOne.getRawParameterType(0)
27#TRANSVAR7=newOne.getRawParameterType(0)
JacksonDatabind-82_buggy
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
JacksonDatabind-82_fix
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
JacksonDatabind-83_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
19#IllegalArgumentException TRANSVAR4
21#MalformedURLException TRANSVAR5
24#TRANSVAR6="not a valid textual representation"
26#TRANSVAR7=cause.getMessage()
32#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
39#TRANSVAR9=p.getCurrentToken()
46#TRANSVAR10=p.getEmbeddedObject()
JacksonDatabind-83_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
17#IllegalArgumentException TRANSVAR4
19#MalformedURLException TRANSVAR5
22#TRANSVAR6="not a valid textual representation"
24#TRANSVAR7=cause.getMessage()
30#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
37#TRANSVAR9=p.getCurrentToken()
44#TRANSVAR10=p.getEmbeddedObject()
JacksonDatabind-85_buggy
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
22#TRANSVAR4=format.getTimeZone()
23#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
26#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
29#TRANSVAR7=new SimpleDateFormat(pattern,loc)
JacksonDatabind-85_fix
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
21#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
25#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
32#TRANSVAR7=format.hasLocale()
33#TRANSVAR8=format.hasTimeZone()
34#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
40#TRANSVAR10=serializers.getConfig().getDateFormat()
43#TRANSVAR11=(StdDateFormat)df0
62#TRANSVAR12=(SimpleDateFormat)df0
69#TRANSVAR13=format.getTimeZone()
70#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
JacksonDatabind-88_buggy
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
18#TRANSVAR4
21#ClassNotFoundException TRANSVAR5
25#TRANSVAR6=(DeserializationContext)ctxt
31#Exception TRANSVAR7
JacksonDatabind-88_fix
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
22#TRANSVAR4
25#ClassNotFoundException TRANSVAR5
29#TRANSVAR6=(DeserializationContext)ctxt
35#Exception TRANSVAR7
JacksonDatabind-9_buggy
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
JacksonDatabind-9_fix
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4=value.getClass()
JacksonDatabind-91_buggy
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
JacksonDatabind-91_fix
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
13#TRANSVAR2=t.getKeyType()
JacksonDatabind-93_buggy
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
JacksonDatabind-93_fix
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
JacksonDatabind-96_buggy
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
JacksonDatabind-96_fix
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
JacksonDatabind-97_buggy
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
JacksonDatabind-97_fix
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
JacksonDatabind-98_buggy
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
49#TRANSVAR12=creator.build(ctxt,buffer)
51#TRANSVAR13=0
52#TRANSVAR14=_properties[i].getProperty()
JacksonDatabind-98_fix
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
45#TRANSVAR12
49#TRANSVAR13=new TokenBuffer(p,ctxt)
58#TRANSVAR14=creator.build(ctxt,buffer)
60#TRANSVAR15=0
61#TRANSVAR16=_properties[i].getProperty()
JacksonDatabind-99_buggy
4#TRANSVAR0=new StringBuilder()
JacksonDatabind-99_fix
4#TRANSVAR0=new StringBuilder()
JacksonXml-1_buggy
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
JacksonXml-1_fix
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
JacksonXml-3_buggy
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
JacksonXml-3_fix
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
JacksonXml-4_buggy
2#JsonGenerator TRANSVAR0
JacksonXml-4_fix
2#JsonGenerator TRANSVAR0
6#TRANSVAR1=_rootNameFromConfig()
JacksonXml-5_buggy
2#XmlSerializerProvider TRANSVAR0
JacksonXml-5_fix
2#XmlSerializerProvider TRANSVAR0
Jsoup-1_buggy
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
Jsoup-1_fix
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
Jsoup-10_buggy
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
19#TRANSVAR5=new URL(base,relUrl)
21#MalformedURLException TRANSVAR6
Jsoup-10_fix
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
21#TRANSVAR5=new URL(base,relUrl)
23#MalformedURLException TRANSVAR6
Jsoup-13_buggy
2#String TRANSVAR0
Jsoup-13_fix
2#String TRANSVAR0
6#TRANSVAR1=attributeKey.substring("abs:".length())
Jsoup-15_buggy
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
Jsoup-15_fix
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
Jsoup-19_buggy
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
9#Protocol TRANSVAR4
10#TRANSVAR5=protocol.toString() + ":"
Jsoup-19_fix
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
11#Protocol TRANSVAR4
12#TRANSVAR5=protocol.toString() + ":"
Jsoup-2_buggy
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
35#TRANSVAR7
45#TRANSVAR8=child.absUrl("href")
Jsoup-2_fix
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
36#TRANSVAR7
46#TRANSVAR8=child.absUrl("href")
Jsoup-20_buggy
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
Jsoup-20_fix
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
Jsoup-24_buggy
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
12#TRANSVAR3=r.consume()
Jsoup-24_fix
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
11#TRANSVAR3=r.consume()
Jsoup-26_buggy
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
Jsoup-26_fix
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
Jsoup-27_buggy
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
Jsoup-27_fix
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
Jsoup-32_buggy
3#TRANSVAR0=(Element)super.clone()
Jsoup-32_fix
3#TRANSVAR0=(Element)super.clone()
Jsoup-33_buggy
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
12#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
Jsoup-33_fix
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
13#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
Jsoup-34_buggy
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
Jsoup-34_fix
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
Jsoup-35_buggy
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
481#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
482#Node TRANSVAR45
Jsoup-35_fix
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
482#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
483#Node TRANSVAR45
Jsoup-37_buggy
3#TRANSVAR0=new StringBuilder()
Jsoup-37_fix
3#TRANSVAR0=new StringBuilder()
Jsoup-38_buggy
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
220#TRANSVAR23=tb.getFormElement()
226#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
233#TRANSVAR25=new Attributes()
234#Attribute TRANSVAR26
268#TRANSVAR27=tb.state()
307#TRANSVAR28=t.asEndTag()
318#TRANSVAR29=tb.process(new Token.EndTag("body"))
333#TRANSVAR30=tb.getFormElement()
392#TRANSVAR31=0
393#TRANSVAR32=tb.getActiveFormattingElement(name)
406#TRANSVAR33=null
407#TRANSVAR34=null
408#TRANSVAR35=false
409#TRANSVAR36=tb.getStack()
412#TRANSVAR37=stack.size()
413#TRANSVAR38=0
414#TRANSVAR39=stack.get(si)
431#TRANSVAR40=furthestBlock
432#TRANSVAR41=furthestBlock
434#TRANSVAR42=0
443#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
469#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
471#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
472#Node TRANSVAR46
Jsoup-38_fix
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
223#TRANSVAR23=tb.getFormElement()
229#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
236#TRANSVAR25=new Attributes()
237#Attribute TRANSVAR26
271#TRANSVAR27=tb.state()
310#TRANSVAR28=t.asEndTag()
321#TRANSVAR29=tb.process(new Token.EndTag("body"))
336#TRANSVAR30=tb.getFormElement()
395#TRANSVAR31=0
396#TRANSVAR32=tb.getActiveFormattingElement(name)
409#TRANSVAR33=null
410#TRANSVAR34=null
411#TRANSVAR35=false
412#TRANSVAR36=tb.getStack()
415#TRANSVAR37=stack.size()
416#TRANSVAR38=0
417#TRANSVAR39=stack.get(si)
434#TRANSVAR40=furthestBlock
435#TRANSVAR41=furthestBlock
437#TRANSVAR42=0
446#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
472#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
474#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
475#Node TRANSVAR46
Jsoup-39_buggy
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
Jsoup-39_fix
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
Jsoup-40_buggy
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
Jsoup-40_fix
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
Jsoup-41_buggy
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
Jsoup-41_fix
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
Jsoup-42_buggy
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
8#TRANSVAR2=el.attr("name")
10#TRANSVAR3=el.attr("type")
13#TRANSVAR4=el.select("option[selected]")
14#TRANSVAR5=false
15#Element TRANSVAR6
20#TRANSVAR7=el.select("option").first()
27#TRANSVAR8=el.val()
Jsoup-42_fix
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
14#TRANSVAR4=el.select("option[selected]")
15#TRANSVAR5=false
16#Element TRANSVAR6
21#TRANSVAR7=el.select("option").first()
28#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
Jsoup-43_buggy
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
Jsoup-43_fix
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
Jsoup-45_buggy
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
Jsoup-45_fix
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
Jsoup-46_buggy
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
Jsoup-46_fix
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
Jsoup-47_buggy
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
Jsoup-47_fix
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
Jsoup-48_buggy
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
Jsoup-48_fix
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
25#TRANSVAR8=new StringBuilder()
26#TRANSVAR9=0
27#TRANSVAR10=values.get(i)
Jsoup-49_buggy
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
Jsoup-49_fix
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
Jsoup-5_buggy
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
Jsoup-5_fix
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
Jsoup-50_buggy
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
12#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
14#TRANSVAR7=null
23#IllegalCharsetNameException TRANSVAR8
Jsoup-50_fix
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
8#TRANSVAR6=new byte[4]
26#TRANSVAR7=doc.select("meta[http-equiv=content-type], meta[charset]").first()
28#TRANSVAR8=null
37#IllegalCharsetNameException TRANSVAR9
Jsoup-51_buggy
5#TRANSVAR0=input[pos]
Jsoup-51_fix
5#TRANSVAR0=input[pos]
Jsoup-53_buggy
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
10#TRANSVAR6=consume()
Jsoup-53_fix
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
7#TRANSVAR6=false
11#TRANSVAR7=consume()
Jsoup-54_buggy
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
Jsoup-54_fix
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
Jsoup-55_buggy
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
Jsoup-55_fix
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
Jsoup-57_buggy
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
Jsoup-57_fix
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
Jsoup-59_buggy
9#TRANSVAR0
Jsoup-59_fix
10#TRANSVAR0
Jsoup-6_buggy
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
Jsoup-6_fix
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
Jsoup-61_buggy
2#String TRANSVAR0
3#TRANSVAR1=attributes.get("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
Jsoup-61_fix
2#String TRANSVAR0
3#TRANSVAR1=attributes.getIgnoreCase("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
Jsoup-62_buggy
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().normalName()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
Jsoup-62_fix
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().name()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
Jsoup-64_buggy
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
Jsoup-64_fix
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
Jsoup-68_buggy
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
8#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
11#TRANSVAR5=bottom
12#TRANSVAR6=stack.get(pos).nodeName()
Jsoup-68_fix
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
5#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
8#TRANSVAR5=bottom
9#TRANSVAR6=stack.get(pos).nodeName()
Jsoup-70_buggy
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
Jsoup-70_fix
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
6#TRANSVAR2=0
Jsoup-72_buggy
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
8#TRANSVAR4=0
9#TRANSVAR5=start
10#TRANSVAR6=0
15#TRANSVAR7=hash & stringCache.length - 1
16#TRANSVAR8=stringCache[index]
Jsoup-72_fix
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
10#TRANSVAR4=0
11#TRANSVAR5=start
12#TRANSVAR6=0
17#TRANSVAR7=hash & stringCache.length - 1
18#TRANSVAR8=stringCache[index]
Jsoup-75_buggy
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
Jsoup-75_fix
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
Jsoup-76_buggy
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
144#TRANSVAR17=tb.getStack()
145#TRANSVAR18=stack.size() - 1
146#TRANSVAR19=stack.get(i)
177#TRANSVAR20=tb.insert(startTag)
186#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
311#TRANSVAR28=t.asEndTag()
315#TRANSVAR29=0
316#TRANSVAR30=tb.getActiveFormattingElement(name)
329#TRANSVAR31=null
330#TRANSVAR32=null
331#TRANSVAR33=false
332#TRANSVAR34=tb.getStack()
335#TRANSVAR35=stack.size()
336#TRANSVAR36=0
337#TRANSVAR37=stack.get(si)
354#TRANSVAR38=furthestBlock
355#TRANSVAR39=furthestBlock
356#TRANSVAR40=0
365#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
392#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
394#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
395#Node TRANSVAR44
437#TRANSVAR45=tb.processEndTag("body")
441#TRANSVAR46=tb.getFormElement()
Jsoup-76_fix
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
145#TRANSVAR17=tb.getStack()
146#TRANSVAR18=stack.size() - 1
147#TRANSVAR19=stack.get(i)
178#TRANSVAR20=tb.insert(startTag)
187#TRANSVAR21=tb.insert(startTag)
203#TRANSVAR22=tb.insertEmpty(startTag)
227#TRANSVAR23=tb.getFormElement()
233#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR25=new Attributes()
241#Attribute TRANSVAR26
275#TRANSVAR27=tb.state()
312#TRANSVAR28=t.asEndTag()
316#TRANSVAR29=0
317#TRANSVAR30=tb.getActiveFormattingElement(name)
330#TRANSVAR31=null
331#TRANSVAR32=null
332#TRANSVAR33=false
333#TRANSVAR34=tb.getStack()
336#TRANSVAR35=stack.size()
337#TRANSVAR36=0
338#TRANSVAR37=stack.get(si)
355#TRANSVAR38=furthestBlock
356#TRANSVAR39=furthestBlock
357#TRANSVAR40=0
366#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
393#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
395#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
396#Node TRANSVAR44
438#TRANSVAR45=tb.processEndTag("body")
442#TRANSVAR46=tb.getFormElement()
Jsoup-77_buggy
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.name()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
Jsoup-77_fix
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.normalName()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
Jsoup-80_buggy
Chart-1_buggy
Chart-10_buggy
Chart-11_buggy
Chart-12_buggy
Chart-13_buggy
Chart-17_buggy
Chart-20_buggy
Chart-24_buggy
Chart-26_buggy
Chart-3_buggy
Chart-4_buggy
Chart-5_buggy
Chart-6_buggy
Chart-7_buggy
Chart-8_buggy
Chart-9_buggy
Cli-11_buggy
Cli-12_buggy
Cli-14_buggy
Cli-15_buggy
Cli-17_buggy
Cli-19_buggy
Cli-20_buggy
Cli-23_buggy
Cli-24_buggy
Cli-25_buggy
Cli-26_buggy
Cli-27_buggy
Cli-28_buggy
Cli-29_buggy
Cli-32_buggy
Cli-35_buggy
Cli-37_buggy
Cli-38_buggy
Cli-4_buggy
Cli-40_buggy
Cli-5_buggy
Cli-8_buggy
Cli-9_buggy
Closure-1_buggy
Closure-10_buggy
Closure-101_buggy
Closure-102_buggy
Closure-104_buggy
Closure-105_buggy
Closure-107_buggy
Closure-109_buggy
Closure-11_buggy
Closure-111_buggy
Closure-112_buggy
Closure-113_buggy
Closure-114_buggy
Closure-115_buggy
Closure-116_buggy
Closure-117_buggy
Closure-118_buggy
Closure-119_buggy
Closure-12_buggy
Closure-120_buggy
Closure-121_buggy
Closure-122_buggy
Closure-123_buggy
Closure-124_buggy
Closure-125_buggy
Closure-126_buggy
Closure-128_buggy
Closure-129_buggy
Closure-13_buggy
Closure-130_buggy
Closure-131_buggy
Closure-132_buggy
Closure-133_buggy
Closure-14_buggy
Closure-145_buggy
Closure-146_buggy
Closure-15_buggy
Closure-150_buggy
Closure-152_buggy
Closure-159_buggy
Closure-160_buggy
Closure-161_buggy
Closure-164_buggy
Closure-166_buggy
Closure-168_buggy
Closure-17_buggy
Closure-172_buggy
Closure-176_buggy
Closure-18_buggy
Closure-19_buggy
Closure-2_buggy
Closure-20_buggy
Closure-21_buggy
Closure-22_buggy
Closure-23_buggy
Closure-24_buggy
Closure-25_buggy
Closure-29_buggy
Closure-31_buggy
Closure-32_buggy
Closure-33_buggy
Closure-35_buggy
Closure-36_buggy
Closure-38_buggy
Closure-39_buggy
Closure-4_buggy
Closure-40_buggy
Closure-42_buggy
Closure-44_buggy
Closure-48_buggy
Closure-5_buggy
Closure-50_buggy
Closure-51_buggy
Closure-52_buggy
Closure-53_buggy
Closure-55_buggy
Closure-56_buggy
Closure-57_buggy
Closure-58_buggy
Closure-59_buggy
Closure-61_buggy
Closure-62_buggy
Closure-65_buggy
Closure-66_buggy
Closure-67_buggy
Closure-69_buggy
Closure-7_buggy
Closure-70_buggy
Closure-71_buggy
Closure-73_buggy
Closure-77_buggy
Closure-78_buggy
Closure-81_buggy
Closure-82_buggy
Closure-83_buggy
Closure-86_buggy
Closure-87_buggy
Closure-88_buggy
Closure-91_buggy
Closure-92_buggy
Closure-94_buggy
Closure-95_buggy
Closure-96_buggy
Closure-97_buggy
Closure-99_buggy
Codec-10_buggy
Codec-15_buggy
Codec-17_buggy
Codec-18_buggy
Codec-2_buggy
Codec-3_buggy
Codec-4_buggy
Codec-5_buggy
Codec-6_buggy
Codec-7_buggy
Codec-9_buggy
Collections-26_buggy
Compress-1_buggy
Compress-10_buggy
Compress-11_buggy
Compress-12_buggy
Compress-13_buggy
Compress-14_buggy
Compress-15_buggy
Compress-16_buggy
Compress-17_buggy
Compress-18_buggy
Compress-19_buggy
Compress-21_buggy
Compress-23_buggy
Compress-24_buggy
Compress-25_buggy
Compress-26_buggy
Compress-27_buggy
Compress-28_buggy
Compress-30_buggy
Compress-31_buggy
Compress-32_buggy
Compress-35_buggy
Compress-36_buggy
Compress-37_buggy
Compress-38_buggy
Compress-40_buggy
Compress-41_buggy
Compress-44_buggy
Compress-45_buggy
Compress-46_buggy
Compress-5_buggy
Compress-7_buggy
Compress-8_buggy
Csv-1_buggy
Csv-10_buggy
Csv-11_buggy
Csv-14_buggy
Csv-15_buggy
Csv-2_buggy
Csv-3_buggy
Csv-4_buggy
Csv-5_buggy
Csv-6_buggy
Csv-9_buggy
Gson-11_buggy
Gson-12_buggy
Gson-13_buggy
Gson-15_buggy
Gson-16_buggy
Gson-17_buggy
Gson-18_buggy
Gson-5_buggy
Gson-6_buggy
JacksonCore-11_buggy
JacksonCore-15_buggy
JacksonCore-20_buggy
JacksonCore-21_buggy
JacksonCore-23_buggy
JacksonCore-25_buggy
JacksonCore-26_buggy
JacksonCore-3_buggy
JacksonCore-4_buggy
JacksonCore-5_buggy
JacksonCore-6_buggy
JacksonCore-7_buggy
JacksonCore-8_buggy
JacksonDatabind-1_buggy
JacksonDatabind-100_buggy
JacksonDatabind-101_buggy
JacksonDatabind-102_buggy
JacksonDatabind-107_buggy
JacksonDatabind-11_buggy
JacksonDatabind-112_buggy
JacksonDatabind-12_buggy
JacksonDatabind-16_buggy
JacksonDatabind-17_buggy
JacksonDatabind-19_buggy
JacksonDatabind-24_buggy
JacksonDatabind-27_buggy
JacksonDatabind-28_buggy
JacksonDatabind-33_buggy
JacksonDatabind-34_buggy
JacksonDatabind-35_buggy
JacksonDatabind-37_buggy
JacksonDatabind-39_buggy
JacksonDatabind-42_buggy
JacksonDatabind-44_buggy
JacksonDatabind-45_buggy
JacksonDatabind-46_buggy
JacksonDatabind-47_buggy
JacksonDatabind-49_buggy
JacksonDatabind-5_buggy
JacksonDatabind-51_buggy
JacksonDatabind-54_buggy
JacksonDatabind-57_buggy
JacksonDatabind-58_buggy
JacksonDatabind-6_buggy
JacksonDatabind-62_buggy
JacksonDatabind-64_buggy
JacksonDatabind-67_buggy
JacksonDatabind-7_buggy
JacksonDatabind-70_buggy
JacksonDatabind-71_buggy
JacksonDatabind-74_buggy
JacksonDatabind-76_buggy
JacksonDatabind-8_buggy
JacksonDatabind-82_buggy
JacksonDatabind-83_buggy
JacksonDatabind-85_buggy
JacksonDatabind-88_buggy
JacksonDatabind-9_buggy
JacksonDatabind-91_buggy
JacksonDatabind-93_buggy
JacksonDatabind-96_buggy
JacksonDatabind-97_buggy
JacksonDatabind-98_buggy
JacksonDatabind-99_buggy
JacksonXml-1_buggy
JacksonXml-3_buggy
JacksonXml-4_buggy
JacksonXml-5_buggy
Jsoup-1_buggy
Jsoup-10_buggy
Jsoup-13_buggy
Jsoup-15_buggy
Jsoup-19_buggy
Jsoup-2_buggy
Jsoup-20_buggy
Jsoup-24_buggy
Jsoup-26_buggy
Jsoup-27_buggy
Jsoup-32_buggy
Jsoup-33_buggy
Jsoup-34_buggy
Jsoup-35_buggy
Jsoup-37_buggy
Jsoup-38_buggy
Jsoup-39_buggy
Jsoup-40_buggy
Jsoup-41_buggy
Jsoup-42_buggy
Jsoup-43_buggy
Jsoup-45_buggy
Jsoup-46_buggy
Jsoup-47_buggy
Jsoup-48_buggy
Jsoup-49_buggy
Jsoup-5_buggy
Jsoup-50_buggy
Jsoup-51_buggy
Jsoup-53_buggy
Jsoup-54_buggy
Jsoup-55_buggy
Jsoup-57_buggy
Jsoup-59_buggy
Jsoup-6_buggy
Jsoup-61_buggy
Jsoup-62_buggy
Jsoup-64_buggy
Jsoup-68_buggy
Jsoup-70_buggy
Jsoup-72_buggy
Jsoup-75_buggy
Jsoup-76_buggy
Jsoup-77_buggy
Jsoup-80_buggy
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
10#TRANSVAR5=doc.child(0)
Jsoup-80_fix
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
11#TRANSVAR5=doc.child(0)
Jsoup-82_buggy
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
Jsoup-82_fix
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
Jsoup-84_buggy
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=doc.createElementNS(namespace,tagName)
21#TRANSVAR7=(org.jsoup.nodes.TextNode)source
22#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
25#TRANSVAR9=(org.jsoup.nodes.Comment)source
26#TRANSVAR10=doc.createComment(sourceComment.getData())
29#TRANSVAR11=(org.jsoup.nodes.DataNode)source
30#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
Jsoup-84_fix
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=namespace == null && tagName.contains(":") ? doc.createElementNS("",tagName) : doc.createElementNS(namespace,tagName)
22#TRANSVAR7=(org.jsoup.nodes.TextNode)source
23#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
26#TRANSVAR9=(org.jsoup.nodes.Comment)source
27#TRANSVAR10=doc.createComment(sourceComment.getData())
30#TRANSVAR11=(org.jsoup.nodes.DataNode)source
31#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
Jsoup-85_buggy
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
Jsoup-85_fix
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
Jsoup-86_buggy
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
Jsoup-86_fix
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
Jsoup-88_buggy
Jsoup-88_fix
Jsoup-89_buggy
2#String TRANSVAR0
3#TRANSVAR1=parent.get(this.key)
5#TRANSVAR2=parent.indexOfKey(this.key)
Jsoup-89_fix
2#String TRANSVAR0
3#TRANSVAR1=this.val
6#TRANSVAR2=parent.indexOfKey(this.key)
Jsoup-90_buggy
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
Jsoup-90_fix
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
Jsoup-93_buggy
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
15#TRANSVAR4=el.select("option[selected]")
16#TRANSVAR5=false
17#Element TRANSVAR6
22#TRANSVAR7=el.select("option").first()
29#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
Jsoup-93_fix
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
16#TRANSVAR4=el.select("option[selected]")
17#TRANSVAR5=false
18#Element TRANSVAR6
23#TRANSVAR7=el.select("option").first()
30#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
JxPath-10_buggy
2#EvalContext TRANSVAR0
JxPath-10_fix
2#EvalContext TRANSVAR0
JxPath-12_buggy
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
28#TRANSVAR8=node.getNodeType()
45#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
46#TRANSVAR10=((ProcessingInstruction)node).getTarget()
JxPath-12_fix
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
29#TRANSVAR8=node.getNodeType()
46#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
47#TRANSVAR10=((ProcessingInstruction)node).getTarget()
JxPath-21_buggy
JxPath-21_fix
3#TRANSVAR0=getBaseValue()
JxPath-22_buggy
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
JxPath-22_fix
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
JxPath-5_buggy
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
29#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
JxPath-5_fix
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
27#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
JxPath-6_buggy
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
JxPath-6_fix
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
JxPath-8_buggy
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
22#TRANSVAR3=InfoSetUtil.doubleValue(right)
JxPath-8_fix
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
25#TRANSVAR3=InfoSetUtil.doubleValue(right)
Lang-1_buggy
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
Lang-1_fix
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=0
20#TRANSVAR5=pfxLen
28#TRANSVAR6=str.length() - pfxLen
37#TRANSVAR7=str.charAt(str.length() - 1)
38#TRANSVAR8
39#TRANSVAR9
40#TRANSVAR10
41#TRANSVAR11=str.indexOf('.')
42#TRANSVAR12=str.indexOf('e') + str.indexOf('E') + 1
46#TRANSVAR13=0
77#TRANSVAR14=str.substring(0,str.length() - 1)
78#TRANSVAR15=isAllZeros(mant) && isAllZeros(exp)
87#final NumberFormatException TRANSVAR16
97#TRANSVAR17=NumberUtils.createFloat(numeric)
104#final NumberFormatException TRANSVAR18
111#TRANSVAR19=NumberUtils.createDouble(numeric)
115#final NumberFormatException TRANSVAR20
120#final NumberFormatException TRANSVAR21
140#final NumberFormatException TRANSVAR22
145#final NumberFormatException TRANSVAR23
152#TRANSVAR24=isAllZeros(mant) && isAllZeros(exp)
155#TRANSVAR25=createFloat(str)
160#final NumberFormatException TRANSVAR26
165#TRANSVAR27=createDouble(str)
170#final NumberFormatException TRANSVAR28
Lang-10_buggy
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=false
4#TRANSVAR4=0
5#TRANSVAR5=value.charAt(i)
Lang-10_fix
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=value.charAt(i)
Lang-11_buggy
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
Lang-11_fix
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
30#TRANSVAR7=new char[count]
31#TRANSVAR8=end - start
34#TRANSVAR9
Lang-12_buggy
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
19#TRANSVAR7=new char[count]
20#TRANSVAR8=end - start
23#TRANSVAR9
Lang-12_fix
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
Lang-14_buggy
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
Lang-14_fix
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
Lang-16_buggy
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
Lang-16_fix
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
Lang-17_buggy
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=Character.codePointCount(input,0,input.length())
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
20#TRANSVAR6=0
Lang-17_fix
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
Lang-18_buggy
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
Lang-18_fix
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
Lang-19_buggy
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
17#TRANSVAR7=start
24#TRANSVAR8
31#NumberFormatException TRANSVAR9
37#TRANSVAR10=Character.toChars(entityValue)
Lang-19_fix
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
20#TRANSVAR7=start
29#TRANSVAR8
36#NumberFormatException TRANSVAR9
42#TRANSVAR10=Character.toChars(entityValue)
49#TRANSVAR11=(end != seqEnd) && (input.charAt(end) == ';')
Lang-21_buggy
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
Lang-21_fix
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
Lang-22_buggy
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
24#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
Lang-22_fix
2#int TRANSVAR0
2#int TRANSVAR1
21#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
Lang-24_buggy
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
Lang-24_fix
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
Lang-26_buggy
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone)
Lang-26_fix
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone,mLocale)
Lang-27_buggy
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
Lang-27_fix
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
Lang-28_buggy
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
Lang-28_fix
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
31#TRANSVAR9=Character.toChars(entityValue)
Lang-29_buggy
2#String TRANSVAR0
Lang-29_fix
2#String TRANSVAR0
Lang-3_buggy
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
145#TRANSVAR23=createFloat(str)
149#final NumberFormatException TRANSVAR24
153#TRANSVAR25=createDouble(str)
157#final NumberFormatException TRANSVAR26
Lang-3_fix
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
Lang-31_buggy
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=0
9#TRANSVAR5=cs.charAt(i)
10#TRANSVAR6=0
Lang-31_fix
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=csLength - 1
9#TRANSVAR5=searchLength - 1
10#TRANSVAR6=0
11#TRANSVAR7=cs.charAt(i)
12#TRANSVAR8=0
Lang-33_buggy
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
Lang-33_fix
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
Lang-37_buggy
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
Lang-37_fix
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
13#ArrayStoreException TRANSVAR4
15#TRANSVAR5=array2.getClass().getComponentType()
Lang-38_buggy
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
Lang-38_fix
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
Lang-39_buggy
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
73#TRANSVAR15=replacementList[i].length() - searchList[i].length()
81#TRANSVAR16=new StringBuilder(text.length() + increase)
85#TRANSVAR17=start
97#TRANSVAR18=0
118#TRANSVAR19=text.length()
119#TRANSVAR20=start
122#TRANSVAR21=buf.toString()
Lang-39_fix
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
76#TRANSVAR15=replacementList[i].length() - searchList[i].length()
84#TRANSVAR16=new StringBuilder(text.length() + increase)
88#TRANSVAR17=start
100#TRANSVAR18=0
121#TRANSVAR19=text.length()
122#TRANSVAR20=start
125#TRANSVAR21=buf.toString()
Lang-40_buggy
2#String TRANSVAR0
2#String TRANSVAR1
Lang-40_fix
2#String TRANSVAR0
2#String TRANSVAR1
6#TRANSVAR2=searchStr.length()
7#TRANSVAR3=str.length() - len
8#TRANSVAR4=0
Lang-42_buggy
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=str.charAt(i)
6#TRANSVAR5=this.entityName(c)
Lang-42_fix
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=Character.codePointAt(str,i)
6#TRANSVAR5=this.entityName(c)
Lang-43_buggy
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
9#TRANSVAR6=start
10#TRANSVAR7=pos.getIndex()
Lang-43_fix
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
10#TRANSVAR6=start
11#TRANSVAR7=pos.getIndex()
Lang-44_buggy
2#String TRANSVAR0
19#TRANSVAR1=val.charAt(val.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=val.indexOf('.')
24#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
52#TRANSVAR7=val.substring(0,val.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(val)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(val)
141#NumberFormatException TRANSVAR21
Lang-44_fix
2#String TRANSVAR0
22#TRANSVAR1=val.charAt(val.length() - 1)
23#TRANSVAR2
24#TRANSVAR3
25#TRANSVAR4
26#TRANSVAR5=val.indexOf('.')
27#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
55#TRANSVAR7=val.substring(0,val.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(val)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(val)
144#NumberFormatException TRANSVAR21
Lang-45_buggy
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
23#TRANSVAR4=new StringBuffer()
24#TRANSVAR5=StringUtils.indexOf(str," ",lower)
Lang-45_fix
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
26#TRANSVAR4=new StringBuffer()
27#TRANSVAR5=StringUtils.indexOf(str," ",lower)
Lang-48_buggy
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
Lang-48_fix
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
Lang-49_buggy
3#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
Lang-49_fix
6#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
Lang-5_buggy
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
24#TRANSVAR4=str.charAt(3)
28#TRANSVAR5=str.charAt(4)
Lang-5_fix
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
15#TRANSVAR3=str.charAt(1)
16#TRANSVAR4=str.charAt(2)
31#TRANSVAR5=str.charAt(1)
44#TRANSVAR6=str.charAt(3)
48#TRANSVAR7=str.charAt(4)
Lang-51_buggy
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
37#TRANSVAR4=str.charAt(0)
Lang-51_fix
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
38#TRANSVAR4=str.charAt(0)
Lang-52_buggy
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
Lang-52_fix
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
Lang-53_buggy
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
Lang-53_fix
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
Lang-54_buggy
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
22#TRANSVAR5=str.charAt(4)
Lang-54_fix
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
25#TRANSVAR5=str.charAt(4)
Lang-55_buggy
Lang-55_fix
Lang-57_buggy
2#Locale TRANSVAR0
Lang-57_fix
2#Locale TRANSVAR0
Lang-58_buggy
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
63#NumberFormatException TRANSVAR9
73#TRANSVAR10=NumberUtils.createFloat(numeric)
80#NumberFormatException TRANSVAR11
87#TRANSVAR12=NumberUtils.createDouble(numeric)
91#NumberFormatException TRANSVAR13
96#NumberFormatException TRANSVAR14
116#NumberFormatException TRANSVAR15
121#NumberFormatException TRANSVAR16
128#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
130#TRANSVAR18=createFloat(str)
134#NumberFormatException TRANSVAR19
138#TRANSVAR20=createDouble(str)
142#NumberFormatException TRANSVAR21
Lang-58_fix
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
Lang-59_buggy
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
Lang-59_fix
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
Lang-6_buggy
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
Lang-6_fix
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
Lang-61_buggy
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=thisBuf.length - strLen
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
Lang-61_fix
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=size - strLen + 1
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
Lang-65_buggy
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
24#TRANSVAR3=false
25#TRANSVAR4=0
26#TRANSVAR5=0
50#TRANSVAR6=0
51#TRANSVAR7=false
84#TRANSVAR8=val.getActualMinimum(fields[i][0])
85#TRANSVAR9=val.getActualMaximum(fields[i][0])
Lang-65_fix
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
Lang-9_buggy
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
Lang-9_fix
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
Math-10_buggy
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
Math-10_fix
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
Math-101_buggy
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
Math-101_fix
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
Math-102_buggy
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0.0d
13#TRANSVAR3=0.0d
14#TRANSVAR4=0
Math-102_fix
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0d
13#TRANSVAR3=0d
14#TRANSVAR4=0
18#TRANSVAR5=1.0d
19#TRANSVAR6=false
24#TRANSVAR7=0.0d
25#TRANSVAR8=0.0d
26#TRANSVAR9=0
Math-103_buggy
2#double TRANSVAR0
Math-103_fix
2#double TRANSVAR0
6#MaxIterationsExceededException TRANSVAR1
Math-105_buggy
Math-105_fix
Math-106_buggy
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
40#TRANSVAR6=pos.getIndex()
41#TRANSVAR7=parseNextCharacter(source,pos)
63#TRANSVAR8=getDenominatorFormat().parse(source,pos)
74#TRANSVAR9=whole.intValue()
75#TRANSVAR10=num.intValue()
76#TRANSVAR11=den.intValue()
Math-106_fix
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
44#TRANSVAR6=pos.getIndex()
45#TRANSVAR7=parseNextCharacter(source,pos)
67#TRANSVAR8=getDenominatorFormat().parse(source,pos)
82#TRANSVAR9=whole.intValue()
83#TRANSVAR10=num.intValue()
84#TRANSVAR11=den.intValue()
Math-11_buggy
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
Math-11_fix
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
Math-13_buggy
2#RealMatrix TRANSVAR0
3#TRANSVAR1=new EigenDecomposition(m)
Math-13_fix
2#RealMatrix TRANSVAR0
4#TRANSVAR1=m.getRowDimension()
5#TRANSVAR2=new DiagonalMatrix(dim)
6#TRANSVAR3=0
11#TRANSVAR4=new EigenDecomposition(m)
Math-17_buggy
2#final int TRANSVAR0
Math-17_fix
2#final int TRANSVAR0
Math-19_buggy
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
48#TRANSVAR7=0
Math-19_fix
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
38#TRANSVAR7=0
40#TRANSVAR8=Double.MAX_VALUE + boundaries[0][i]
41#TRANSVAR9=new NumberIsTooLargeException(boundaries[1][i],max,true)
61#TRANSVAR10=0
Math-2_buggy
Math-2_fix
Math-20_buggy
2#final double[] TRANSVAR0
Math-20_fix
2#final double[] TRANSVAR0
Math-21_buggy
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=new int[order]
11#TRANSVAR7=0
15#TRANSVAR8=0
16#TRANSVAR9=true
20#TRANSVAR10=r + 1
21#TRANSVAR11=index[i]
22#TRANSVAR12=index[swap[i]]
31#TRANSVAR13=index[r]
37#TRANSVAR14=index[r]
45#TRANSVAR15=r
61#TRANSVAR16=FastMath.sqrt(c[ir][ir])
63#TRANSVAR17=1 / sqrt
64#TRANSVAR18=r + 1
65#TRANSVAR19=index[i]
66#TRANSVAR20=inverse * c[ii][ir]
69#TRANSVAR21=r + 1
70#TRANSVAR22=index[j]
71#TRANSVAR23=c[ii][ij] - e * b[j][r]
85#TRANSVAR24=0
86#TRANSVAR25=0
Math-21_fix
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=0
14#TRANSVAR7=0
15#TRANSVAR8=true
18#TRANSVAR9=r
19#TRANSVAR10=r + 1
20#TRANSVAR11=index[i]
21#TRANSVAR12=index[swapR]
30#TRANSVAR13=index[r]
33#TRANSVAR14=b[r]
39#TRANSVAR15=index[r]
47#TRANSVAR16=r
63#TRANSVAR17=FastMath.sqrt(c[ir][ir])
65#TRANSVAR18=1 / sqrt
66#TRANSVAR19=1 / c[ir][ir]
67#TRANSVAR20=r + 1
68#TRANSVAR21=index[i]
69#TRANSVAR22=inverse * c[ii][ir]
72#TRANSVAR23=r + 1
73#TRANSVAR24=index[j]
74#TRANSVAR25=c[ii][ij] - e * b[j][r]
88#TRANSVAR26=0
89#TRANSVAR27=0
Math-23_buggy
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
39#TRANSVAR17=0
41#TRANSVAR18=0.5 * (a + b)
42#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
43#TRANSVAR20=2 * tol1
46#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
48#TRANSVAR22=0
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
113#TRANSVAR26=computeObjectiveValue(u)
Math-23_fix
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=current
40#TRANSVAR18=0
42#TRANSVAR19=0.5 * (a + b)
43#TRANSVAR20=relativeThreshold * FastMath.abs(x) + absoluteThreshold
44#TRANSVAR21=2 * tol1
47#TRANSVAR22=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
52#TRANSVAR26=0
114#TRANSVAR27=computeObjectiveValue(u)
Math-24_buggy
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
Math-24_fix
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
Math-25_buggy
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
Math-25_fix
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
Math-26_buggy
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
Math-26_fix
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
Math-27_buggy
Math-27_fix
Math-28_buggy
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
31#Integer TRANSVAR9
32#TRANSVAR10=0
33#TRANSVAR11=i + tableau.getArtificialVariableOffset()
34#TRANSVAR12=tableau.getEntry(row,column)
50#TRANSVAR13=null
51#TRANSVAR14=tableau.getWidth()
52#Integer TRANSVAR15
53#TRANSVAR16=tableau.getNumObjectiveFunctions()
Math-28_fix
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
32#Integer TRANSVAR9
33#TRANSVAR10=0
34#TRANSVAR11=i + tableau.getArtificialVariableOffset()
35#TRANSVAR12=tableau.getEntry(row,column)
53#TRANSVAR13=null
54#TRANSVAR14=tableau.getWidth()
55#Integer TRANSVAR15
56#TRANSVAR16=tableau.getNumObjectiveFunctions()
Math-3_buggy
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
11#TRANSVAR3=new double[len]
12#TRANSVAR4=0
14#TRANSVAR5=0
15#TRANSVAR6=a[i]
16#TRANSVAR7=SPLIT_FACTOR * ai
17#TRANSVAR8=ca - (ca - ai)
18#TRANSVAR9=ai - aHigh
20#TRANSVAR10=b[i]
21#TRANSVAR11=SPLIT_FACTOR * bi
22#TRANSVAR12=cb - (cb - bi)
23#TRANSVAR13=bi - bHigh
25#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
33#TRANSVAR15=prodHigh[0]
34#TRANSVAR16=prodHigh[1]
35#TRANSVAR17=prodHighCur + prodHighNext
36#TRANSVAR18=sHighPrev - prodHighNext
37#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
39#TRANSVAR20=len - 1
40#TRANSVAR21=1
42#TRANSVAR22=sHighPrev + prodHighNext
48#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
54#TRANSVAR24=0
Math-3_fix
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
14#TRANSVAR3=new double[len]
15#TRANSVAR4=0
17#TRANSVAR5=0
18#TRANSVAR6=a[i]
19#TRANSVAR7=SPLIT_FACTOR * ai
20#TRANSVAR8=ca - (ca - ai)
21#TRANSVAR9=ai - aHigh
23#TRANSVAR10=b[i]
24#TRANSVAR11=SPLIT_FACTOR * bi
25#TRANSVAR12=cb - (cb - bi)
26#TRANSVAR13=bi - bHigh
28#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
36#TRANSVAR15=prodHigh[0]
37#TRANSVAR16=prodHigh[1]
38#TRANSVAR17=prodHighCur + prodHighNext
39#TRANSVAR18=sHighPrev - prodHighNext
40#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
42#TRANSVAR20=len - 1
43#TRANSVAR21=1
45#TRANSVAR22=sHighPrev + prodHighNext
51#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
57#TRANSVAR24=0
Math-30_buggy
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
Math-30_fix
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
Math-31_buggy
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=1.0
14#TRANSVAR8=1.0
15#TRANSVAR9=hPrev
16#TRANSVAR10=hPrev
19#TRANSVAR11=getA(n,x)
20#TRANSVAR12=getB(n,x)
22#TRANSVAR13=a * hPrev + b * p0
23#TRANSVAR14=a * q1 + b * dPrev
25#TRANSVAR15=1d
26#TRANSVAR16=1d
27#TRANSVAR17=5
28#TRANSVAR18=FastMath.max(a,b)
32#TRANSVAR19=0
48#TRANSVAR20=cN / q2 / cPrev
Math-31_fix
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=hPrev
14#TRANSVAR8=hPrev
17#TRANSVAR9=getA(n,x)
18#TRANSVAR10=getB(n,x)
20#TRANSVAR11=a + b * dPrev
24#TRANSVAR12=a + b / cPrev
30#TRANSVAR13=cN * dN
Math-32_buggy
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
Math-32_fix
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
Math-33_buggy
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
Math-33_fix
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
Math-34_buggy
Math-34_fix
Math-38_buggy
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt
83#TRANSVAR28=jpt
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
Math-38_fix
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt - 1
83#TRANSVAR28=jpt - 1
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
Math-39_buggy
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
63#TRANSVAR16=1
65#TRANSVAR17=0
66#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
67#TRANSVAR19=1
78#TRANSVAR20=0
79#TRANSVAR21=b[0] * yDotK[0][j]
80#TRANSVAR22=1
90#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
116#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
118#TRANSVAR25=stepSize * factor
119#TRANSVAR26=stepStart + scaledH
120#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
123#TRANSVAR28=stepStart + hNew
124#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
Math-39_fix
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
72#TRANSVAR16=1
74#TRANSVAR17=0
75#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
76#TRANSVAR19=1
87#TRANSVAR20=0
88#TRANSVAR21=b[0] * yDotK[0][j]
89#TRANSVAR22=1
99#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
125#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
127#TRANSVAR25=stepSize * factor
128#TRANSVAR26=stepStart + scaledH
129#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
132#TRANSVAR28=stepStart + hNew
133#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
Math-40_buggy
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
104#TRANSVAR15
105#TRANSVAR16=0
106#TRANSVAR17=nbPoints
142#TRANSVAR18=computeObjectiveValue(nextX)
Math-40_fix
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
94#TRANSVAR15=agingA - MAXIMAL_AGING
95#TRANSVAR16=(1 << p) - 1
96#TRANSVAR17=p + 1
100#TRANSVAR18=agingB - MAXIMAL_AGING
101#TRANSVAR19=p + 1
102#TRANSVAR20=(1 << p) - 1
110#TRANSVAR21
111#TRANSVAR22=0
112#TRANSVAR23=nbPoints
148#TRANSVAR24=computeObjectiveValue(nextX)
Math-41_buggy
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=0
Math-41_fix
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=begin
Math-42_buggy
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
Math-42_fix
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
Math-43_buggy
2#double TRANSVAR0
Math-43_fix
2#double TRANSVAR0
Math-44_buggy
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
12#EventState TRANSVAR6
19#TRANSVAR7=interpolator.isForward() ? +1 : -1
20#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
23#EventState TRANSVAR9
23#EventState TRANSVAR10
29#final EventState TRANSVAR11
39#TRANSVAR12=occuringEvents.iterator()
40#TRANSVAR13=iterator.next()
44#TRANSVAR14=currentEvent.getEventTime()
50#TRANSVAR15=interpolator.getInterpolatedState()
55#final StepHandler TRANSVAR16
88#TRANSVAR17=interpolator.getInterpolatedState()
89#final EventState TRANSVAR18
96#StepHandler TRANSVAR19
Math-44_fix
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState()
54#final StepHandler TRANSVAR16
61#final EventState TRANSVAR17
73#final EventState TRANSVAR18
93#TRANSVAR19=interpolator.getInterpolatedState()
94#final EventState TRANSVAR20
101#StepHandler TRANSVAR21
Math-45_buggy
2#int TRANSVAR0
2#int TRANSVAR1
Math-45_fix
2#int TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=(long)rowDimension
5#TRANSVAR3=(long)columnDimension
Math-48_buggy
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
Math-48_fix
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
Math-5_buggy
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
Math-5_fix
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
Math-50_buggy
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
Math-50_fix
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
Math-51_buggy
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
Math-51_fix
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
61#TRANSVAR10=FastMath.max(rtol * FastMath.abs(x1),atol)
Math-52_buggy
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
36#TRANSVAR21=Vector3D.crossProduct(v1,v2)
37#TRANSVAR22=v3.subtract(u3)
39#TRANSVAR23=u1.crossProduct(u3)
68#TRANSVAR24=1.0 / (c + c)
Math-52_fix
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
33#TRANSVAR21=0.001
37#TRANSVAR22=Vector3D.crossProduct(v1,v2)
38#TRANSVAR23=v3.subtract(u3)
40#TRANSVAR24=u1.crossProduct(u3)
69#TRANSVAR25=1.0 / (c + c)
Math-53_buggy
2#Complex TRANSVAR0
Math-53_fix
2#Complex TRANSVAR0
Math-55_buggy
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
Math-55_fix
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
4#TRANSVAR2=v1.getNormSq()
5#TRANSVAR3=v2.getNormSq()
12#TRANSVAR4=(FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4
13#TRANSVAR5=FastMath.scalb(v1.x,-deltaExp)
14#TRANSVAR6=FastMath.scalb(v1.y,-deltaExp)
15#TRANSVAR7=FastMath.scalb(v1.z,-deltaExp)
16#TRANSVAR8=FastMath.scalb(v2.x,deltaExp)
17#TRANSVAR9=FastMath.scalb(v2.y,deltaExp)
18#TRANSVAR10=FastMath.scalb(v2.z,deltaExp)
27#TRANSVAR11=(x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2,2 * deltaExp)
28#TRANSVAR12=FastMath.rint(256 * ratio) / 256
30#TRANSVAR13=x1 - rho * x2
31#TRANSVAR14=y1 - rho * y2
32#TRANSVAR15=z1 - rho * z2
Math-56_buggy
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
23#TRANSVAR6=1
Math-56_fix
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
Math-57_buggy
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
Math-57_fix
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
Math-58_buggy
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
Math-58_fix
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
Math-59_buggy
2#final float TRANSVAR0
2#final float TRANSVAR1
Math-59_fix
2#final float TRANSVAR0
2#final float TRANSVAR1
Math-60_buggy
2#double TRANSVAR0
3#TRANSVAR1=x - mean
7#MaxIterationsExceededException TRANSVAR2
Math-60_fix
2#double TRANSVAR0
3#TRANSVAR1=x - mean
Math-63_buggy
2#double TRANSVAR0
2#double TRANSVAR1
Math-63_fix
2#double TRANSVAR0
2#double TRANSVAR1
Math-64_buggy
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[cols]
20#TRANSVAR6=new double[cols]
21#TRANSVAR7=new double[cols]
28#TRANSVAR8=true
29#TRANSVAR9=new VectorialPointValuePair(point,objective)
34#TRANSVAR10=current
42#TRANSVAR11=0
43#TRANSVAR12=permutation[k]
52#TRANSVAR13=0
53#TRANSVAR14=jacNorm[k]
57#TRANSVAR15=dk * point[k]
69#TRANSVAR16=0
71#TRANSVAR17=0
72#TRANSVAR18=permutation[j]
73#TRANSVAR19=jacNorm[pj]
75#TRANSVAR20=0
76#TRANSVAR21=0
89#TRANSVAR22=0
94#TRANSVAR23=0
97#TRANSVAR24=0
98#TRANSVAR25=permutation[j]
101#TRANSVAR26=cost
102#TRANSVAR27=residuals
110#TRANSVAR28=0
111#TRANSVAR29=0
112#TRANSVAR30=permutation[j]
115#TRANSVAR31=diag[pj] * lmDir[pj]
129#TRANSVAR32=-1.0
131#TRANSVAR33=cost / previousCost
137#TRANSVAR34=0
138#TRANSVAR35=permutation[j]
139#TRANSVAR36=lmDir[pj]
141#TRANSVAR37=0
145#TRANSVAR38=0
146#TRANSVAR39=0
149#TRANSVAR40=previousCost * previousCost
151#TRANSVAR41=lmPar * lmNorm * lmNorm / pc2
152#TRANSVAR42=coeff1 + 2 * coeff2
153#TRANSVAR43=-(coeff1 + coeff2)
160#TRANSVAR44=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
177#TRANSVAR45=0
178#TRANSVAR46=diag[k] * point[k]
188#TRANSVAR47=0
189#TRANSVAR48=permutation[j]
Math-64_fix
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[rows]
20#TRANSVAR6=new double[rows]
21#TRANSVAR7=new double[cols]
22#TRANSVAR8=new double[cols]
23#TRANSVAR9=new double[cols]
30#TRANSVAR10=true
31#TRANSVAR11=new VectorialPointValuePair(point,objective)
33#TRANSVAR12=0
39#TRANSVAR13=current
47#TRANSVAR14=0
48#TRANSVAR15=permutation[k]
57#TRANSVAR16=0
58#TRANSVAR17=jacNorm[k]
62#TRANSVAR18=dk * point[k]
74#TRANSVAR19=0
76#TRANSVAR20=0
77#TRANSVAR21=permutation[j]
78#TRANSVAR22=jacNorm[pj]
80#TRANSVAR23=0
81#TRANSVAR24=0
96#TRANSVAR25=0
101#TRANSVAR26=0
104#TRANSVAR27=0
105#TRANSVAR28=permutation[j]
108#TRANSVAR29=cost
109#TRANSVAR30=residuals
120#TRANSVAR31=0
121#TRANSVAR32=0
122#TRANSVAR33=permutation[j]
125#TRANSVAR34=diag[pj] * lmDir[pj]
138#TRANSVAR35=-1.0
140#TRANSVAR36=cost / previousCost
146#TRANSVAR37=0
147#TRANSVAR38=permutation[j]
148#TRANSVAR39=lmDir[pj]
150#TRANSVAR40=0
154#TRANSVAR41=0
155#TRANSVAR42=0
158#TRANSVAR43=previousCost * previousCost
160#TRANSVAR44=lmPar * lmNorm * lmNorm / pc2
161#TRANSVAR45=coeff1 + 2 * coeff2
162#TRANSVAR46=-(coeff1 + coeff2)
169#TRANSVAR47=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
186#TRANSVAR48=0
187#TRANSVAR49=diag[k] * point[k]
203#TRANSVAR50=0
204#TRANSVAR51=permutation[j]
Math-69_buggy
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
Math-69_fix
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
Math-7_buggy
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
56#final StepHandler TRANSVAR16
63#final EventState TRANSVAR17
69#TRANSVAR18=currentEvent.reset(eventT,eventY)
76#final EventState TRANSVAR19
97#TRANSVAR20=interpolator.getInterpolatedState()
98#final EventState TRANSVAR21
105#StepHandler TRANSVAR22
Math-7_fix
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
52#final EventState TRANSVAR16
58#final StepHandler TRANSVAR17
68#TRANSVAR18=false
69#final EventState TRANSVAR19
96#TRANSVAR20=interpolator.getInterpolatedState()
97#final EventState TRANSVAR21
104#StepHandler TRANSVAR22
Math-70_buggy
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
Math-70_fix
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
Math-72_buggy
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
Math-72_fix
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
Math-73_buggy
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
Math-73_fix
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
Math-74_buggy
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18
70#TRANSVAR19=1
72#TRANSVAR20=0
73#TRANSVAR21=a[k - 1][0] * yDotK[0][j]
74#TRANSVAR22=1
85#TRANSVAR23=0
86#TRANSVAR24=b[0] * yDotK[0][j]
87#TRANSVAR25=1
100#TRANSVAR26=manager.getEventTime() - stepStart
115#TRANSVAR27=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
124#TRANSVAR28=stepStart + stepSize
131#StepHandler TRANSVAR29
154#TRANSVAR30=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
157#TRANSVAR31=stepSize * factor
158#TRANSVAR32=stepStart + scaledH
159#TRANSVAR33=forward ? (nextT >= t) : (nextT <= t)
165#TRANSVAR34=stepStart
Math-74_fix
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18=new double[y0.length]
57#TRANSVAR19=0
61#TRANSVAR20=0
73#TRANSVAR21=1
75#TRANSVAR22=0
76#TRANSVAR23=a[k - 1][0] * yDotK[0][j]
77#TRANSVAR24=1
88#TRANSVAR25=0
89#TRANSVAR26=b[0] * yDotK[0][j]
90#TRANSVAR27=1
103#TRANSVAR28=manager.getEventTime() - stepStart
118#TRANSVAR29=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
127#TRANSVAR30=stepStart + stepSize
134#StepHandler TRANSVAR31
157#TRANSVAR32=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
160#TRANSVAR33=stepSize * factor
161#TRANSVAR34=stepStart + scaledH
162#TRANSVAR35=forward ? (nextT >= t) : (nextT <= t)
168#TRANSVAR36=stepStart
Math-75_buggy
2#Object TRANSVAR0
Math-75_fix
2#Object TRANSVAR0
Math-78_buggy
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
38#TRANSVAR9=new UnivariateRealFunction(){
  public double value(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

39#final double TRANSVAR10
43#DerivativeException TRANSVAR11
45#EventException TRANSVAR12
50#TRANSVAR13=new BrentSolver()
53#TRANSVAR14=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
88#FunctionEvaluationException TRANSVAR15
89#TRANSVAR16=e.getCause()
Math-78_fix
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
34#TRANSVAR9=(forward ? 0.25 : -0.25) * convergence
35#TRANSVAR10=0
49#TRANSVAR11=new UnivariateRealFunction(){
  public double value(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

50#final double TRANSVAR12
54#DerivativeException TRANSVAR13
56#EventException TRANSVAR14
61#TRANSVAR15=new BrentSolver()
64#TRANSVAR16=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
99#FunctionEvaluationException TRANSVAR17
100#TRANSVAR18=e.getCause()
Math-79_buggy
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
Math-79_fix
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
Math-8_buggy
2#int TRANSVAR0
8#TRANSVAR1=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize)
10#TRANSVAR2=0
Math-8_fix
2#int TRANSVAR0
8#TRANSVAR1=new Object[sampleSize]
10#TRANSVAR2=0
Math-80_buggy
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * n - 1
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
Math-80_fix
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * (n - 1)
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
Math-82_buggy
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
Math-82_fix
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
Math-84_buggy
2#final Comparator<RealPointValuePair> TRANSVAR0
10#TRANSVAR1=simplex
11#TRANSVAR2=original[0]
14#TRANSVAR3=evaluateNewSimplex(original,1.0,comparator)
18#TRANSVAR4=simplex
19#TRANSVAR5=evaluateNewSimplex(original,khi,comparator)
30#TRANSVAR6=evaluateNewSimplex(original,gamma,comparator)
Math-84_fix
2#final Comparator<RealPointValuePair> TRANSVAR0
5#TRANSVAR1=getConvergenceChecker()
11#TRANSVAR2=simplex
12#TRANSVAR3=original[0]
15#TRANSVAR4=evaluateNewSimplex(original,1.0,comparator)
19#TRANSVAR5=simplex
20#TRANSVAR6=evaluateNewSimplex(original,khi,comparator)
31#TRANSVAR7=evaluateNewSimplex(original,gamma,comparator)
38#TRANSVAR8=getIterations()
39#TRANSVAR9=true
40#TRANSVAR10=0
Math-85_buggy
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
Math-85_fix
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
Math-86_buggy
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
27#TRANSVAR6=i + 1
28#TRANSVAR7=lTData[j]
29#TRANSVAR8=lI[j]
30#TRANSVAR9=lJ[i]
31#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
41#TRANSVAR11=0
43#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
Math-86_fix
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
24#TRANSVAR6=i + 1
25#TRANSVAR7=lTData[j]
26#TRANSVAR8=lI[j]
27#TRANSVAR9=lJ[i]
28#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
38#TRANSVAR11=0
40#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
Math-87_buggy
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
Math-87_fix
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
Math-88_buggy
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=0
15#TRANSVAR4=getNumObjectiveFunctions()
Math-88_fix
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=0
Math-89_buggy
2#Object TRANSVAR0
Math-89_fix
2#Object TRANSVAR0
Math-9_buggy
3#TRANSVAR0=new Line(zero,zero.subtract(direction))
Math-9_fix
3#TRANSVAR0=new Line(this)
Math-90_buggy
2#Object TRANSVAR0
14#TRANSVAR1=v
19#TRANSVAR2=(Long)freqTable.get(obj)
25#ClassCastException TRANSVAR3
Math-90_fix
2#Object TRANSVAR0
Math-91_buggy
2#Fraction TRANSVAR0
3#TRANSVAR1=doubleValue()
4#TRANSVAR2=object.doubleValue()
Math-91_fix
2#Fraction TRANSVAR0
3#TRANSVAR1=((long)numerator) * object.denominator
4#TRANSVAR2=((long)denominator) * object.numerator
Math-94_buggy
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
Math-94_fix
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
Math-95_buggy
2#double TRANSVAR0
3#TRANSVAR1
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
Math-95_fix
2#double TRANSVAR0
3#TRANSVAR1=1.0
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
Math-96_buggy
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
Math-96_fix
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
Math-97_buggy
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
Math-97_fix
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
Mockito-1_buggy
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
8#TRANSVAR2=0
9#TRANSVAR3=matchers.get(position)
Mockito-1_fix
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
5#TRANSVAR2=0
6#TRANSVAR3=matchers.get(position)
11#TRANSVAR4=indexOfVararg
12#TRANSVAR5=matchers.get(position)
19#TRANSVAR6=0
20#TRANSVAR7=matchers.get(position)
Mockito-12_buggy
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
Mockito-12_fix
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
Mockito-13_buggy
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
31#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
34#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
40#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
Mockito-13_fix
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
33#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
36#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
42#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
Mockito-18_buggy
2#Class<?> TRANSVAR0
Mockito-18_fix
2#Class<?> TRANSVAR0
Mockito-20_buggy
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=null
13#TRANSVAR4=(MockMethodInterceptor.MockAccess)mockInstance
17#ClassCastException TRANSVAR5
28#org.mockito.internal.creation.instance.InstantiationException TRANSVAR6
Mockito-20_fix
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=new InstantiatorProvider().getInstantiator(settings)
11#TRANSVAR4=null
14#TRANSVAR5=(MockMethodInterceptor.MockAccess)mockInstance
18#ClassCastException TRANSVAR6
29#org.mockito.internal.creation.instance.InstantiationException TRANSVAR7
Mockito-22_buggy
2#Object TRANSVAR0
2#Object TRANSVAR1
Mockito-22_fix
2#Object TRANSVAR0
2#Object TRANSVAR1
Mockito-24_buggy
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
Mockito-24_fix
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
Mockito-27_buggy
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=new MockHandler<T>(oldMockHandler)
5#TRANSVAR3=new MethodInterceptorFilter(newMockHandler,(MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS))
Mockito-27_fix
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=newMethodInterceptorFilter(oldMockHandler.getMockSettings())
Mockito-28_buggy
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
Mockito-28_fix
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
4#TRANSVAR4=mockCandidateFilter.filterCandidate(mocks,field,fieldInstance).thenInject()
Mockito-29_buggy
2#Description TRANSVAR0
Mockito-29_fix
2#Description TRANSVAR0
Mockito-33_buggy
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
Mockito-33_fix
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
10#TRANSVAR3=m1.getParameterTypes()
11#TRANSVAR4=m2.getParameterTypes()
13#TRANSVAR5=0
Mockito-34_buggy
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
Mockito-34_fix
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
Mockito-38_buggy
2#Matcher TRANSVAR0
2#Object TRANSVAR1
Mockito-38_fix
2#Matcher TRANSVAR0
2#Object TRANSVAR1
Mockito-5_buggy
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#org.mockito.exceptions.verification.junit.ArgumentsAreDifferent TRANSVAR3
Mockito-5_fix
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#AssertionError TRANSVAR3
Mockito-7_buggy
3#Type TRANSVAR0
Mockito-7_fix
3#Type TRANSVAR0
Mockito-8_buggy
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
Mockito-8_fix
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
Time-14_buggy
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=0L
11#TRANSVAR5=0
11#TRANSVAR6=partial.size()
Time-14_fix
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=partial.getValue(0) - 1
11#TRANSVAR5=((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1
15#TRANSVAR6=0L
16#TRANSVAR7=0
16#TRANSVAR8=partial.size()
Time-15_buggy
2#long TRANSVAR0
2#int TRANSVAR1
11#TRANSVAR2=val1 * val2
Time-15_fix
2#long TRANSVAR0
2#int TRANSVAR1
14#TRANSVAR2=val1 * val2
Time-16_buggy
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,iDefaultYear)
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
Time-16_fix
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,chrono.year().get(instantLocal))
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
Time-17_buggy
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR)
7#TRANSVAR3=convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR)
13#TRANSVAR4=convertUTCToLocal(instant)
Time-17_fix
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=instant - 3 * DateTimeConstants.MILLIS_PER_HOUR
7#TRANSVAR3=instant + 3 * DateTimeConstants.MILLIS_PER_HOUR
8#TRANSVAR4=getOffset(instantBefore)
9#TRANSVAR5=getOffset(instantAfter)
15#TRANSVAR6=offsetBefore - offsetAfter
16#TRANSVAR7=nextTransition(instantBefore)
17#TRANSVAR8=transition - diff
18#TRANSVAR9=transition + diff
24#TRANSVAR10=instant - overlapStart
Time-18_buggy
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
Time-18_fix
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
20#IllegalFieldValueException TRANSVAR9
Time-19_buggy
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
Time-19_fix
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
Time-20_buggy
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#String TRANSVAR4
Time-20_fix
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#TRANSVAR4=null
5#String TRANSVAR5
Time-22_buggy
2#long TRANSVAR0
Time-22_fix
2#long TRANSVAR0
6#TRANSVAR1=ISOChronology.getInstanceUTC().get(this,duration)
Time-23_buggy
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
Time-23_fix
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
Time-24_buggy
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
26#IllegalFieldValueException TRANSVAR9
36#TRANSVAR10=iZone.getOffsetFromLocal(millis)
39#TRANSVAR11="Illegal instant due to time zone offset transition (" + iZone + ')'
Time-24_fix
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
27#TRANSVAR9=0
31#IllegalFieldValueException TRANSVAR10
41#TRANSVAR11=iZone.getOffsetFromLocal(millis)
44#TRANSVAR12="Illegal instant due to time zone offset transition (" + iZone + ')'
Time-25_buggy
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
Time-25_fix
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
Time-27_buggy
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
9#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
13#TRANSVAR6=createComposite(elementPairs)
Time-27_fix
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
10#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
15#TRANSVAR6=createComposite(elementPairs)
Time-4_buggy
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(iChronology,newTypes,newValues)
47#TRANSVAR13=getValues()
Time-4_fix
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(newTypes,newValues,iChronology)
47#TRANSVAR13=getValues()
Time-5_buggy
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
Time-5_fix
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
14#TRANSVAR5=years * 12L + months
16#TRANSVAR6=FieldUtils.safeToInt(totalMonths / 12)
21#TRANSVAR7=FieldUtils.safeToInt(totalMonths)
Time-7_buggy
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
12#TRANSVAR7=chrono.year().get(instantLocal)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
Time-7_fix
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=DateTimeUtils.getChronology(chrono).year().get(instantMillis)
11#TRANSVAR7=instantMillis + chrono.getZone().getOffset(instantMillis)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
Time-8_buggy
2#int TRANSVAR0
2#int TRANSVAR1
12#TRANSVAR2=0
14#TRANSVAR3=hoursOffset * 60
21#ArithmeticException TRANSVAR4
Time-8_fix
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
17#TRANSVAR3=hoursOffset * 60
24#ArithmeticException TRANSVAR4
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
2#String TRANSVAR0
2#String TRANSVAR0
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p1.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p2.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth() - w[2]),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,Math.max(constraint.getWidth() - w[2],0.0)),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
3#TRANSVAR0=createCopy(0,getItemCount() - 1)
3#TRANSVAR0=(TimeSeries)super.clone()
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
102#TRANSVAR37=owner.getEntityCollection()
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
103#TRANSVAR37=owner.getEntityCollection()
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
13#TRANSVAR3=start
14#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
16#TRANSVAR5=(TimeSeriesDataItem)item.clone()
20#SeriesException TRANSVAR6
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
15#TRANSVAR3=start
16#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
18#TRANSVAR5=(TimeSeriesDataItem)item.clone()
22#SeriesException TRANSVAR6
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
70#TRANSVAR14=r.getAnnotations()
71#TRANSVAR15=c.iterator()
73#TRANSVAR16=(XYAnnotation)i.next()
81#TRANSVAR17=includedAnnotations.iterator()
83#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
71#TRANSVAR14=r.getAnnotations()
72#TRANSVAR15=c.iterator()
74#TRANSVAR16=(XYAnnotation)i.next()
83#TRANSVAR17=includedAnnotations.iterator()
85#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#Number TRANSVAR0
2#Number TRANSVAR1
8#TRANSVAR2=null
9#TRANSVAR3=indexOf(x)
11#TRANSVAR4=(XYDataItem)this.data.get(index)
15#CloneNotSupportedException TRANSVAR5
2#Number TRANSVAR0
2#Number TRANSVAR1
12#TRANSVAR2=null
13#TRANSVAR3=indexOf(x)
15#TRANSVAR4=(XYDataItem)this.data.get(index)
19#CloneNotSupportedException TRANSVAR5
2#Object TRANSVAR0
2#Object TRANSVAR0
10#TRANSVAR1=(ShapeList)obj
11#TRANSVAR2=size()
12#TRANSVAR3=0
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
22#TRANSVAR3=valueList.size()
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
2#String TRANSVAR0
2#boolean TRANSVAR1
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
19#TRANSVAR5=token.indexOf('=')
20#TRANSVAR6=pos == -1 ? token : token.substring(0,pos)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
21#TRANSVAR6=pos
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
24#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#String TRANSVAR0
5#TRANSVAR1=new Option(opt,description)
2#String TRANSVAR0
4#TRANSVAR1=null
2#Option TRANSVAR0
2#Option TRANSVAR0
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#String TRANSVAR0
8#TRANSVAR1=str.length()
2#String TRANSVAR0
4#TRANSVAR1=str.length()
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
10#String TRANSVAR2
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
13#String TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer()
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR0
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#Scope TRANSVAR0
13#TRANSVAR1=fnScope.getRootNode()
21#TRANSVAR2=getFunctionArgList(function)
22#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
26#TRANSVAR4
28#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Scope TRANSVAR0
16#TRANSVAR1=fnScope.getRootNode()
24#TRANSVAR2=getFunctionArgList(function)
25#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
29#TRANSVAR4
31#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Node TRANSVAR0
2#boolean TRANSVAR1
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
2#Node TRANSVAR0
2#Node TRANSVAR1
5#TRANSVAR2=new MakeDeclaredNamesUnique()
6#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#Node TRANSVAR0
2#Node TRANSVAR1
6#TRANSVAR2=new MakeDeclaredNamesUnique()
7#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=new StringBuilder()
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
49#TRANSVAR12=InlineCostEstimator.getCost(n)
52#TRANSVAR13=Node.newString("")
57#TRANSVAR14=arrayFoldedChildren.remove(0)
65#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
77#TRANSVAR16="[].join()".length()
84#Node TRANSVAR17
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=null
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
51#TRANSVAR12=InlineCostEstimator.getCost(n)
54#TRANSVAR13=Node.newString("")
59#TRANSVAR14=arrayFoldedChildren.remove(0)
67#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
79#TRANSVAR16="[].join()".length()
86#Node TRANSVAR17
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
2#JsDocToken TRANSVAR0
2#JsDocToken TRANSVAR0
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#JSType TRANSVAR0
2#JSType TRANSVAR0
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=inferTemplateTypesFromParameters(fnType,n)
17#TRANSVAR4=new TemplateTypeReplacer(registry,inferred)
19#TRANSVAR5=n.getFirstChild()
21#TRANSVAR6=fnType.visit(replacer).toMaybeFunctionType()
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=Maps.filterKeys(inferTemplateTypesFromParameters(fnType,n),new Predicate<TemplateType>(){
  @Override public boolean methodName(  TemplateType key){
    return keys.contains(key);
  }
}
)
16#TemplateType TRANSVAR4
23#TRANSVAR5=new TemplateTypeReplacer(registry,inferred)
25#TRANSVAR6=n.getFirstChild()
27#TRANSVAR7=fnType.visit(replacer).toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
19#TRANSVAR5=callNode.getFirstChild().getNext()
38#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
11#TRANSVAR3=callNode.getFirstChild().getNext()
30#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
12#TRANSVAR3=callNode.getFirstChild().getNext()
31#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
21#TRANSVAR5=callNode.getFirstChild().getNext()
40#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
2#Node TRANSVAR0
2#boolean TRANSVAR1
10#TRANSVAR2=getJSType(n.getFirstChild()).dereference()
12#TRANSVAR3=n.getLastChild().getString()
34#TRANSVAR4=getJSType(n)
36#TRANSVAR5=type.dereference()
46#TRANSVAR6=n.getQualifiedName()
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR2=getJSType(n)
5#TRANSVAR3=type.dereference()
22#TRANSVAR4=getJSType(n.getFirstChild()).dereference()
24#TRANSVAR5=n.getLastChild().getString()
46#TRANSVAR6=n.getQualifiedName()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
9#TRANSVAR3=child.getString()
10#TRANSVAR4=typeSystem.getType(getScope(),n,name)
12#TRANSVAR5=getProperty(name)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
12#TRANSVAR3=child.getString()
13#TRANSVAR4=typeSystem.getType(getScope(),n,name)
15#TRANSVAR5=getProperty(name)
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
3#TRANSVAR1=getCfg().getOutEdges(cfgNode)
4#DiGraphEdge<Node,Branch> TRANSVAR2
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
56#TRANSVAR11=referenceInfo.references
57#TRANSVAR12=1
58#TRANSVAR13=refs.get(i).getNode()
60#TRANSVAR14=aliasCandidates.get(nameNode)
63#TRANSVAR15
65#TRANSVAR16=aliasInit.getAssignedValue()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
58#TRANSVAR11=referenceInfo.references
59#TRANSVAR12=1
60#TRANSVAR13=refs.get(i).getNode()
62#TRANSVAR14=aliasCandidates.get(nameNode)
65#TRANSVAR15
67#TRANSVAR16=aliasInit.getAssignedValue()
2#Comment TRANSVAR0
2#Comment TRANSVAR0
3#TRANSVAR1=Pattern.compile("(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]")
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=Context.OTHER
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=getContextForNoInOperator(context)
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
38#TRANSVAR9=n.getLastChild()
45#TRANSVAR10=n.getLastChild()
60#Node TRANSVAR11
64#TRANSVAR12=c
65#TRANSVAR13
65#TRANSVAR14
90#TRANSVAR15=n.getLastChild()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
41#TRANSVAR9=n.getLastChild()
56#Node TRANSVAR10
60#TRANSVAR11=c
61#TRANSVAR12
61#TRANSVAR13
86#TRANSVAR14=n.getLastChild()
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
7#TRANSVAR2=0
8#TRANSVAR3=s.charAt(index)
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
16#TRANSVAR3=c.getNext()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
15#TRANSVAR3=c.getNext()
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#String TRANSVAR0
3#TRANSVAR1=s.length()
10#TRANSVAR2=1
2#String TRANSVAR0
3#TRANSVAR1=s.length()
11#TRANSVAR2=1
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
151#TRANSVAR22=thenOp.removeFirstChild()
152#TRANSVAR23=thenOp.removeFirstChild()
153#TRANSVAR24=elseOp.getLastChild()
156#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
157#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
159#TRANSVAR27=NodeUtil.newExpr(assign)
171#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
178#TRANSVAR29=isVarBlock(thenBranch)
179#TRANSVAR30=isVarBlock(elseBranch)
185#TRANSVAR31=getBlockVar(thenBranch)
186#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
188#TRANSVAR33=var.getFirstChild()
189#TRANSVAR34=elseAssign.getFirstChild()
194#TRANSVAR35=name1.removeChildren()
195#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
197#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
210#TRANSVAR38=getBlockVar(elseBranch)
211#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
213#TRANSVAR40=thenAssign.getFirstChild()
214#TRANSVAR41=var.getFirstChild()
219#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
220#TRANSVAR43=name2.removeChildren()
222#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
153#TRANSVAR22=thenOp.removeFirstChild()
154#TRANSVAR23=thenOp.removeFirstChild()
155#TRANSVAR24=elseOp.getLastChild()
158#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
159#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
161#TRANSVAR27=NodeUtil.newExpr(assign)
173#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
180#TRANSVAR29=isVarBlock(thenBranch)
181#TRANSVAR30=isVarBlock(elseBranch)
187#TRANSVAR31=getBlockVar(thenBranch)
188#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
190#TRANSVAR33=var.getFirstChild()
191#TRANSVAR34=elseAssign.getFirstChild()
196#TRANSVAR35=name1.removeChildren()
197#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
199#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
212#TRANSVAR38=getBlockVar(elseBranch)
213#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
215#TRANSVAR40=thenAssign.getFirstChild()
216#TRANSVAR41=var.getFirstChild()
221#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
222#TRANSVAR43=name2.removeChildren()
224#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR0
4#TRANSVAR1=n.getLastChild()
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
12#TRANSVAR2=getNativeType(JSTypeNative.NO_TYPE)
2#Node TRANSVAR0
21#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
24#TRANSVAR1=n.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
13#TRANSVAR2=false
14#TRANSVAR3=ImmutableList.builder()
16#ObjectType TRANSVAR4
17#TRANSVAR5=(ObjectType)iface.resolve(t,scope)
26#TRANSVAR6=0
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
11#TRANSVAR2=safeResolve(typeOfThis,t,scope)
16#TRANSVAR3=false
17#TRANSVAR4=ImmutableList.builder()
19#ObjectType TRANSVAR5
20#TRANSVAR6=(ObjectType)iface.resolve(t,scope)
29#TRANSVAR7=0
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
7#TRANSVAR2=node.getFirstChild()
13#TRANSVAR3=node.getFirstChild()
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
12#TRANSVAR2=node.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
44#TRANSVAR3=new ComposeWarningsGuard(guards)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
14#TRANSVAR4=right.getDouble()
15#TRANSVAR5=(int)index
26#TRANSVAR6=left.getFirstChild()
27#TRANSVAR7=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=0
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
50#TRANSVAR8=thisIsVarArgs || thisParam.isOptionalArg()
51#TRANSVAR9=thatIsVarArgs || thatParam.isOptionalArg()
60#TRANSVAR10=thatIsVarArgs && (thatParamType == null || thatParamType.isUnknownType() || thatParamType.isNoType())
2#JSType TRANSVAR0
2#JSType TRANSVAR0
20#JSType TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
36#TRANSVAR5=rValue.getFirstChild()
37#TRANSVAR6=firstClause.getNext()
38#TRANSVAR7=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
26#TRANSVAR5=rValue.getJSDocInfo()
40#TRANSVAR6=rValue.getFirstChild()
41#TRANSVAR7=firstClause.getNext()
42#TRANSVAR8=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
14#TRANSVAR5=true
31#TRANSVAR6=n.getParent()
41#TRANSVAR7=getFunctionAnalysisResults(scope.getRootNode())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
11#TRANSVAR5=qName.substring(0,qName.lastIndexOf(".prototype"))
12#TRANSVAR6=scope.getSlot(className)
13#TRANSVAR7=slot == null ? null : slot.getType()
20#TRANSVAR8=true
37#TRANSVAR9=n.getParent()
47#TRANSVAR10=getFunctionAnalysisResults(scope.getRootNode())
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=left.hasChildren()
27#TRANSVAR7=!isVarDeclaration || var == null || var.isTypeInferred()
47#TRANSVAR8=var.getType()
53#TRANSVAR9=left.getQualifiedName()
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=var == null ? null : var.getType()
10#TRANSVAR7=left.hasChildren() && varType != null && !var.isTypeInferred()
29#TRANSVAR8=isVarDeclaration && !resultType.isNullType() && !resultType.isVoidType()
51#TRANSVAR9=var.getType()
57#TRANSVAR10=left.getQualifiedName()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
11#String TRANSVAR8
12#TRANSVAR9=properties.get(name)
24#ObjectType TRANSVAR10
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
15#String TRANSVAR8
16#TRANSVAR9=properties.get(name)
28#ObjectType TRANSVAR10
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
15#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
36#Node TRANSVAR5
37#TRANSVAR6=an.getType()
50#TRANSVAR7="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
20#TRANSVAR3=parent.getParent()
30#Node TRANSVAR4
31#TRANSVAR5=an.getType()
48#TRANSVAR6=NodeUtil.isExpressionResultUsed(n)
49#TRANSVAR7=NodeUtil.isSimpleOperatorType(n.getType())
57#TRANSVAR8="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
4#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
26#TRANSVAR6=constructor.getNext()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
5#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#Reference TRANSVAR2
5#TRANSVAR3=ref.getNode()
6#TRANSVAR4=ref.getParent()
7#TRANSVAR5=ref.getGrandparent()
36#TRANSVAR6=ref.getAssignedValue()
55#TRANSVAR7=val.getFirstChild()
64#TRANSVAR8=child.getFirstChild()
68#Reference TRANSVAR9
69#TRANSVAR10=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
29#TRANSVAR7=parent.getLastChild().getString()
45#TRANSVAR8=ref.getAssignedValue()
64#TRANSVAR9=val.getFirstChild()
74#TRANSVAR10=child.getFirstChild()
78#Reference TRANSVAR11
79#TRANSVAR12=t.getParent()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
53#CompilerInput TRANSVAR5
56#String TRANSVAR6
66#CircularDependencyException TRANSVAR7
74#MissingProvideException TRANSVAR8
85#CompilerInput TRANSVAR9
86#TRANSVAR10=input.getAstRoot(this)
94#TRANSVAR11=n.getJSDocInfo()
119#CompilerInput TRANSVAR12
120#TRANSVAR13=input.getAstRoot(this)
137#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
52#CompilerInput TRANSVAR5
55#String TRANSVAR6
65#CircularDependencyException TRANSVAR7
73#MissingProvideException TRANSVAR8
84#CompilerInput TRANSVAR9
85#TRANSVAR10=input.getAstRoot(this)
93#TRANSVAR11=n.getJSDocInfo()
118#CompilerInput TRANSVAR12
119#TRANSVAR13=input.getAstRoot(this)
136#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
70#TRANSVAR7=builder.toString()
76#TRANSVAR8=stream.getLineno()
77#TRANSVAR9=stream.getCharno()
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
31#TRANSVAR7=-1
65#TRANSVAR8=token == JsDocToken.EOC
68#TRANSVAR9=stream.getCharno() - lineStartChar
69#TRANSVAR10=0
85#TRANSVAR11=builder.toString()
91#TRANSVAR12=stream.getLineno()
92#TRANSVAR13=stream.getCharno()
2#ObjectType TRANSVAR0
15#String TRANSVAR1
16#TRANSVAR2=constraintObj.getPropertyType(prop)
18#TRANSVAR3=propType
2#ObjectType TRANSVAR0
18#String TRANSVAR1
19#TRANSVAR2=constraintObj.getPropertyType(prop)
21#TRANSVAR3=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
11#TRANSVAR3=ObjectType.cast(type.restrictByNotNullOrUndefined())
13#String TRANSVAR4
14#TRANSVAR5=constraintObj.getPropertyType(prop)
16#TRANSVAR6=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,false)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,true)
2#ForInLoop TRANSVAR0
2#ForInLoop TRANSVAR0
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
115#TRANSVAR13=getObjectSlot(ownerName)
119#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
134#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
137#TRANSVAR16=ownerType.getTypeOfThis()
138#TRANSVAR17=codingConvention.getDelegateSuperclassName()
139#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
118#TRANSVAR13=getObjectSlot(ownerName)
122#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
137#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
140#TRANSVAR16=ownerType.getTypeOfThis()
141#TRANSVAR17=codingConvention.getDelegateSuperclassName()
142#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
32#TRANSVAR7=parent.getLastChild().getString()
48#TRANSVAR8=ref.getAssignedValue()
67#TRANSVAR9=val.getFirstChild()
77#TRANSVAR10=child.getFirstChild()
81#Reference TRANSVAR11
82#TRANSVAR12=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
35#TRANSVAR7=parent.getLastChild().getString()
51#TRANSVAR8=ref.getAssignedValue()
70#TRANSVAR9=val.getFirstChild()
80#TRANSVAR10=child.getFirstChild()
84#Reference TRANSVAR11
85#TRANSVAR12=t.getParent()
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
26#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
27#TRANSVAR6=Lists.newLinkedList()
28#TRANSVAR7=null
29#TRANSVAR8=0
30#TRANSVAR9=null
31#TRANSVAR10=arrayNode.getFirstChild()
67#TRANSVAR11=InlineCostEstimator.getCost(n)
70#TRANSVAR12=Node.newString("")
75#TRANSVAR13=arrayFoldedChildren.remove(0)
83#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
96#TRANSVAR15="[].join()".length()
103#Node TRANSVAR16
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
31#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
32#TRANSVAR6=Lists.newLinkedList()
33#TRANSVAR7=null
34#TRANSVAR8=0
35#TRANSVAR9=null
36#TRANSVAR10=arrayNode.getFirstChild()
72#TRANSVAR11=InlineCostEstimator.getCost(n)
75#TRANSVAR12=Node.newString("")
80#TRANSVAR13=arrayFoldedChildren.remove(0)
88#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
101#TRANSVAR15="[].join()".length()
108#Node TRANSVAR16
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
39#TRANSVAR11=replacement
40#TRANSVAR12
43#TRANSVAR13=new Node(Token.COMMA)
50#TRANSVAR14=ref.getParent()
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
42#TRANSVAR11=replacement
43#TRANSVAR12
46#TRANSVAR13=new Node(Token.COMMA)
54#TRANSVAR14=ref.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
37#TRANSVAR6=n.getFirstChild()
71#TRANSVAR7=n.getFirstChild()
81#TRANSVAR8=n.getFirstChild()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
41#TRANSVAR6=n.getFirstChild()
75#TRANSVAR7=n.getFirstChild()
85#TRANSVAR8=n.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
44#TRANSVAR2=Lists.newArrayList()
50#TRANSVAR3=new ComposeWarningsGuard(guards)
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
45#TRANSVAR2=Lists.newArrayList()
51#TRANSVAR3=new ComposeWarningsGuard(guards)
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
42#TRANSVAR4=nameNode.getNext()
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
35#TRANSVAR4=nameNode.getFirstChild().getString()
48#TRANSVAR5=nameNode.getNext()
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
149#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
150#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
151#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
169#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
170#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
199#TRANSVAR14="left side of comparison"
272#TRANSVAR15=getJSType(parent.getFirstChild())
273#TRANSVAR16=getJSType(n.getFirstChild())
279#TRANSVAR17=n.getFirstChild()
334#Node TRANSVAR18
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
151#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
152#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
153#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
171#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
172#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
201#TRANSVAR14="left side of comparison"
274#TRANSVAR15=getJSType(parent.getFirstChild())
275#TRANSVAR16=getJSType(n.getFirstChild())
281#TRANSVAR17=n.getFirstChild()
336#Node TRANSVAR18
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=parent.getJSDocInfo() != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
29#TRANSVAR9="/script"
32#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
73#TRANSVAR8=Node.newNumber(result)
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
71#TRANSVAR8=Node.newNumber(result)
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
10#TRANSVAR3=newNode(Token.FUNCTION)
11#TRANSVAR4=transform(name)
19#TRANSVAR5=functionNode.getAbsolutePosition() + functionNode.getLp()
25#TRANSVAR6=newNode(Token.LP)
32#TRANSVAR7=functionNode.getFunctionName()
38#TRANSVAR8=functionNode.getLp() + functionNode.getAbsolutePosition()
42#AstNode TRANSVAR9
47#TRANSVAR10=transform(functionNode.getBody())
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
6#TRANSVAR3=functionNode.getFunctionType()
17#TRANSVAR4=newNode(Token.FUNCTION)
18#TRANSVAR5=transform(name)
26#TRANSVAR6=functionNode.getAbsolutePosition() + functionNode.getLp()
32#TRANSVAR7=newNode(Token.LP)
39#TRANSVAR8=functionNode.getFunctionName()
45#TRANSVAR9=functionNode.getLp() + functionNode.getAbsolutePosition()
49#AstNode TRANSVAR10
54#TRANSVAR11=transform(functionNode.getBody())
2#Parameters TRANSVAR0
3#TRANSVAR1=params.getParameter(0)
9#TRANSVAR2=param.toLowerCase()
2#Parameters TRANSVAR0
3#TRANSVAR1=null
6#CmdLineException TRANSVAR2
12#TRANSVAR3=param.toLowerCase()
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
14#TRANSVAR2=maybeExpr.getFirstChild().getFirstChild()
3#Node TRANSVAR0
3#String TRANSVAR1
16#TRANSVAR2=n.getFirstChild()
19#TRANSVAR3=isVariableReadBeforeKill(child,variable)
3#Node TRANSVAR0
3#String TRANSVAR1
10#TRANSVAR2=n.getNext()
11#TRANSVAR3=isVariableReadBeforeKill(rhs,variable)
22#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=isVariableReadBeforeKill(child,variable)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
38#TRANSVAR5=parent.getFirstChild()
39#TRANSVAR6=lhs.getNext()
56#TRANSVAR7=lhs.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
35#TRANSVAR5=parent.getParent()
37#TRANSVAR6=gramps.getJSDocInfo()
47#TRANSVAR7=parent.getFirstChild()
48#TRANSVAR8=lhs.getNext()
65#TRANSVAR9=lhs.getFirstChild()
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.indexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.lastIndexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
35#TRANSVAR7=scopeToDeclareIn.getVar(variableName)
42#TRANSVAR8=compiler.getInput(sourceName)
46#TRANSVAR9=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
48#TRANSVAR10=input.isExtern()
63#TRANSVAR11=(FunctionType)type
65#TRANSVAR12=fnType.getSuperClassConstructor()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
31#TRANSVAR7=scope.getGlobalScope()
42#TRANSVAR8=scopeToDeclareIn.getVar(variableName)
49#TRANSVAR9=compiler.getInput(sourceName)
53#TRANSVAR10=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
55#TRANSVAR11=input.isExtern()
70#TRANSVAR12=(FunctionType)type
72#TRANSVAR13=fnType.getSuperClassConstructor()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
23#TRANSVAR8=call.getChildCount() - 1
24#TRANSVAR9=functionType.getMinArguments()
25#TRANSVAR10=functionType.getMaxArguments()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
26#TRANSVAR8=call.getChildCount() - 1
27#TRANSVAR9=functionType.getMinArguments()
28#TRANSVAR10=functionType.getMaxArguments()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
55#TRANSVAR8=Node.newNumber(result)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
48#TRANSVAR8=lvalInt & 0xffffffffL
56#TRANSVAR9=Node.newNumber(result)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
20#TRANSVAR4=parent.getType()
30#TRANSVAR5=parent.getFirstChild()
31#TRANSVAR6=lhs.getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
21#TRANSVAR4=parent.getType()
31#TRANSVAR5=parent.getFirstChild()
32#TRANSVAR6=lhs.getNext()
49#TRANSVAR7=lhs.getFirstChild()
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=str.charAt(index - 1)
9#TRANSVAR4=str.charAt(index - 2)
10#TRANSVAR5=this.map(preHWChar)
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=index - 1
8#TRANSVAR4=str.charAt(i)
2#final byte[] TRANSVAR0
2#final byte[] TRANSVAR0
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
29#TRANSVAR3=new byte[doEncode ? 4096 : 8192]
30#TRANSVAR4=in.read(buf)
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
12#TRANSVAR3=0
31#TRANSVAR4=new byte[doEncode ? 4096 : 8192]
32#TRANSVAR5=in.read(buf)
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,MIME_CHUNK_SIZE,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,isChunked ? MIME_CHUNK_SIZE : 0,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#ZipArchiveEntry TRANSVAR1
10#TRANSVAR2=entries.get(ze)
11#TRANSVAR3=offsetEntry.headerOffset
13#TRANSVAR4=new byte[SHORT]
15#TRANSVAR5=ZipShort.getValue(b)
17#TRANSVAR6=ZipShort.getValue(b)
18#TRANSVAR7=fileNameLen
20#TRANSVAR8=archive.skipBytes(lenToSkip)
27#TRANSVAR9=new byte[extraFieldLen]
34#TRANSVAR10=ze.getName()
35#TRANSVAR11=entriesWithoutUTF8Flag.get(ze)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#TRANSVAR1=new LinkedHashMap<ZipArchiveEntry,OffsetEntry>(entries)
12#ZipArchiveEntry TRANSVAR2
13#TRANSVAR3=origMap.get(ze)
14#TRANSVAR4=offsetEntry.headerOffset
16#TRANSVAR5=new byte[SHORT]
18#TRANSVAR6=ZipShort.getValue(b)
20#TRANSVAR7=ZipShort.getValue(b)
21#TRANSVAR8=fileNameLen
23#TRANSVAR9=archive.skipBytes(lenToSkip)
30#TRANSVAR10=new byte[extraFieldLen]
37#TRANSVAR11=ze.getName()
38#TRANSVAR12=entriesWithoutUTF8Flag.get(ze)
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
46#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
49#Exception TRANSVAR6
54#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
50#Exception TRANSVAR6
56#IOException TRANSVAR7
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
34#TRANSVAR3=new StringBuffer()
35#TRANSVAR4=new byte[SMALL_BUFFER_SIZE]
36#TRANSVAR5=0
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
30#IllegalArgumentException TRANSVAR3
31#TRANSVAR4=new IOException("Error detected parsing the header")
40#TRANSVAR5=new StringBuffer()
41#TRANSVAR6=new byte[SMALL_BUFFER_SIZE]
42#TRANSVAR7=0
2#String TRANSVAR0
2#String TRANSVAR0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
51#Exception TRANSVAR6
58#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
52#Exception TRANSVAR6
59#IOException TRANSVAR7
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
41#TRANSVAR7=buffer[start]
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
10#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
13#TRANSVAR4=new StringWriter()
14#Map.Entry<String,String> TRANSVAR5
15#TRANSVAR6=h.getKey()
16#TRANSVAR7=h.getValue()
17#TRANSVAR8=key.length() + value.length() + 3+ 2
20#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
21#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
34#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
13#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
16#TRANSVAR4=new StringWriter()
17#Map.Entry<String,String> TRANSVAR5
18#TRANSVAR6=h.getKey()
19#TRANSVAR7=h.getValue()
20#TRANSVAR8=key.length() + value.length() + 3+ 2
23#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
24#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
37#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
42#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
13#TRANSVAR4=new byte[SKIP_BUF_SIZE]
15#TRANSVAR5=readFully(input,skipBuf,0,(int)Math.min(numToSkip,SKIP_BUF_SIZE))
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
18#TRANSVAR3=offs + len
19#TRANSVAR4=offs
20#TRANSVAR5
26#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
21#TRANSVAR3=offs + len
22#TRANSVAR4=offs
23#TRANSVAR5
29#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#byte[] TRANSVAR0
3#TRANSVAR1=0
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=parseOctal(header,CHKSUM_OFFSET,CHKSUMLEN)
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
11#TRANSVAR0=deferredBlockStreams.remove(0)
14#TRANSVAR0=deferredBlockStreams.remove(0)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
14#TRANSVAR5=new ByteArrayOutputStream()
18#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
20#TRANSVAR7=len - read
24#TRANSVAR8=new byte[restLen]
25#TRANSVAR9=IOUtils.readFully(i,rest)
34#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
16#TRANSVAR5=new ByteArrayOutputStream()
20#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
22#TRANSVAR7=len - read
26#TRANSVAR8=new byte[restLen]
27#TRANSVAR9=IOUtils.readFully(i,rest)
36#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
21#TRANSVAR2
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
19#TRANSVAR2=0
20#TRANSVAR3=0l
23#TRANSVAR4=count - bitsCachedSize
25#TRANSVAR5=in.read()
30#TRANSVAR6=nextByte & MASKS[bitsToAddCount]
35#TRANSVAR7=(nextByte >>> (overflowBits)) & MASKS[bitsToAddCount]
42#TRANSVAR8
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
35#TRANSVAR3=WORD
38#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
42#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
43#TRANSVAR6=gpFlag.usesUTF8ForNames()
44#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
53#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
57#TRANSVAR9=null
57#TRANSVAR10=null
71#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
75#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
78#TRANSVAR13=new byte[fileNameLen]
82#TRANSVAR14=new byte[extraLen]
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
36#TRANSVAR3=WORD
39#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
43#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
44#TRANSVAR6=gpFlag.usesUTF8ForNames()
45#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
54#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
58#TRANSVAR9=null
58#TRANSVAR10=null
72#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
76#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
79#TRANSVAR13=new byte[fileNameLen]
83#TRANSVAR14=new byte[extraLen]
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
2#long TRANSVAR0
3#TRANSVAR1=0x100000000L
2#long TRANSVAR0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
7#TRANSVAR6=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=true
5#TRANSVAR5=offset + length
6#TRANSVAR6=offset
8#TRANSVAR7=start
9#TRANSVAR8=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
3#TRANSVAR0=super.read()
3#TRANSVAR0=super.read()
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header.trim().isEmpty()
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header == null || header.trim().isEmpty()
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
89#TRANSVAR14=value.charAt(pos)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
10#ArrayIndexOutOfBoundsException TRANSVAR2
4#TRANSVAR0=in.read()
4#TRANSVAR0=in.read()
3#TRANSVAR0=format.getRecordSeparator()
3#TRANSVAR0=format.getRecordSeparator()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
6#final Entry<String,Integer> TRANSVAR1
7#TRANSVAR2=entry.getValue().intValue()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
2#double TRANSVAR0
2#double TRANSVAR0
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
15#TRANSVAR5=(Class<?>)toResolve
16#TRANSVAR6=original.getComponentType()
17#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
23#TRANSVAR8=(GenericArrayType)toResolve
24#TRANSVAR9=original.getGenericComponentType()
25#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
31#TRANSVAR11=(ParameterizedType)toResolve
32#TRANSVAR12=original.getOwnerType()
33#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
34#TRANSVAR14=newOwnerType != ownerType
36#TRANSVAR15=original.getActualTypeArguments()
37#TRANSVAR16=0
37#TRANSVAR17=args.length
38#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
53#TRANSVAR19=(WildcardType)toResolve
54#TRANSVAR20=original.getLowerBounds()
55#TRANSVAR21=original.getUpperBounds()
58#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
63#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
20#TRANSVAR5=(Class<?>)toResolve
21#TRANSVAR6=original.getComponentType()
22#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
28#TRANSVAR8=(GenericArrayType)toResolve
29#TRANSVAR9=original.getGenericComponentType()
30#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
36#TRANSVAR11=(ParameterizedType)toResolve
37#TRANSVAR12=original.getOwnerType()
38#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
39#TRANSVAR14=newOwnerType != ownerType
41#TRANSVAR15=original.getActualTypeArguments()
42#TRANSVAR16=0
42#TRANSVAR17=args.length
43#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
58#TRANSVAR19=(WildcardType)toResolve
59#TRANSVAR20=original.getLowerBounds()
60#TRANSVAR21=original.getUpperBounds()
63#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
68#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#JsonReader TRANSVAR0
6#TRANSVAR1=deserializeToDate(in.nextString())
2#JsonReader TRANSVAR0
7#TRANSVAR1=deserializeToDate(in.nextString())
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
103#TRANSVAR20="GMT" + timezoneOffset
108#TRANSVAR21=timezone.getID()
115#TRANSVAR22=act.replace(":","")
126#TRANSVAR23=new GregorianCalendar(timezone)
140#IndexOutOfBoundsException TRANSVAR24
142#NumberFormatException TRANSVAR25
144#IllegalArgumentException TRANSVAR26
147#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
148#TRANSVAR28=fail.getMessage()
152#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
104#TRANSVAR20="GMT" + timezoneOffset
109#TRANSVAR21=timezone.getID()
116#TRANSVAR22=act.replace(":","")
127#TRANSVAR23=new GregorianCalendar(timezone)
141#IndexOutOfBoundsException TRANSVAR24
143#NumberFormatException TRANSVAR25
145#IllegalArgumentException TRANSVAR26
148#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
149#TRANSVAR28=fail.getMessage()
153#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
11#TRANSVAR0=_exposedContext
15#TRANSVAR1=ctxt.nextTokenToRead()
52#TRANSVAR2=delegate.nextToken()
59#TRANSVAR3
138#TRANSVAR4=_headContext.isStartHandled()
153#TRANSVAR5=delegate.getCurrentName()
20#TRANSVAR0=_exposedContext
24#TRANSVAR1=ctxt.nextTokenToRead()
61#TRANSVAR2=delegate.nextToken()
68#TRANSVAR3
147#TRANSVAR4=_headContext.isStartHandled()
162#TRANSVAR5=delegate.getCurrentName()
2#Object TRANSVAR0
2#Object TRANSVAR0
26#TRANSVAR0=_exposedContext
30#TRANSVAR1=ctxt.nextTokenToRead()
67#TRANSVAR2=delegate.nextToken()
75#TRANSVAR3
154#TRANSVAR4=_headContext.isStartHandled()
169#TRANSVAR5=delegate.getCurrentName()
28#TRANSVAR0=_exposedContext
32#TRANSVAR1=ctxt.nextTokenToRead()
69#TRANSVAR2=delegate.nextToken()
77#TRANSVAR3
156#TRANSVAR4=_headContext.isStartHandled()
171#TRANSVAR5=delegate.getCurrentName()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
8#TRANSVAR2=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1))
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
7#TRANSVAR2=len + (len >> 1)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i++)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=0
11#TRANSVAR3=str.charAt(i)
17#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
17#TRANSVAR3=1
24#TRANSVAR4=NumberInput.parseLong(str)
12#TRANSVAR0=_index
15#TRANSVAR0=_index
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
14#TRANSVAR4=_serializer
16#TRANSVAR5=value.getClass()
17#TRANSVAR6=_dynamicSerializers
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
15#TRANSVAR4=_serializer
17#TRANSVAR5=value.getClass()
18#TRANSVAR6=_dynamicSerializers
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
10#TRANSVAR2=n.binaryValue()
15#TRANSVAR3=((POJONode)n).getPojo()
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
60#TRANSVAR10=_beanProperties.find(propName)
80#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
86#Exception TRANSVAR12
94#TRANSVAR13
97#Exception TRANSVAR14
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
64#TRANSVAR10=_beanProperties.find(propName)
84#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
90#Exception TRANSVAR12
98#TRANSVAR13
101#Exception TRANSVAR14
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
10#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
15#TRANSVAR3=format.getShape()
23#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
26#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
27#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
34#TRANSVAR7=format.hasLocale()
35#TRANSVAR8=format.hasTimeZone()
36#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
42#TRANSVAR10=serializers.getConfig().getDateFormat()
45#TRANSVAR11=(StdDateFormat)df0
63#TRANSVAR12=(SimpleDateFormat)df0
70#TRANSVAR13=format.getTimeZone()
71#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
7#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
12#TRANSVAR3=format.getShape()
20#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
24#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
31#TRANSVAR7=format.hasLocale()
32#TRANSVAR8=format.hasTimeZone()
33#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
39#TRANSVAR10=serializers.getConfig().getDateFormat()
42#TRANSVAR11=(StdDateFormat)df0
60#TRANSVAR12=(SimpleDateFormat)df0
67#TRANSVAR13=format.getTimeZone()
68#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name)
26#TRANSVAR4=type.getBounds()
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name,false)
26#TRANSVAR4=type.getBounds()
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getDelegateType(ctxt.getConfig())
15#TRANSVAR5=_valueDeserializer
16#TRANSVAR6=_containerType.getContentType()
29#TRANSVAR7=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
31#TRANSVAR8=findContentNullProvider(ctxt,property,valueDeser)
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getArrayDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
14#TRANSVAR5=_valueInstantiator.getDelegateType(ctxt.getConfig())
18#TRANSVAR6=_valueDeserializer
19#TRANSVAR7=_containerType.getContentType()
32#TRANSVAR8=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
34#TRANSVAR9=findContentNullProvider(ctxt,property,valueDeser)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#JavaType TRANSVAR0
2#JavaType TRANSVAR0
2#Class<?> TRANSVAR0
5#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#Class<?> TRANSVAR0
8#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#DateFormat TRANSVAR0
6#TRANSVAR1=(df == null) ? _timeZone : df.getTimeZone()
2#DateFormat TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
21#TRANSVAR3=p.getText()
22#TRANSVAR4=_findDeserializer(ctxt,typeId)
28#TRANSVAR5=new TokenBuffer(null,false)
36#TRANSVAR6=deser.deserialize(p,ctxt)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
12#TRANSVAR3=p.getCurrentToken()
23#TRANSVAR4=p.getText()
24#TRANSVAR5=_findDeserializer(ctxt,typeId)
30#TRANSVAR6=new TokenBuffer(null,false)
38#TRANSVAR7=deser.deserialize(p,ctxt)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
8#TRANSVAR2=p.nextToken()
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
20#TRANSVAR1=subclass.getSuperclass()
26#TRANSVAR2=_narrow(next)
31#TRANSVAR3=subclass.getInterfaces()
32#Class<?> TRANSVAR4
38#TRANSVAR5=_narrow(iface)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
16#TRANSVAR4=format.getTimeZone()
17#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
20#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
17#TRANSVAR4=format.getTimeZone()
18#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
21#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#StringBuilder TRANSVAR0
2#StringBuilder TRANSVAR0
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
27#IllegalArgumentException TRANSVAR6
39#TRANSVAR7=type.getKeyType()
40#TRANSVAR8=findSerializationKeyType(a,keyType)
45#TRANSVAR9=keyType.getRawClass()
59#IllegalArgumentException TRANSVAR10
70#TRANSVAR11=type.getContentType()
73#TRANSVAR12=findSerializationContentType(a,contentType)
81#TRANSVAR13=contentType.getRawClass()
92#IllegalArgumentException TRANSVAR14
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
23#TRANSVAR6=type.getRawClass()
36#IllegalArgumentException TRANSVAR7
48#TRANSVAR8=type.getKeyType()
49#TRANSVAR9=findSerializationKeyType(a,keyType)
54#TRANSVAR10=keyType.getRawClass()
68#IllegalArgumentException TRANSVAR11
79#TRANSVAR12=type.getContentType()
82#TRANSVAR13=findSerializationContentType(a,contentType)
90#TRANSVAR14=contentType.getRawClass()
101#IllegalArgumentException TRANSVAR15
2#Object TRANSVAR0
2#Object TRANSVAR0
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
17#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
20#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
27#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
29#TRANSVAR8=type.getTypeHandler()
30#TRANSVAR9
42#TRANSVAR10=propDef.findReferenceType()
46#TRANSVAR11=propDef.findObjectIdInfo()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
22#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
25#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
32#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
34#TRANSVAR8=type.getTypeHandler()
35#TRANSVAR9
47#TRANSVAR10=propDef.findReferenceType()
51#TRANSVAR11=propDef.findObjectIdInfo()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
51#TRANSVAR7=new StringBuilder(dateStr)
61#TRANSVAR8=new StringBuilder(dateStr)
63#TRANSVAR9=len - dateStr.lastIndexOf('T') - 1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
49#TRANSVAR7=len - dateStr.lastIndexOf('T') - 6
51#TRANSVAR8=len - 5
52#TRANSVAR9=new StringBuilder(dateStr)
77#TRANSVAR10=new StringBuilder(dateStr)
79#TRANSVAR11=len - dateStr.lastIndexOf('T') - 1
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
21#TRANSVAR4=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
24#TRANSVAR5=_valueDeserializer
28#TRANSVAR6=_collectionType.getContentType()
35#TRANSVAR7=_valueTypeDeserializer
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
17#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
29#TRANSVAR5=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
32#TRANSVAR6=_valueDeserializer
36#TRANSVAR7=_collectionType.getContentType()
43#TRANSVAR8=_valueTypeDeserializer
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
113#TRANSVAR16=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
118#TRANSVAR17=_annotationIntrospector.findNullSerializer(am)
123#TRANSVAR18=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
64#TRANSVAR16
77#Exception TRANSVAR17
118#TRANSVAR18=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
123#TRANSVAR19=_annotationIntrospector.findNullSerializer(am)
128#TRANSVAR20=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
27#BeanDeserializerModifier TRANSVAR6
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
28#BeanDeserializerModifier TRANSVAR6
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
12#TRANSVAR2
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
26#TRANSVAR5=p.getText().trim()
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
21#TRANSVAR8
24#Exception TRANSVAR9
47#TRANSVAR10=_beanProperties.find(propName)
65#TRANSVAR11
69#Exception TRANSVAR12
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
27#TRANSVAR8=_beanProperties.find(propName)
45#TRANSVAR9
49#Exception TRANSVAR10
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
9#TRANSVAR5
26#TRANSVAR6=oldOne.getRawParameterType(0)
27#TRANSVAR7=newOne.getRawParameterType(0)
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
19#IllegalArgumentException TRANSVAR4
21#MalformedURLException TRANSVAR5
24#TRANSVAR6="not a valid textual representation"
26#TRANSVAR7=cause.getMessage()
32#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
39#TRANSVAR9=p.getCurrentToken()
46#TRANSVAR10=p.getEmbeddedObject()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
17#IllegalArgumentException TRANSVAR4
19#MalformedURLException TRANSVAR5
22#TRANSVAR6="not a valid textual representation"
24#TRANSVAR7=cause.getMessage()
30#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
37#TRANSVAR9=p.getCurrentToken()
44#TRANSVAR10=p.getEmbeddedObject()
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
22#TRANSVAR4=format.getTimeZone()
23#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
26#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
29#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
21#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
25#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
32#TRANSVAR7=format.hasLocale()
33#TRANSVAR8=format.hasTimeZone()
34#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
40#TRANSVAR10=serializers.getConfig().getDateFormat()
43#TRANSVAR11=(StdDateFormat)df0
62#TRANSVAR12=(SimpleDateFormat)df0
69#TRANSVAR13=format.getTimeZone()
70#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
18#TRANSVAR4
21#ClassNotFoundException TRANSVAR5
25#TRANSVAR6=(DeserializationContext)ctxt
31#Exception TRANSVAR7
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
22#TRANSVAR4
25#ClassNotFoundException TRANSVAR5
29#TRANSVAR6=(DeserializationContext)ctxt
35#Exception TRANSVAR7
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4=value.getClass()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
13#TRANSVAR2=t.getKeyType()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
49#TRANSVAR12=creator.build(ctxt,buffer)
51#TRANSVAR13=0
52#TRANSVAR14=_properties[i].getProperty()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
45#TRANSVAR12
49#TRANSVAR13=new TokenBuffer(p,ctxt)
58#TRANSVAR14=creator.build(ctxt,buffer)
60#TRANSVAR15=0
61#TRANSVAR16=_properties[i].getProperty()
4#TRANSVAR0=new StringBuilder()
4#TRANSVAR0=new StringBuilder()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
2#JsonGenerator TRANSVAR0
2#JsonGenerator TRANSVAR0
6#TRANSVAR1=_rootNameFromConfig()
2#XmlSerializerProvider TRANSVAR0
2#XmlSerializerProvider TRANSVAR0
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
19#TRANSVAR5=new URL(base,relUrl)
21#MalformedURLException TRANSVAR6
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
21#TRANSVAR5=new URL(base,relUrl)
23#MalformedURLException TRANSVAR6
2#String TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=attributeKey.substring("abs:".length())
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
9#Protocol TRANSVAR4
10#TRANSVAR5=protocol.toString() + ":"
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
11#Protocol TRANSVAR4
12#TRANSVAR5=protocol.toString() + ":"
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
35#TRANSVAR7
45#TRANSVAR8=child.absUrl("href")
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
36#TRANSVAR7
46#TRANSVAR8=child.absUrl("href")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
12#TRANSVAR3=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
11#TRANSVAR3=r.consume()
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
3#TRANSVAR0=(Element)super.clone()
3#TRANSVAR0=(Element)super.clone()
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
12#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
13#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
481#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
482#Node TRANSVAR45
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
482#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
483#Node TRANSVAR45
3#TRANSVAR0=new StringBuilder()
3#TRANSVAR0=new StringBuilder()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
220#TRANSVAR23=tb.getFormElement()
226#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
233#TRANSVAR25=new Attributes()
234#Attribute TRANSVAR26
268#TRANSVAR27=tb.state()
307#TRANSVAR28=t.asEndTag()
318#TRANSVAR29=tb.process(new Token.EndTag("body"))
333#TRANSVAR30=tb.getFormElement()
392#TRANSVAR31=0
393#TRANSVAR32=tb.getActiveFormattingElement(name)
406#TRANSVAR33=null
407#TRANSVAR34=null
408#TRANSVAR35=false
409#TRANSVAR36=tb.getStack()
412#TRANSVAR37=stack.size()
413#TRANSVAR38=0
414#TRANSVAR39=stack.get(si)
431#TRANSVAR40=furthestBlock
432#TRANSVAR41=furthestBlock
434#TRANSVAR42=0
443#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
469#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
471#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
472#Node TRANSVAR46
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
223#TRANSVAR23=tb.getFormElement()
229#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
236#TRANSVAR25=new Attributes()
237#Attribute TRANSVAR26
271#TRANSVAR27=tb.state()
310#TRANSVAR28=t.asEndTag()
321#TRANSVAR29=tb.process(new Token.EndTag("body"))
336#TRANSVAR30=tb.getFormElement()
395#TRANSVAR31=0
396#TRANSVAR32=tb.getActiveFormattingElement(name)
409#TRANSVAR33=null
410#TRANSVAR34=null
411#TRANSVAR35=false
412#TRANSVAR36=tb.getStack()
415#TRANSVAR37=stack.size()
416#TRANSVAR38=0
417#TRANSVAR39=stack.get(si)
434#TRANSVAR40=furthestBlock
435#TRANSVAR41=furthestBlock
437#TRANSVAR42=0
446#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
472#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
474#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
475#Node TRANSVAR46
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
8#TRANSVAR2=el.attr("name")
10#TRANSVAR3=el.attr("type")
13#TRANSVAR4=el.select("option[selected]")
14#TRANSVAR5=false
15#Element TRANSVAR6
20#TRANSVAR7=el.select("option").first()
27#TRANSVAR8=el.val()
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
14#TRANSVAR4=el.select("option[selected]")
15#TRANSVAR5=false
16#Element TRANSVAR6
21#TRANSVAR7=el.select("option").first()
28#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
25#TRANSVAR8=new StringBuilder()
26#TRANSVAR9=0
27#TRANSVAR10=values.get(i)
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
12#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
14#TRANSVAR7=null
23#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
8#TRANSVAR6=new byte[4]
26#TRANSVAR7=doc.select("meta[http-equiv=content-type], meta[charset]").first()
28#TRANSVAR8=null
37#IllegalCharsetNameException TRANSVAR9
5#TRANSVAR0=input[pos]
5#TRANSVAR0=input[pos]
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
10#TRANSVAR6=consume()
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
7#TRANSVAR6=false
11#TRANSVAR7=consume()
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
9#TRANSVAR0
10#TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
3#TRANSVAR1=attributes.get("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#String TRANSVAR0
3#TRANSVAR1=attributes.getIgnoreCase("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().normalName()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().name()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
8#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
11#TRANSVAR5=bottom
12#TRANSVAR6=stack.get(pos).nodeName()
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
5#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
8#TRANSVAR5=bottom
9#TRANSVAR6=stack.get(pos).nodeName()
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
6#TRANSVAR2=0
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
8#TRANSVAR4=0
9#TRANSVAR5=start
10#TRANSVAR6=0
15#TRANSVAR7=hash & stringCache.length - 1
16#TRANSVAR8=stringCache[index]
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
10#TRANSVAR4=0
11#TRANSVAR5=start
12#TRANSVAR6=0
17#TRANSVAR7=hash & stringCache.length - 1
18#TRANSVAR8=stringCache[index]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
144#TRANSVAR17=tb.getStack()
145#TRANSVAR18=stack.size() - 1
146#TRANSVAR19=stack.get(i)
177#TRANSVAR20=tb.insert(startTag)
186#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
311#TRANSVAR28=t.asEndTag()
315#TRANSVAR29=0
316#TRANSVAR30=tb.getActiveFormattingElement(name)
329#TRANSVAR31=null
330#TRANSVAR32=null
331#TRANSVAR33=false
332#TRANSVAR34=tb.getStack()
335#TRANSVAR35=stack.size()
336#TRANSVAR36=0
337#TRANSVAR37=stack.get(si)
354#TRANSVAR38=furthestBlock
355#TRANSVAR39=furthestBlock
356#TRANSVAR40=0
365#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
392#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
394#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
395#Node TRANSVAR44
437#TRANSVAR45=tb.processEndTag("body")
441#TRANSVAR46=tb.getFormElement()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
145#TRANSVAR17=tb.getStack()
146#TRANSVAR18=stack.size() - 1
147#TRANSVAR19=stack.get(i)
178#TRANSVAR20=tb.insert(startTag)
187#TRANSVAR21=tb.insert(startTag)
203#TRANSVAR22=tb.insertEmpty(startTag)
227#TRANSVAR23=tb.getFormElement()
233#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR25=new Attributes()
241#Attribute TRANSVAR26
275#TRANSVAR27=tb.state()
312#TRANSVAR28=t.asEndTag()
316#TRANSVAR29=0
317#TRANSVAR30=tb.getActiveFormattingElement(name)
330#TRANSVAR31=null
331#TRANSVAR32=null
332#TRANSVAR33=false
333#TRANSVAR34=tb.getStack()
336#TRANSVAR35=stack.size()
337#TRANSVAR36=0
338#TRANSVAR37=stack.get(si)
355#TRANSVAR38=furthestBlock
356#TRANSVAR39=furthestBlock
357#TRANSVAR40=0
366#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
393#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
395#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
396#Node TRANSVAR44
438#TRANSVAR45=tb.processEndTag("body")
442#TRANSVAR46=tb.getFormElement()
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.name()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.normalName()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
10#TRANSVAR5=doc.child(0)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
11#TRANSVAR5=doc.child(0)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=doc.createElementNS(namespace,tagName)
21#TRANSVAR7=(org.jsoup.nodes.TextNode)source
22#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
25#TRANSVAR9=(org.jsoup.nodes.Comment)source
26#TRANSVAR10=doc.createComment(sourceComment.getData())
29#TRANSVAR11=(org.jsoup.nodes.DataNode)source
30#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=namespace == null && tagName.contains(":") ? doc.createElementNS("",tagName) : doc.createElementNS(namespace,tagName)
22#TRANSVAR7=(org.jsoup.nodes.TextNode)source
23#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
26#TRANSVAR9=(org.jsoup.nodes.Comment)source
27#TRANSVAR10=doc.createComment(sourceComment.getData())
30#TRANSVAR11=(org.jsoup.nodes.DataNode)source
31#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
2#String TRANSVAR0
3#TRANSVAR1=parent.get(this.key)
5#TRANSVAR2=parent.indexOfKey(this.key)
2#String TRANSVAR0
3#TRANSVAR1=this.val
6#TRANSVAR2=parent.indexOfKey(this.key)
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
15#TRANSVAR4=el.select("option[selected]")
16#TRANSVAR5=false
17#Element TRANSVAR6
22#TRANSVAR7=el.select("option").first()
29#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
16#TRANSVAR4=el.select("option[selected]")
17#TRANSVAR5=false
18#Element TRANSVAR6
23#TRANSVAR7=el.select("option").first()
30#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#EvalContext TRANSVAR0
2#EvalContext TRANSVAR0
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
28#TRANSVAR8=node.getNodeType()
45#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
46#TRANSVAR10=((ProcessingInstruction)node).getTarget()
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
29#TRANSVAR8=node.getNodeType()
46#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
47#TRANSVAR10=((ProcessingInstruction)node).getTarget()
3#TRANSVAR0=getBaseValue()
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
29#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
27#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
22#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
25#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=0
20#TRANSVAR5=pfxLen
28#TRANSVAR6=str.length() - pfxLen
37#TRANSVAR7=str.charAt(str.length() - 1)
38#TRANSVAR8
39#TRANSVAR9
40#TRANSVAR10
41#TRANSVAR11=str.indexOf('.')
42#TRANSVAR12=str.indexOf('e') + str.indexOf('E') + 1
46#TRANSVAR13=0
77#TRANSVAR14=str.substring(0,str.length() - 1)
78#TRANSVAR15=isAllZeros(mant) && isAllZeros(exp)
87#final NumberFormatException TRANSVAR16
97#TRANSVAR17=NumberUtils.createFloat(numeric)
104#final NumberFormatException TRANSVAR18
111#TRANSVAR19=NumberUtils.createDouble(numeric)
115#final NumberFormatException TRANSVAR20
120#final NumberFormatException TRANSVAR21
140#final NumberFormatException TRANSVAR22
145#final NumberFormatException TRANSVAR23
152#TRANSVAR24=isAllZeros(mant) && isAllZeros(exp)
155#TRANSVAR25=createFloat(str)
160#final NumberFormatException TRANSVAR26
165#TRANSVAR27=createDouble(str)
170#final NumberFormatException TRANSVAR28
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=false
4#TRANSVAR4=0
5#TRANSVAR5=value.charAt(i)
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=value.charAt(i)
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
30#TRANSVAR7=new char[count]
31#TRANSVAR8=end - start
34#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
19#TRANSVAR7=new char[count]
20#TRANSVAR8=end - start
23#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=Character.codePointCount(input,0,input.length())
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
20#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
17#TRANSVAR7=start
24#TRANSVAR8
31#NumberFormatException TRANSVAR9
37#TRANSVAR10=Character.toChars(entityValue)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
20#TRANSVAR7=start
29#TRANSVAR8
36#NumberFormatException TRANSVAR9
42#TRANSVAR10=Character.toChars(entityValue)
49#TRANSVAR11=(end != seqEnd) && (input.charAt(end) == ';')
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
24#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
21#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone)
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone,mLocale)
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
31#TRANSVAR9=Character.toChars(entityValue)
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
145#TRANSVAR23=createFloat(str)
149#final NumberFormatException TRANSVAR24
153#TRANSVAR25=createDouble(str)
157#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=0
9#TRANSVAR5=cs.charAt(i)
10#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=csLength - 1
9#TRANSVAR5=searchLength - 1
10#TRANSVAR6=0
11#TRANSVAR7=cs.charAt(i)
12#TRANSVAR8=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
13#ArrayStoreException TRANSVAR4
15#TRANSVAR5=array2.getClass().getComponentType()
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
73#TRANSVAR15=replacementList[i].length() - searchList[i].length()
81#TRANSVAR16=new StringBuilder(text.length() + increase)
85#TRANSVAR17=start
97#TRANSVAR18=0
118#TRANSVAR19=text.length()
119#TRANSVAR20=start
122#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
76#TRANSVAR15=replacementList[i].length() - searchList[i].length()
84#TRANSVAR16=new StringBuilder(text.length() + increase)
88#TRANSVAR17=start
100#TRANSVAR18=0
121#TRANSVAR19=text.length()
122#TRANSVAR20=start
125#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR1
6#TRANSVAR2=searchStr.length()
7#TRANSVAR3=str.length() - len
8#TRANSVAR4=0
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=str.charAt(i)
6#TRANSVAR5=this.entityName(c)
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=Character.codePointAt(str,i)
6#TRANSVAR5=this.entityName(c)
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
9#TRANSVAR6=start
10#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
10#TRANSVAR6=start
11#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
19#TRANSVAR1=val.charAt(val.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=val.indexOf('.')
24#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
52#TRANSVAR7=val.substring(0,val.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(val)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(val)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
22#TRANSVAR1=val.charAt(val.length() - 1)
23#TRANSVAR2
24#TRANSVAR3
25#TRANSVAR4
26#TRANSVAR5=val.indexOf('.')
27#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
55#TRANSVAR7=val.substring(0,val.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(val)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(val)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
23#TRANSVAR4=new StringBuffer()
24#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
26#TRANSVAR4=new StringBuffer()
27#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
3#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
6#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
24#TRANSVAR4=str.charAt(3)
28#TRANSVAR5=str.charAt(4)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
15#TRANSVAR3=str.charAt(1)
16#TRANSVAR4=str.charAt(2)
31#TRANSVAR5=str.charAt(1)
44#TRANSVAR6=str.charAt(3)
48#TRANSVAR7=str.charAt(4)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
37#TRANSVAR4=str.charAt(0)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
38#TRANSVAR4=str.charAt(0)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
22#TRANSVAR5=str.charAt(4)
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
25#TRANSVAR5=str.charAt(4)
2#Locale TRANSVAR0
2#Locale TRANSVAR0
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
63#NumberFormatException TRANSVAR9
73#TRANSVAR10=NumberUtils.createFloat(numeric)
80#NumberFormatException TRANSVAR11
87#TRANSVAR12=NumberUtils.createDouble(numeric)
91#NumberFormatException TRANSVAR13
96#NumberFormatException TRANSVAR14
116#NumberFormatException TRANSVAR15
121#NumberFormatException TRANSVAR16
128#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
130#TRANSVAR18=createFloat(str)
134#NumberFormatException TRANSVAR19
138#TRANSVAR20=createDouble(str)
142#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=thisBuf.length - strLen
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=size - strLen + 1
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
24#TRANSVAR3=false
25#TRANSVAR4=0
26#TRANSVAR5=0
50#TRANSVAR6=0
51#TRANSVAR7=false
84#TRANSVAR8=val.getActualMinimum(fields[i][0])
85#TRANSVAR9=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0.0d
13#TRANSVAR3=0.0d
14#TRANSVAR4=0
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0d
13#TRANSVAR3=0d
14#TRANSVAR4=0
18#TRANSVAR5=1.0d
19#TRANSVAR6=false
24#TRANSVAR7=0.0d
25#TRANSVAR8=0.0d
26#TRANSVAR9=0
2#double TRANSVAR0
2#double TRANSVAR0
6#MaxIterationsExceededException TRANSVAR1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
40#TRANSVAR6=pos.getIndex()
41#TRANSVAR7=parseNextCharacter(source,pos)
63#TRANSVAR8=getDenominatorFormat().parse(source,pos)
74#TRANSVAR9=whole.intValue()
75#TRANSVAR10=num.intValue()
76#TRANSVAR11=den.intValue()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
44#TRANSVAR6=pos.getIndex()
45#TRANSVAR7=parseNextCharacter(source,pos)
67#TRANSVAR8=getDenominatorFormat().parse(source,pos)
82#TRANSVAR9=whole.intValue()
83#TRANSVAR10=num.intValue()
84#TRANSVAR11=den.intValue()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#RealMatrix TRANSVAR0
3#TRANSVAR1=new EigenDecomposition(m)
2#RealMatrix TRANSVAR0
4#TRANSVAR1=m.getRowDimension()
5#TRANSVAR2=new DiagonalMatrix(dim)
6#TRANSVAR3=0
11#TRANSVAR4=new EigenDecomposition(m)
2#final int TRANSVAR0
2#final int TRANSVAR0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
48#TRANSVAR7=0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
38#TRANSVAR7=0
40#TRANSVAR8=Double.MAX_VALUE + boundaries[0][i]
41#TRANSVAR9=new NumberIsTooLargeException(boundaries[1][i],max,true)
61#TRANSVAR10=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=new int[order]
11#TRANSVAR7=0
15#TRANSVAR8=0
16#TRANSVAR9=true
20#TRANSVAR10=r + 1
21#TRANSVAR11=index[i]
22#TRANSVAR12=index[swap[i]]
31#TRANSVAR13=index[r]
37#TRANSVAR14=index[r]
45#TRANSVAR15=r
61#TRANSVAR16=FastMath.sqrt(c[ir][ir])
63#TRANSVAR17=1 / sqrt
64#TRANSVAR18=r + 1
65#TRANSVAR19=index[i]
66#TRANSVAR20=inverse * c[ii][ir]
69#TRANSVAR21=r + 1
70#TRANSVAR22=index[j]
71#TRANSVAR23=c[ii][ij] - e * b[j][r]
85#TRANSVAR24=0
86#TRANSVAR25=0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=0
14#TRANSVAR7=0
15#TRANSVAR8=true
18#TRANSVAR9=r
19#TRANSVAR10=r + 1
20#TRANSVAR11=index[i]
21#TRANSVAR12=index[swapR]
30#TRANSVAR13=index[r]
33#TRANSVAR14=b[r]
39#TRANSVAR15=index[r]
47#TRANSVAR16=r
63#TRANSVAR17=FastMath.sqrt(c[ir][ir])
65#TRANSVAR18=1 / sqrt
66#TRANSVAR19=1 / c[ir][ir]
67#TRANSVAR20=r + 1
68#TRANSVAR21=index[i]
69#TRANSVAR22=inverse * c[ii][ir]
72#TRANSVAR23=r + 1
73#TRANSVAR24=index[j]
74#TRANSVAR25=c[ii][ij] - e * b[j][r]
88#TRANSVAR26=0
89#TRANSVAR27=0
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
39#TRANSVAR17=0
41#TRANSVAR18=0.5 * (a + b)
42#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
43#TRANSVAR20=2 * tol1
46#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
48#TRANSVAR22=0
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
113#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=current
40#TRANSVAR18=0
42#TRANSVAR19=0.5 * (a + b)
43#TRANSVAR20=relativeThreshold * FastMath.abs(x) + absoluteThreshold
44#TRANSVAR21=2 * tol1
47#TRANSVAR22=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
52#TRANSVAR26=0
114#TRANSVAR27=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
31#Integer TRANSVAR9
32#TRANSVAR10=0
33#TRANSVAR11=i + tableau.getArtificialVariableOffset()
34#TRANSVAR12=tableau.getEntry(row,column)
50#TRANSVAR13=null
51#TRANSVAR14=tableau.getWidth()
52#Integer TRANSVAR15
53#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
32#Integer TRANSVAR9
33#TRANSVAR10=0
34#TRANSVAR11=i + tableau.getArtificialVariableOffset()
35#TRANSVAR12=tableau.getEntry(row,column)
53#TRANSVAR13=null
54#TRANSVAR14=tableau.getWidth()
55#Integer TRANSVAR15
56#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
11#TRANSVAR3=new double[len]
12#TRANSVAR4=0
14#TRANSVAR5=0
15#TRANSVAR6=a[i]
16#TRANSVAR7=SPLIT_FACTOR * ai
17#TRANSVAR8=ca - (ca - ai)
18#TRANSVAR9=ai - aHigh
20#TRANSVAR10=b[i]
21#TRANSVAR11=SPLIT_FACTOR * bi
22#TRANSVAR12=cb - (cb - bi)
23#TRANSVAR13=bi - bHigh
25#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
33#TRANSVAR15=prodHigh[0]
34#TRANSVAR16=prodHigh[1]
35#TRANSVAR17=prodHighCur + prodHighNext
36#TRANSVAR18=sHighPrev - prodHighNext
37#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
39#TRANSVAR20=len - 1
40#TRANSVAR21=1
42#TRANSVAR22=sHighPrev + prodHighNext
48#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
54#TRANSVAR24=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
14#TRANSVAR3=new double[len]
15#TRANSVAR4=0
17#TRANSVAR5=0
18#TRANSVAR6=a[i]
19#TRANSVAR7=SPLIT_FACTOR * ai
20#TRANSVAR8=ca - (ca - ai)
21#TRANSVAR9=ai - aHigh
23#TRANSVAR10=b[i]
24#TRANSVAR11=SPLIT_FACTOR * bi
25#TRANSVAR12=cb - (cb - bi)
26#TRANSVAR13=bi - bHigh
28#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
36#TRANSVAR15=prodHigh[0]
37#TRANSVAR16=prodHigh[1]
38#TRANSVAR17=prodHighCur + prodHighNext
39#TRANSVAR18=sHighPrev - prodHighNext
40#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
42#TRANSVAR20=len - 1
43#TRANSVAR21=1
45#TRANSVAR22=sHighPrev + prodHighNext
51#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
57#TRANSVAR24=0
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=1.0
14#TRANSVAR8=1.0
15#TRANSVAR9=hPrev
16#TRANSVAR10=hPrev
19#TRANSVAR11=getA(n,x)
20#TRANSVAR12=getB(n,x)
22#TRANSVAR13=a * hPrev + b * p0
23#TRANSVAR14=a * q1 + b * dPrev
25#TRANSVAR15=1d
26#TRANSVAR16=1d
27#TRANSVAR17=5
28#TRANSVAR18=FastMath.max(a,b)
32#TRANSVAR19=0
48#TRANSVAR20=cN / q2 / cPrev
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=hPrev
14#TRANSVAR8=hPrev
17#TRANSVAR9=getA(n,x)
18#TRANSVAR10=getB(n,x)
20#TRANSVAR11=a + b * dPrev
24#TRANSVAR12=a + b / cPrev
30#TRANSVAR13=cN * dN
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt
83#TRANSVAR28=jpt
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt - 1
83#TRANSVAR28=jpt - 1
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
63#TRANSVAR16=1
65#TRANSVAR17=0
66#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
67#TRANSVAR19=1
78#TRANSVAR20=0
79#TRANSVAR21=b[0] * yDotK[0][j]
80#TRANSVAR22=1
90#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
116#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
118#TRANSVAR25=stepSize * factor
119#TRANSVAR26=stepStart + scaledH
120#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
123#TRANSVAR28=stepStart + hNew
124#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
72#TRANSVAR16=1
74#TRANSVAR17=0
75#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
76#TRANSVAR19=1
87#TRANSVAR20=0
88#TRANSVAR21=b[0] * yDotK[0][j]
89#TRANSVAR22=1
99#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
125#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
127#TRANSVAR25=stepSize * factor
128#TRANSVAR26=stepStart + scaledH
129#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
132#TRANSVAR28=stepStart + hNew
133#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
104#TRANSVAR15
105#TRANSVAR16=0
106#TRANSVAR17=nbPoints
142#TRANSVAR18=computeObjectiveValue(nextX)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
94#TRANSVAR15=agingA - MAXIMAL_AGING
95#TRANSVAR16=(1 << p) - 1
96#TRANSVAR17=p + 1
100#TRANSVAR18=agingB - MAXIMAL_AGING
101#TRANSVAR19=p + 1
102#TRANSVAR20=(1 << p) - 1
110#TRANSVAR21
111#TRANSVAR22=0
112#TRANSVAR23=nbPoints
148#TRANSVAR24=computeObjectiveValue(nextX)
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=begin
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
2#double TRANSVAR0
2#double TRANSVAR0
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
12#EventState TRANSVAR6
19#TRANSVAR7=interpolator.isForward() ? +1 : -1
20#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
23#EventState TRANSVAR9
23#EventState TRANSVAR10
29#final EventState TRANSVAR11
39#TRANSVAR12=occuringEvents.iterator()
40#TRANSVAR13=iterator.next()
44#TRANSVAR14=currentEvent.getEventTime()
50#TRANSVAR15=interpolator.getInterpolatedState()
55#final StepHandler TRANSVAR16
88#TRANSVAR17=interpolator.getInterpolatedState()
89#final EventState TRANSVAR18
96#StepHandler TRANSVAR19
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState()
54#final StepHandler TRANSVAR16
61#final EventState TRANSVAR17
73#final EventState TRANSVAR18
93#TRANSVAR19=interpolator.getInterpolatedState()
94#final EventState TRANSVAR20
101#StepHandler TRANSVAR21
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=(long)rowDimension
5#TRANSVAR3=(long)columnDimension
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
61#TRANSVAR10=FastMath.max(rtol * FastMath.abs(x1),atol)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
36#TRANSVAR21=Vector3D.crossProduct(v1,v2)
37#TRANSVAR22=v3.subtract(u3)
39#TRANSVAR23=u1.crossProduct(u3)
68#TRANSVAR24=1.0 / (c + c)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
33#TRANSVAR21=0.001
37#TRANSVAR22=Vector3D.crossProduct(v1,v2)
38#TRANSVAR23=v3.subtract(u3)
40#TRANSVAR24=u1.crossProduct(u3)
69#TRANSVAR25=1.0 / (c + c)
2#Complex TRANSVAR0
2#Complex TRANSVAR0
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
4#TRANSVAR2=v1.getNormSq()
5#TRANSVAR3=v2.getNormSq()
12#TRANSVAR4=(FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4
13#TRANSVAR5=FastMath.scalb(v1.x,-deltaExp)
14#TRANSVAR6=FastMath.scalb(v1.y,-deltaExp)
15#TRANSVAR7=FastMath.scalb(v1.z,-deltaExp)
16#TRANSVAR8=FastMath.scalb(v2.x,deltaExp)
17#TRANSVAR9=FastMath.scalb(v2.y,deltaExp)
18#TRANSVAR10=FastMath.scalb(v2.z,deltaExp)
27#TRANSVAR11=(x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2,2 * deltaExp)
28#TRANSVAR12=FastMath.rint(256 * ratio) / 256
30#TRANSVAR13=x1 - rho * x2
31#TRANSVAR14=y1 - rho * y2
32#TRANSVAR15=z1 - rho * z2
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
23#TRANSVAR6=1
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
2#final float TRANSVAR0
2#final float TRANSVAR1
2#final float TRANSVAR0
2#final float TRANSVAR1
2#double TRANSVAR0
3#TRANSVAR1=x - mean
7#MaxIterationsExceededException TRANSVAR2
2#double TRANSVAR0
3#TRANSVAR1=x - mean
2#double TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR0
2#double TRANSVAR1
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[cols]
20#TRANSVAR6=new double[cols]
21#TRANSVAR7=new double[cols]
28#TRANSVAR8=true
29#TRANSVAR9=new VectorialPointValuePair(point,objective)
34#TRANSVAR10=current
42#TRANSVAR11=0
43#TRANSVAR12=permutation[k]
52#TRANSVAR13=0
53#TRANSVAR14=jacNorm[k]
57#TRANSVAR15=dk * point[k]
69#TRANSVAR16=0
71#TRANSVAR17=0
72#TRANSVAR18=permutation[j]
73#TRANSVAR19=jacNorm[pj]
75#TRANSVAR20=0
76#TRANSVAR21=0
89#TRANSVAR22=0
94#TRANSVAR23=0
97#TRANSVAR24=0
98#TRANSVAR25=permutation[j]
101#TRANSVAR26=cost
102#TRANSVAR27=residuals
110#TRANSVAR28=0
111#TRANSVAR29=0
112#TRANSVAR30=permutation[j]
115#TRANSVAR31=diag[pj] * lmDir[pj]
129#TRANSVAR32=-1.0
131#TRANSVAR33=cost / previousCost
137#TRANSVAR34=0
138#TRANSVAR35=permutation[j]
139#TRANSVAR36=lmDir[pj]
141#TRANSVAR37=0
145#TRANSVAR38=0
146#TRANSVAR39=0
149#TRANSVAR40=previousCost * previousCost
151#TRANSVAR41=lmPar * lmNorm * lmNorm / pc2
152#TRANSVAR42=coeff1 + 2 * coeff2
153#TRANSVAR43=-(coeff1 + coeff2)
160#TRANSVAR44=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
177#TRANSVAR45=0
178#TRANSVAR46=diag[k] * point[k]
188#TRANSVAR47=0
189#TRANSVAR48=permutation[j]
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[rows]
20#TRANSVAR6=new double[rows]
21#TRANSVAR7=new double[cols]
22#TRANSVAR8=new double[cols]
23#TRANSVAR9=new double[cols]
30#TRANSVAR10=true
31#TRANSVAR11=new VectorialPointValuePair(point,objective)
33#TRANSVAR12=0
39#TRANSVAR13=current
47#TRANSVAR14=0
48#TRANSVAR15=permutation[k]
57#TRANSVAR16=0
58#TRANSVAR17=jacNorm[k]
62#TRANSVAR18=dk * point[k]
74#TRANSVAR19=0
76#TRANSVAR20=0
77#TRANSVAR21=permutation[j]
78#TRANSVAR22=jacNorm[pj]
80#TRANSVAR23=0
81#TRANSVAR24=0
96#TRANSVAR25=0
101#TRANSVAR26=0
104#TRANSVAR27=0
105#TRANSVAR28=permutation[j]
108#TRANSVAR29=cost
109#TRANSVAR30=residuals
120#TRANSVAR31=0
121#TRANSVAR32=0
122#TRANSVAR33=permutation[j]
125#TRANSVAR34=diag[pj] * lmDir[pj]
138#TRANSVAR35=-1.0
140#TRANSVAR36=cost / previousCost
146#TRANSVAR37=0
147#TRANSVAR38=permutation[j]
148#TRANSVAR39=lmDir[pj]
150#TRANSVAR40=0
154#TRANSVAR41=0
155#TRANSVAR42=0
158#TRANSVAR43=previousCost * previousCost
160#TRANSVAR44=lmPar * lmNorm * lmNorm / pc2
161#TRANSVAR45=coeff1 + 2 * coeff2
162#TRANSVAR46=-(coeff1 + coeff2)
169#TRANSVAR47=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
186#TRANSVAR48=0
187#TRANSVAR49=diag[k] * point[k]
203#TRANSVAR50=0
204#TRANSVAR51=permutation[j]
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
56#final StepHandler TRANSVAR16
63#final EventState TRANSVAR17
69#TRANSVAR18=currentEvent.reset(eventT,eventY)
76#final EventState TRANSVAR19
97#TRANSVAR20=interpolator.getInterpolatedState()
98#final EventState TRANSVAR21
105#StepHandler TRANSVAR22
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
52#final EventState TRANSVAR16
58#final StepHandler TRANSVAR17
68#TRANSVAR18=false
69#final EventState TRANSVAR19
96#TRANSVAR20=interpolator.getInterpolatedState()
97#final EventState TRANSVAR21
104#StepHandler TRANSVAR22
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18
70#TRANSVAR19=1
72#TRANSVAR20=0
73#TRANSVAR21=a[k - 1][0] * yDotK[0][j]
74#TRANSVAR22=1
85#TRANSVAR23=0
86#TRANSVAR24=b[0] * yDotK[0][j]
87#TRANSVAR25=1
100#TRANSVAR26=manager.getEventTime() - stepStart
115#TRANSVAR27=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
124#TRANSVAR28=stepStart + stepSize
131#StepHandler TRANSVAR29
154#TRANSVAR30=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
157#TRANSVAR31=stepSize * factor
158#TRANSVAR32=stepStart + scaledH
159#TRANSVAR33=forward ? (nextT >= t) : (nextT <= t)
165#TRANSVAR34=stepStart
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18=new double[y0.length]
57#TRANSVAR19=0
61#TRANSVAR20=0
73#TRANSVAR21=1
75#TRANSVAR22=0
76#TRANSVAR23=a[k - 1][0] * yDotK[0][j]
77#TRANSVAR24=1
88#TRANSVAR25=0
89#TRANSVAR26=b[0] * yDotK[0][j]
90#TRANSVAR27=1
103#TRANSVAR28=manager.getEventTime() - stepStart
118#TRANSVAR29=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
127#TRANSVAR30=stepStart + stepSize
134#StepHandler TRANSVAR31
157#TRANSVAR32=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
160#TRANSVAR33=stepSize * factor
161#TRANSVAR34=stepStart + scaledH
162#TRANSVAR35=forward ? (nextT >= t) : (nextT <= t)
168#TRANSVAR36=stepStart
2#Object TRANSVAR0
2#Object TRANSVAR0
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
38#TRANSVAR9=new UnivariateRealFunction(){
  public double methodName(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

39#final double TRANSVAR10
43#DerivativeException TRANSVAR11
45#EventException TRANSVAR12
50#TRANSVAR13=new BrentSolver()
53#TRANSVAR14=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
88#FunctionEvaluationException TRANSVAR15
89#TRANSVAR16=e.getCause()
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
34#TRANSVAR9=(forward ? 0.25 : -0.25) * convergence
35#TRANSVAR10=0
49#TRANSVAR11=new UnivariateRealFunction(){
  public double methodName(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

50#final double TRANSVAR12
54#DerivativeException TRANSVAR13
56#EventException TRANSVAR14
61#TRANSVAR15=new BrentSolver()
64#TRANSVAR16=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
99#FunctionEvaluationException TRANSVAR17
100#TRANSVAR18=e.getCause()
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int TRANSVAR0
8#TRANSVAR1=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize)
10#TRANSVAR2=0
2#int TRANSVAR0
8#TRANSVAR1=new Object[sampleSize]
10#TRANSVAR2=0
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * n - 1
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * (n - 1)
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final Comparator<RealPointValuePair> TRANSVAR0
10#TRANSVAR1=simplex
11#TRANSVAR2=original[0]
14#TRANSVAR3=evaluateNewSimplex(original,1.0,comparator)
18#TRANSVAR4=simplex
19#TRANSVAR5=evaluateNewSimplex(original,khi,comparator)
30#TRANSVAR6=evaluateNewSimplex(original,gamma,comparator)
2#final Comparator<RealPointValuePair> TRANSVAR0
5#TRANSVAR1=getConvergenceChecker()
11#TRANSVAR2=simplex
12#TRANSVAR3=original[0]
15#TRANSVAR4=evaluateNewSimplex(original,1.0,comparator)
19#TRANSVAR5=simplex
20#TRANSVAR6=evaluateNewSimplex(original,khi,comparator)
31#TRANSVAR7=evaluateNewSimplex(original,gamma,comparator)
38#TRANSVAR8=getIterations()
39#TRANSVAR9=true
40#TRANSVAR10=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
27#TRANSVAR6=i + 1
28#TRANSVAR7=lTData[j]
29#TRANSVAR8=lI[j]
30#TRANSVAR9=lJ[i]
31#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
41#TRANSVAR11=0
43#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
24#TRANSVAR6=i + 1
25#TRANSVAR7=lTData[j]
26#TRANSVAR8=lI[j]
27#TRANSVAR9=lJ[i]
28#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
38#TRANSVAR11=0
40#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=0
15#TRANSVAR4=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=0
2#Object TRANSVAR0
2#Object TRANSVAR0
3#TRANSVAR0=new Line(zero,zero.subtract(direction))
3#TRANSVAR0=new Line(this)
2#Object TRANSVAR0
14#TRANSVAR1=v
19#TRANSVAR2=(Long)freqTable.get(obj)
25#ClassCastException TRANSVAR3
2#Object TRANSVAR0
2#Fraction TRANSVAR0
3#TRANSVAR1=doubleValue()
4#TRANSVAR2=object.doubleValue()
2#Fraction TRANSVAR0
3#TRANSVAR1=((long)numerator) * object.denominator
4#TRANSVAR2=((long)denominator) * object.numerator
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#double TRANSVAR0
3#TRANSVAR1
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#double TRANSVAR0
3#TRANSVAR1=1.0
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
8#TRANSVAR2=0
9#TRANSVAR3=matchers.get(position)
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
5#TRANSVAR2=0
6#TRANSVAR3=matchers.get(position)
11#TRANSVAR4=indexOfVararg
12#TRANSVAR5=matchers.get(position)
19#TRANSVAR6=0
20#TRANSVAR7=matchers.get(position)
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
31#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
34#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
40#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
33#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
36#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
42#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=null
13#TRANSVAR4=(MockMethodInterceptor.MockAccess)mockInstance
17#ClassCastException TRANSVAR5
28#org.mockito.internal.creation.instance.InstantiationException TRANSVAR6
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=new InstantiatorProvider().getInstantiator(settings)
11#TRANSVAR4=null
14#TRANSVAR5=(MockMethodInterceptor.MockAccess)mockInstance
18#ClassCastException TRANSVAR6
29#org.mockito.internal.creation.instance.InstantiationException TRANSVAR7
2#Object TRANSVAR0
2#Object TRANSVAR1
2#Object TRANSVAR0
2#Object TRANSVAR1
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=new MockHandler<T>(oldMockHandler)
5#TRANSVAR3=new MethodInterceptorFilter(newMockHandler,(MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS))
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=newMethodInterceptorFilter(oldMockHandler.getMockSettings())
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
4#TRANSVAR4=mockCandidateFilter.filterCandidate(mocks,field,fieldInstance).thenInject()
2#Description TRANSVAR0
2#Description TRANSVAR0
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
10#TRANSVAR3=m1.getParameterTypes()
11#TRANSVAR4=m2.getParameterTypes()
13#TRANSVAR5=0
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#org.mockito.exceptions.verification.junit.ArgumentsAreDifferent TRANSVAR3
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#AssertionError TRANSVAR3
3#Type TRANSVAR0
3#Type TRANSVAR0
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=0L
11#TRANSVAR5=0
11#TRANSVAR6=partial.size()
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=partial.getValue(0) - 1
11#TRANSVAR5=((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1
15#TRANSVAR6=0L
16#TRANSVAR7=0
16#TRANSVAR8=partial.size()
2#long TRANSVAR0
2#int TRANSVAR1
11#TRANSVAR2=val1 * val2
2#long TRANSVAR0
2#int TRANSVAR1
14#TRANSVAR2=val1 * val2
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,iDefaultYear)
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,chrono.year().get(instantLocal))
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR)
7#TRANSVAR3=convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR)
13#TRANSVAR4=convertUTCToLocal(instant)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=instant - 3 * DateTimeConstants.MILLIS_PER_HOUR
7#TRANSVAR3=instant + 3 * DateTimeConstants.MILLIS_PER_HOUR
8#TRANSVAR4=getOffset(instantBefore)
9#TRANSVAR5=getOffset(instantAfter)
15#TRANSVAR6=offsetBefore - offsetAfter
16#TRANSVAR7=nextTransition(instantBefore)
17#TRANSVAR8=transition - diff
18#TRANSVAR9=transition + diff
24#TRANSVAR10=instant - overlapStart
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
20#IllegalFieldValueException TRANSVAR9
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#String TRANSVAR4
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#TRANSVAR4=null
5#String TRANSVAR5
2#long TRANSVAR0
2#long TRANSVAR0
6#TRANSVAR1=ISOChronology.getInstanceUTC().get(this,duration)
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
26#IllegalFieldValueException TRANSVAR9
36#TRANSVAR10=iZone.getOffsetFromLocal(millis)
39#TRANSVAR11="Illegal instant due to time zone offset transition (" + iZone + ')'
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
27#TRANSVAR9=0
31#IllegalFieldValueException TRANSVAR10
41#TRANSVAR11=iZone.getOffsetFromLocal(millis)
44#TRANSVAR12="Illegal instant due to time zone offset transition (" + iZone + ')'
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
9#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
13#TRANSVAR6=createComposite(elementPairs)
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
10#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
15#TRANSVAR6=createComposite(elementPairs)
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(iChronology,newTypes,newValues)
47#TRANSVAR13=getValues()
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(newTypes,newValues,iChronology)
47#TRANSVAR13=getValues()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
14#TRANSVAR5=years * 12L + months
16#TRANSVAR6=FieldUtils.safeToInt(totalMonths / 12)
21#TRANSVAR7=FieldUtils.safeToInt(totalMonths)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
12#TRANSVAR7=chrono.year().get(instantLocal)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=DateTimeUtils.getChronology(chrono).year().get(instantMillis)
11#TRANSVAR7=instantMillis + chrono.getZone().getOffset(instantMillis)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#int TRANSVAR0
2#int TRANSVAR1
12#TRANSVAR2=0
14#TRANSVAR3=hoursOffset * 60
21#ArithmeticException TRANSVAR4
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
17#TRANSVAR3=hoursOffset * 60
24#ArithmeticException TRANSVAR4
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
2#String TRANSVAR0
2#String TRANSVAR0
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p1.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p2.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth() - w[2]),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,Math.max(constraint.getWidth() - w[2],0.0)),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
3#TRANSVAR0=createCopy(0,getItemCount() - 1)
3#TRANSVAR0=(TimeSeries)super.clone()
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
102#TRANSVAR37=owner.getEntityCollection()
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
103#TRANSVAR37=owner.getEntityCollection()
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
13#TRANSVAR3=start
14#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
16#TRANSVAR5=(TimeSeriesDataItem)item.clone()
20#SeriesException TRANSVAR6
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
15#TRANSVAR3=start
16#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
18#TRANSVAR5=(TimeSeriesDataItem)item.clone()
22#SeriesException TRANSVAR6
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
70#TRANSVAR14=r.getAnnotations()
71#TRANSVAR15=c.iterator()
73#TRANSVAR16=(XYAnnotation)i.next()
81#TRANSVAR17=includedAnnotations.iterator()
83#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
71#TRANSVAR14=r.getAnnotations()
72#TRANSVAR15=c.iterator()
74#TRANSVAR16=(XYAnnotation)i.next()
83#TRANSVAR17=includedAnnotations.iterator()
85#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#Number TRANSVAR0
2#Number TRANSVAR1
8#TRANSVAR2=null
9#TRANSVAR3=indexOf(x)
11#TRANSVAR4=(XYDataItem)this.data.get(index)
15#CloneNotSupportedException TRANSVAR5
2#Number TRANSVAR0
2#Number TRANSVAR1
12#TRANSVAR2=null
13#TRANSVAR3=indexOf(x)
15#TRANSVAR4=(XYDataItem)this.data.get(index)
19#CloneNotSupportedException TRANSVAR5
2#Object TRANSVAR0
2#Object TRANSVAR0
10#TRANSVAR1=(ShapeList)obj
11#TRANSVAR2=size()
12#TRANSVAR3=0
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
22#TRANSVAR3=valueList.size()
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
2#String TRANSVAR0
2#boolean TRANSVAR1
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
19#TRANSVAR5=token.indexOf('=')
20#TRANSVAR6=pos == -1 ? token : token.substring(0,pos)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
21#TRANSVAR6=pos
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
24#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#String TRANSVAR0
5#TRANSVAR1=new Option(opt,description)
2#String TRANSVAR0
4#TRANSVAR1=null
2#Option TRANSVAR0
2#Option TRANSVAR0
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#String TRANSVAR0
8#TRANSVAR1=str.length()
2#String TRANSVAR0
4#TRANSVAR1=str.length()
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
10#String TRANSVAR2
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
13#String TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer()
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR0
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#Scope TRANSVAR0
13#TRANSVAR1=fnScope.getRootNode()
21#TRANSVAR2=getFunctionArgList(function)
22#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
26#TRANSVAR4
28#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Scope TRANSVAR0
16#TRANSVAR1=fnScope.getRootNode()
24#TRANSVAR2=getFunctionArgList(function)
25#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
29#TRANSVAR4
31#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Node TRANSVAR0
2#boolean TRANSVAR1
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
2#Node TRANSVAR0
2#Node TRANSVAR1
5#TRANSVAR2=new MakeDeclaredNamesUnique()
6#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#Node TRANSVAR0
2#Node TRANSVAR1
6#TRANSVAR2=new MakeDeclaredNamesUnique()
7#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=new StringBuilder()
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
49#TRANSVAR12=InlineCostEstimator.getCost(n)
52#TRANSVAR13=Node.newString("")
57#TRANSVAR14=arrayFoldedChildren.remove(0)
65#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
77#TRANSVAR16="[].join()".length()
84#Node TRANSVAR17
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=null
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
51#TRANSVAR12=InlineCostEstimator.getCost(n)
54#TRANSVAR13=Node.newString("")
59#TRANSVAR14=arrayFoldedChildren.remove(0)
67#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
79#TRANSVAR16="[].join()".length()
86#Node TRANSVAR17
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
2#JsDocToken TRANSVAR0
2#JsDocToken TRANSVAR0
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#JSType TRANSVAR0
2#JSType TRANSVAR0
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=inferTemplateTypesFromParameters(fnType,n)
17#TRANSVAR4=new TemplateTypeReplacer(registry,inferred)
19#TRANSVAR5=n.getFirstChild()
21#TRANSVAR6=fnType.visit(replacer).toMaybeFunctionType()
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=Maps.filterKeys(inferTemplateTypesFromParameters(fnType,n),new Predicate<TemplateType>(){
  @Override public boolean methodName(  TemplateType key){
    return keys.contains(key);
  }
}
)
16#TemplateType TRANSVAR4
23#TRANSVAR5=new TemplateTypeReplacer(registry,inferred)
25#TRANSVAR6=n.getFirstChild()
27#TRANSVAR7=fnType.visit(replacer).toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
19#TRANSVAR5=callNode.getFirstChild().getNext()
38#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
11#TRANSVAR3=callNode.getFirstChild().getNext()
30#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
12#TRANSVAR3=callNode.getFirstChild().getNext()
31#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
21#TRANSVAR5=callNode.getFirstChild().getNext()
40#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
2#Node TRANSVAR0
2#boolean TRANSVAR1
10#TRANSVAR2=getJSType(n.getFirstChild()).dereference()
12#TRANSVAR3=n.getLastChild().getString()
34#TRANSVAR4=getJSType(n)
36#TRANSVAR5=type.dereference()
46#TRANSVAR6=n.getQualifiedName()
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR2=getJSType(n)
5#TRANSVAR3=type.dereference()
22#TRANSVAR4=getJSType(n.getFirstChild()).dereference()
24#TRANSVAR5=n.getLastChild().getString()
46#TRANSVAR6=n.getQualifiedName()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
9#TRANSVAR3=child.getString()
10#TRANSVAR4=typeSystem.getType(getScope(),n,name)
12#TRANSVAR5=getProperty(name)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
12#TRANSVAR3=child.getString()
13#TRANSVAR4=typeSystem.getType(getScope(),n,name)
15#TRANSVAR5=getProperty(name)
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
3#TRANSVAR1=getCfg().getOutEdges(cfgNode)
4#DiGraphEdge<Node,Branch> TRANSVAR2
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
56#TRANSVAR11=referenceInfo.references
57#TRANSVAR12=1
58#TRANSVAR13=refs.get(i).getNode()
60#TRANSVAR14=aliasCandidates.get(nameNode)
63#TRANSVAR15
65#TRANSVAR16=aliasInit.getAssignedValue()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
58#TRANSVAR11=referenceInfo.references
59#TRANSVAR12=1
60#TRANSVAR13=refs.get(i).getNode()
62#TRANSVAR14=aliasCandidates.get(nameNode)
65#TRANSVAR15
67#TRANSVAR16=aliasInit.getAssignedValue()
2#Comment TRANSVAR0
2#Comment TRANSVAR0
3#TRANSVAR1=Pattern.compile("(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]")
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=Context.OTHER
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=getContextForNoInOperator(context)
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
38#TRANSVAR9=n.getLastChild()
45#TRANSVAR10=n.getLastChild()
60#Node TRANSVAR11
64#TRANSVAR12=c
65#TRANSVAR13
65#TRANSVAR14
90#TRANSVAR15=n.getLastChild()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
41#TRANSVAR9=n.getLastChild()
56#Node TRANSVAR10
60#TRANSVAR11=c
61#TRANSVAR12
61#TRANSVAR13
86#TRANSVAR14=n.getLastChild()
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
7#TRANSVAR2=0
8#TRANSVAR3=s.charAt(index)
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
16#TRANSVAR3=c.getNext()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
15#TRANSVAR3=c.getNext()
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#String TRANSVAR0
3#TRANSVAR1=s.length()
10#TRANSVAR2=1
2#String TRANSVAR0
3#TRANSVAR1=s.length()
11#TRANSVAR2=1
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
151#TRANSVAR22=thenOp.removeFirstChild()
152#TRANSVAR23=thenOp.removeFirstChild()
153#TRANSVAR24=elseOp.getLastChild()
156#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
157#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
159#TRANSVAR27=NodeUtil.newExpr(assign)
171#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
178#TRANSVAR29=isVarBlock(thenBranch)
179#TRANSVAR30=isVarBlock(elseBranch)
185#TRANSVAR31=getBlockVar(thenBranch)
186#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
188#TRANSVAR33=var.getFirstChild()
189#TRANSVAR34=elseAssign.getFirstChild()
194#TRANSVAR35=name1.removeChildren()
195#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
197#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
210#TRANSVAR38=getBlockVar(elseBranch)
211#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
213#TRANSVAR40=thenAssign.getFirstChild()
214#TRANSVAR41=var.getFirstChild()
219#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
220#TRANSVAR43=name2.removeChildren()
222#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
153#TRANSVAR22=thenOp.removeFirstChild()
154#TRANSVAR23=thenOp.removeFirstChild()
155#TRANSVAR24=elseOp.getLastChild()
158#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
159#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
161#TRANSVAR27=NodeUtil.newExpr(assign)
173#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
180#TRANSVAR29=isVarBlock(thenBranch)
181#TRANSVAR30=isVarBlock(elseBranch)
187#TRANSVAR31=getBlockVar(thenBranch)
188#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
190#TRANSVAR33=var.getFirstChild()
191#TRANSVAR34=elseAssign.getFirstChild()
196#TRANSVAR35=name1.removeChildren()
197#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
199#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
212#TRANSVAR38=getBlockVar(elseBranch)
213#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
215#TRANSVAR40=thenAssign.getFirstChild()
216#TRANSVAR41=var.getFirstChild()
221#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
222#TRANSVAR43=name2.removeChildren()
224#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR0
4#TRANSVAR1=n.getLastChild()
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
12#TRANSVAR2=getNativeType(JSTypeNative.NO_TYPE)
2#Node TRANSVAR0
21#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
24#TRANSVAR1=n.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
13#TRANSVAR2=false
14#TRANSVAR3=ImmutableList.builder()
16#ObjectType TRANSVAR4
17#TRANSVAR5=(ObjectType)iface.resolve(t,scope)
26#TRANSVAR6=0
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
11#TRANSVAR2=safeResolve(typeOfThis,t,scope)
16#TRANSVAR3=false
17#TRANSVAR4=ImmutableList.builder()
19#ObjectType TRANSVAR5
20#TRANSVAR6=(ObjectType)iface.resolve(t,scope)
29#TRANSVAR7=0
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
7#TRANSVAR2=node.getFirstChild()
13#TRANSVAR3=node.getFirstChild()
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
12#TRANSVAR2=node.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
44#TRANSVAR3=new ComposeWarningsGuard(guards)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
14#TRANSVAR4=right.getDouble()
15#TRANSVAR5=(int)index
26#TRANSVAR6=left.getFirstChild()
27#TRANSVAR7=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=0
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
50#TRANSVAR8=thisIsVarArgs || thisParam.isOptionalArg()
51#TRANSVAR9=thatIsVarArgs || thatParam.isOptionalArg()
60#TRANSVAR10=thatIsVarArgs && (thatParamType == null || thatParamType.isUnknownType() || thatParamType.isNoType())
2#JSType TRANSVAR0
2#JSType TRANSVAR0
20#JSType TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
36#TRANSVAR5=rValue.getFirstChild()
37#TRANSVAR6=firstClause.getNext()
38#TRANSVAR7=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
26#TRANSVAR5=rValue.getJSDocInfo()
40#TRANSVAR6=rValue.getFirstChild()
41#TRANSVAR7=firstClause.getNext()
42#TRANSVAR8=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
14#TRANSVAR5=true
31#TRANSVAR6=n.getParent()
41#TRANSVAR7=getFunctionAnalysisResults(scope.getRootNode())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
11#TRANSVAR5=qName.substring(0,qName.lastIndexOf(".prototype"))
12#TRANSVAR6=scope.getSlot(className)
13#TRANSVAR7=slot == null ? null : slot.getType()
20#TRANSVAR8=true
37#TRANSVAR9=n.getParent()
47#TRANSVAR10=getFunctionAnalysisResults(scope.getRootNode())
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=left.hasChildren()
27#TRANSVAR7=!isVarDeclaration || var == null || var.isTypeInferred()
47#TRANSVAR8=var.getType()
53#TRANSVAR9=left.getQualifiedName()
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=var == null ? null : var.getType()
10#TRANSVAR7=left.hasChildren() && varType != null && !var.isTypeInferred()
29#TRANSVAR8=isVarDeclaration && !resultType.isNullType() && !resultType.isVoidType()
51#TRANSVAR9=var.getType()
57#TRANSVAR10=left.getQualifiedName()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
11#String TRANSVAR8
12#TRANSVAR9=properties.get(name)
24#ObjectType TRANSVAR10
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
15#String TRANSVAR8
16#TRANSVAR9=properties.get(name)
28#ObjectType TRANSVAR10
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
15#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
36#Node TRANSVAR5
37#TRANSVAR6=an.getType()
50#TRANSVAR7="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
20#TRANSVAR3=parent.getParent()
30#Node TRANSVAR4
31#TRANSVAR5=an.getType()
48#TRANSVAR6=NodeUtil.isExpressionResultUsed(n)
49#TRANSVAR7=NodeUtil.isSimpleOperatorType(n.getType())
57#TRANSVAR8="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
4#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
26#TRANSVAR6=constructor.getNext()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
5#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#Reference TRANSVAR2
5#TRANSVAR3=ref.getNode()
6#TRANSVAR4=ref.getParent()
7#TRANSVAR5=ref.getGrandparent()
36#TRANSVAR6=ref.getAssignedValue()
55#TRANSVAR7=val.getFirstChild()
64#TRANSVAR8=child.getFirstChild()
68#Reference TRANSVAR9
69#TRANSVAR10=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
29#TRANSVAR7=parent.getLastChild().getString()
45#TRANSVAR8=ref.getAssignedValue()
64#TRANSVAR9=val.getFirstChild()
74#TRANSVAR10=child.getFirstChild()
78#Reference TRANSVAR11
79#TRANSVAR12=t.getParent()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
53#CompilerInput TRANSVAR5
56#String TRANSVAR6
66#CircularDependencyException TRANSVAR7
74#MissingProvideException TRANSVAR8
85#CompilerInput TRANSVAR9
86#TRANSVAR10=input.getAstRoot(this)
94#TRANSVAR11=n.getJSDocInfo()
119#CompilerInput TRANSVAR12
120#TRANSVAR13=input.getAstRoot(this)
137#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
52#CompilerInput TRANSVAR5
55#String TRANSVAR6
65#CircularDependencyException TRANSVAR7
73#MissingProvideException TRANSVAR8
84#CompilerInput TRANSVAR9
85#TRANSVAR10=input.getAstRoot(this)
93#TRANSVAR11=n.getJSDocInfo()
118#CompilerInput TRANSVAR12
119#TRANSVAR13=input.getAstRoot(this)
136#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
70#TRANSVAR7=builder.toString()
76#TRANSVAR8=stream.getLineno()
77#TRANSVAR9=stream.getCharno()
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
31#TRANSVAR7=-1
65#TRANSVAR8=token == JsDocToken.EOC
68#TRANSVAR9=stream.getCharno() - lineStartChar
69#TRANSVAR10=0
85#TRANSVAR11=builder.toString()
91#TRANSVAR12=stream.getLineno()
92#TRANSVAR13=stream.getCharno()
2#ObjectType TRANSVAR0
15#String TRANSVAR1
16#TRANSVAR2=constraintObj.getPropertyType(prop)
18#TRANSVAR3=propType
2#ObjectType TRANSVAR0
18#String TRANSVAR1
19#TRANSVAR2=constraintObj.getPropertyType(prop)
21#TRANSVAR3=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
11#TRANSVAR3=ObjectType.cast(type.restrictByNotNullOrUndefined())
13#String TRANSVAR4
14#TRANSVAR5=constraintObj.getPropertyType(prop)
16#TRANSVAR6=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,false)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,true)
2#ForInLoop TRANSVAR0
2#ForInLoop TRANSVAR0
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
115#TRANSVAR13=getObjectSlot(ownerName)
119#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
134#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
137#TRANSVAR16=ownerType.getTypeOfThis()
138#TRANSVAR17=codingConvention.getDelegateSuperclassName()
139#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
118#TRANSVAR13=getObjectSlot(ownerName)
122#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
137#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
140#TRANSVAR16=ownerType.getTypeOfThis()
141#TRANSVAR17=codingConvention.getDelegateSuperclassName()
142#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
32#TRANSVAR7=parent.getLastChild().getString()
48#TRANSVAR8=ref.getAssignedValue()
67#TRANSVAR9=val.getFirstChild()
77#TRANSVAR10=child.getFirstChild()
81#Reference TRANSVAR11
82#TRANSVAR12=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
35#TRANSVAR7=parent.getLastChild().getString()
51#TRANSVAR8=ref.getAssignedValue()
70#TRANSVAR9=val.getFirstChild()
80#TRANSVAR10=child.getFirstChild()
84#Reference TRANSVAR11
85#TRANSVAR12=t.getParent()
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
26#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
27#TRANSVAR6=Lists.newLinkedList()
28#TRANSVAR7=null
29#TRANSVAR8=0
30#TRANSVAR9=null
31#TRANSVAR10=arrayNode.getFirstChild()
67#TRANSVAR11=InlineCostEstimator.getCost(n)
70#TRANSVAR12=Node.newString("")
75#TRANSVAR13=arrayFoldedChildren.remove(0)
83#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
96#TRANSVAR15="[].join()".length()
103#Node TRANSVAR16
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
31#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
32#TRANSVAR6=Lists.newLinkedList()
33#TRANSVAR7=null
34#TRANSVAR8=0
35#TRANSVAR9=null
36#TRANSVAR10=arrayNode.getFirstChild()
72#TRANSVAR11=InlineCostEstimator.getCost(n)
75#TRANSVAR12=Node.newString("")
80#TRANSVAR13=arrayFoldedChildren.remove(0)
88#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
101#TRANSVAR15="[].join()".length()
108#Node TRANSVAR16
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
39#TRANSVAR11=replacement
40#TRANSVAR12
43#TRANSVAR13=new Node(Token.COMMA)
50#TRANSVAR14=ref.getParent()
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
42#TRANSVAR11=replacement
43#TRANSVAR12
46#TRANSVAR13=new Node(Token.COMMA)
54#TRANSVAR14=ref.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
37#TRANSVAR6=n.getFirstChild()
71#TRANSVAR7=n.getFirstChild()
81#TRANSVAR8=n.getFirstChild()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
41#TRANSVAR6=n.getFirstChild()
75#TRANSVAR7=n.getFirstChild()
85#TRANSVAR8=n.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
44#TRANSVAR2=Lists.newArrayList()
50#TRANSVAR3=new ComposeWarningsGuard(guards)
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
45#TRANSVAR2=Lists.newArrayList()
51#TRANSVAR3=new ComposeWarningsGuard(guards)
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
42#TRANSVAR4=nameNode.getNext()
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
35#TRANSVAR4=nameNode.getFirstChild().getString()
48#TRANSVAR5=nameNode.getNext()
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
149#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
150#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
151#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
169#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
170#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
199#TRANSVAR14="left side of comparison"
272#TRANSVAR15=getJSType(parent.getFirstChild())
273#TRANSVAR16=getJSType(n.getFirstChild())
279#TRANSVAR17=n.getFirstChild()
334#Node TRANSVAR18
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
151#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
152#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
153#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
171#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
172#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
201#TRANSVAR14="left side of comparison"
274#TRANSVAR15=getJSType(parent.getFirstChild())
275#TRANSVAR16=getJSType(n.getFirstChild())
281#TRANSVAR17=n.getFirstChild()
336#Node TRANSVAR18
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=parent.getJSDocInfo() != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
29#TRANSVAR9="/script"
32#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
73#TRANSVAR8=Node.newNumber(result)
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
71#TRANSVAR8=Node.newNumber(result)
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
10#TRANSVAR3=newNode(Token.FUNCTION)
11#TRANSVAR4=transform(name)
19#TRANSVAR5=functionNode.getAbsolutePosition() + functionNode.getLp()
25#TRANSVAR6=newNode(Token.LP)
32#TRANSVAR7=functionNode.getFunctionName()
38#TRANSVAR8=functionNode.getLp() + functionNode.getAbsolutePosition()
42#AstNode TRANSVAR9
47#TRANSVAR10=transform(functionNode.getBody())
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
6#TRANSVAR3=functionNode.getFunctionType()
17#TRANSVAR4=newNode(Token.FUNCTION)
18#TRANSVAR5=transform(name)
26#TRANSVAR6=functionNode.getAbsolutePosition() + functionNode.getLp()
32#TRANSVAR7=newNode(Token.LP)
39#TRANSVAR8=functionNode.getFunctionName()
45#TRANSVAR9=functionNode.getLp() + functionNode.getAbsolutePosition()
49#AstNode TRANSVAR10
54#TRANSVAR11=transform(functionNode.getBody())
2#Parameters TRANSVAR0
3#TRANSVAR1=params.getParameter(0)
9#TRANSVAR2=param.toLowerCase()
2#Parameters TRANSVAR0
3#TRANSVAR1=null
6#CmdLineException TRANSVAR2
12#TRANSVAR3=param.toLowerCase()
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
14#TRANSVAR2=maybeExpr.getFirstChild().getFirstChild()
3#Node TRANSVAR0
3#String TRANSVAR1
16#TRANSVAR2=n.getFirstChild()
19#TRANSVAR3=isVariableReadBeforeKill(child,variable)
3#Node TRANSVAR0
3#String TRANSVAR1
10#TRANSVAR2=n.getNext()
11#TRANSVAR3=isVariableReadBeforeKill(rhs,variable)
22#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=isVariableReadBeforeKill(child,variable)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
38#TRANSVAR5=parent.getFirstChild()
39#TRANSVAR6=lhs.getNext()
56#TRANSVAR7=lhs.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
35#TRANSVAR5=parent.getParent()
37#TRANSVAR6=gramps.getJSDocInfo()
47#TRANSVAR7=parent.getFirstChild()
48#TRANSVAR8=lhs.getNext()
65#TRANSVAR9=lhs.getFirstChild()
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.indexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.lastIndexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
35#TRANSVAR7=scopeToDeclareIn.getVar(variableName)
42#TRANSVAR8=compiler.getInput(sourceName)
46#TRANSVAR9=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
48#TRANSVAR10=input.isExtern()
63#TRANSVAR11=(FunctionType)type
65#TRANSVAR12=fnType.getSuperClassConstructor()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
31#TRANSVAR7=scope.getGlobalScope()
42#TRANSVAR8=scopeToDeclareIn.getVar(variableName)
49#TRANSVAR9=compiler.getInput(sourceName)
53#TRANSVAR10=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
55#TRANSVAR11=input.isExtern()
70#TRANSVAR12=(FunctionType)type
72#TRANSVAR13=fnType.getSuperClassConstructor()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
23#TRANSVAR8=call.getChildCount() - 1
24#TRANSVAR9=functionType.getMinArguments()
25#TRANSVAR10=functionType.getMaxArguments()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
26#TRANSVAR8=call.getChildCount() - 1
27#TRANSVAR9=functionType.getMinArguments()
28#TRANSVAR10=functionType.getMaxArguments()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
55#TRANSVAR8=Node.newNumber(result)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
48#TRANSVAR8=lvalInt & 0xffffffffL
56#TRANSVAR9=Node.newNumber(result)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
20#TRANSVAR4=parent.getType()
30#TRANSVAR5=parent.getFirstChild()
31#TRANSVAR6=lhs.getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
21#TRANSVAR4=parent.getType()
31#TRANSVAR5=parent.getFirstChild()
32#TRANSVAR6=lhs.getNext()
49#TRANSVAR7=lhs.getFirstChild()
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=str.charAt(index - 1)
9#TRANSVAR4=str.charAt(index - 2)
10#TRANSVAR5=this.map(preHWChar)
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=index - 1
8#TRANSVAR4=str.charAt(i)
2#final byte[] TRANSVAR0
2#final byte[] TRANSVAR0
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
29#TRANSVAR3=new byte[doEncode ? 4096 : 8192]
30#TRANSVAR4=in.read(buf)
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
12#TRANSVAR3=0
31#TRANSVAR4=new byte[doEncode ? 4096 : 8192]
32#TRANSVAR5=in.read(buf)
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,MIME_CHUNK_SIZE,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,isChunked ? MIME_CHUNK_SIZE : 0,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#ZipArchiveEntry TRANSVAR1
10#TRANSVAR2=entries.get(ze)
11#TRANSVAR3=offsetEntry.headerOffset
13#TRANSVAR4=new byte[SHORT]
15#TRANSVAR5=ZipShort.getValue(b)
17#TRANSVAR6=ZipShort.getValue(b)
18#TRANSVAR7=fileNameLen
20#TRANSVAR8=archive.skipBytes(lenToSkip)
27#TRANSVAR9=new byte[extraFieldLen]
34#TRANSVAR10=ze.getName()
35#TRANSVAR11=entriesWithoutUTF8Flag.get(ze)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#TRANSVAR1=new LinkedHashMap<ZipArchiveEntry,OffsetEntry>(entries)
12#ZipArchiveEntry TRANSVAR2
13#TRANSVAR3=origMap.get(ze)
14#TRANSVAR4=offsetEntry.headerOffset
16#TRANSVAR5=new byte[SHORT]
18#TRANSVAR6=ZipShort.getValue(b)
20#TRANSVAR7=ZipShort.getValue(b)
21#TRANSVAR8=fileNameLen
23#TRANSVAR9=archive.skipBytes(lenToSkip)
30#TRANSVAR10=new byte[extraFieldLen]
37#TRANSVAR11=ze.getName()
38#TRANSVAR12=entriesWithoutUTF8Flag.get(ze)
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
46#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
49#Exception TRANSVAR6
54#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
50#Exception TRANSVAR6
56#IOException TRANSVAR7
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
34#TRANSVAR3=new StringBuffer()
35#TRANSVAR4=new byte[SMALL_BUFFER_SIZE]
36#TRANSVAR5=0
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
30#IllegalArgumentException TRANSVAR3
31#TRANSVAR4=new IOException("Error detected parsing the header")
40#TRANSVAR5=new StringBuffer()
41#TRANSVAR6=new byte[SMALL_BUFFER_SIZE]
42#TRANSVAR7=0
2#String TRANSVAR0
2#String TRANSVAR0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
51#Exception TRANSVAR6
58#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
52#Exception TRANSVAR6
59#IOException TRANSVAR7
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
41#TRANSVAR7=buffer[start]
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
10#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
13#TRANSVAR4=new StringWriter()
14#Map.Entry<String,String> TRANSVAR5
15#TRANSVAR6=h.getKey()
16#TRANSVAR7=h.getValue()
17#TRANSVAR8=key.length() + value.length() + 3+ 2
20#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
21#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
34#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
13#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
16#TRANSVAR4=new StringWriter()
17#Map.Entry<String,String> TRANSVAR5
18#TRANSVAR6=h.getKey()
19#TRANSVAR7=h.getValue()
20#TRANSVAR8=key.length() + value.length() + 3+ 2
23#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
24#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
37#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
42#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
13#TRANSVAR4=new byte[SKIP_BUF_SIZE]
15#TRANSVAR5=readFully(input,skipBuf,0,(int)Math.min(numToSkip,SKIP_BUF_SIZE))
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
18#TRANSVAR3=offs + len
19#TRANSVAR4=offs
20#TRANSVAR5
26#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
21#TRANSVAR3=offs + len
22#TRANSVAR4=offs
23#TRANSVAR5
29#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#byte[] TRANSVAR0
3#TRANSVAR1=0
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=parseOctal(header,CHKSUM_OFFSET,CHKSUMLEN)
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
11#TRANSVAR0=deferredBlockStreams.remove(0)
14#TRANSVAR0=deferredBlockStreams.remove(0)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
14#TRANSVAR5=new ByteArrayOutputStream()
18#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
20#TRANSVAR7=len - read
24#TRANSVAR8=new byte[restLen]
25#TRANSVAR9=IOUtils.readFully(i,rest)
34#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
16#TRANSVAR5=new ByteArrayOutputStream()
20#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
22#TRANSVAR7=len - read
26#TRANSVAR8=new byte[restLen]
27#TRANSVAR9=IOUtils.readFully(i,rest)
36#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
21#TRANSVAR2
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
19#TRANSVAR2=0
20#TRANSVAR3=0l
23#TRANSVAR4=count - bitsCachedSize
25#TRANSVAR5=in.read()
30#TRANSVAR6=nextByte & MASKS[bitsToAddCount]
35#TRANSVAR7=(nextByte >>> (overflowBits)) & MASKS[bitsToAddCount]
42#TRANSVAR8
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
35#TRANSVAR3=WORD
38#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
42#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
43#TRANSVAR6=gpFlag.usesUTF8ForNames()
44#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
53#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
57#TRANSVAR9=null
57#TRANSVAR10=null
71#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
75#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
78#TRANSVAR13=new byte[fileNameLen]
82#TRANSVAR14=new byte[extraLen]
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
36#TRANSVAR3=WORD
39#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
43#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
44#TRANSVAR6=gpFlag.usesUTF8ForNames()
45#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
54#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
58#TRANSVAR9=null
58#TRANSVAR10=null
72#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
76#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
79#TRANSVAR13=new byte[fileNameLen]
83#TRANSVAR14=new byte[extraLen]
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
2#long TRANSVAR0
3#TRANSVAR1=0x100000000L
2#long TRANSVAR0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
7#TRANSVAR6=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=true
5#TRANSVAR5=offset + length
6#TRANSVAR6=offset
8#TRANSVAR7=start
9#TRANSVAR8=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
3#TRANSVAR0=super.read()
3#TRANSVAR0=super.read()
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header.trim().isEmpty()
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header == null || header.trim().isEmpty()
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
89#TRANSVAR14=value.charAt(pos)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
10#ArrayIndexOutOfBoundsException TRANSVAR2
4#TRANSVAR0=in.read()
4#TRANSVAR0=in.read()
3#TRANSVAR0=format.getRecordSeparator()
3#TRANSVAR0=format.getRecordSeparator()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
6#final Entry<String,Integer> TRANSVAR1
7#TRANSVAR2=entry.getValue().intValue()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
2#double TRANSVAR0
2#double TRANSVAR0
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
15#TRANSVAR5=(Class<?>)toResolve
16#TRANSVAR6=original.getComponentType()
17#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
23#TRANSVAR8=(GenericArrayType)toResolve
24#TRANSVAR9=original.getGenericComponentType()
25#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
31#TRANSVAR11=(ParameterizedType)toResolve
32#TRANSVAR12=original.getOwnerType()
33#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
34#TRANSVAR14=newOwnerType != ownerType
36#TRANSVAR15=original.getActualTypeArguments()
37#TRANSVAR16=0
37#TRANSVAR17=args.length
38#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
53#TRANSVAR19=(WildcardType)toResolve
54#TRANSVAR20=original.getLowerBounds()
55#TRANSVAR21=original.getUpperBounds()
58#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
63#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
20#TRANSVAR5=(Class<?>)toResolve
21#TRANSVAR6=original.getComponentType()
22#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
28#TRANSVAR8=(GenericArrayType)toResolve
29#TRANSVAR9=original.getGenericComponentType()
30#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
36#TRANSVAR11=(ParameterizedType)toResolve
37#TRANSVAR12=original.getOwnerType()
38#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
39#TRANSVAR14=newOwnerType != ownerType
41#TRANSVAR15=original.getActualTypeArguments()
42#TRANSVAR16=0
42#TRANSVAR17=args.length
43#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
58#TRANSVAR19=(WildcardType)toResolve
59#TRANSVAR20=original.getLowerBounds()
60#TRANSVAR21=original.getUpperBounds()
63#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
68#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#JsonReader TRANSVAR0
6#TRANSVAR1=deserializeToDate(in.nextString())
2#JsonReader TRANSVAR0
7#TRANSVAR1=deserializeToDate(in.nextString())
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
103#TRANSVAR20="GMT" + timezoneOffset
108#TRANSVAR21=timezone.getID()
115#TRANSVAR22=act.replace(":","")
126#TRANSVAR23=new GregorianCalendar(timezone)
140#IndexOutOfBoundsException TRANSVAR24
142#NumberFormatException TRANSVAR25
144#IllegalArgumentException TRANSVAR26
147#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
148#TRANSVAR28=fail.getMessage()
152#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
104#TRANSVAR20="GMT" + timezoneOffset
109#TRANSVAR21=timezone.getID()
116#TRANSVAR22=act.replace(":","")
127#TRANSVAR23=new GregorianCalendar(timezone)
141#IndexOutOfBoundsException TRANSVAR24
143#NumberFormatException TRANSVAR25
145#IllegalArgumentException TRANSVAR26
148#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
149#TRANSVAR28=fail.getMessage()
153#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
11#TRANSVAR0=_exposedContext
15#TRANSVAR1=ctxt.nextTokenToRead()
52#TRANSVAR2=delegate.nextToken()
59#TRANSVAR3
138#TRANSVAR4=_headContext.isStartHandled()
153#TRANSVAR5=delegate.getCurrentName()
20#TRANSVAR0=_exposedContext
24#TRANSVAR1=ctxt.nextTokenToRead()
61#TRANSVAR2=delegate.nextToken()
68#TRANSVAR3
147#TRANSVAR4=_headContext.isStartHandled()
162#TRANSVAR5=delegate.getCurrentName()
2#Object TRANSVAR0
2#Object TRANSVAR0
26#TRANSVAR0=_exposedContext
30#TRANSVAR1=ctxt.nextTokenToRead()
67#TRANSVAR2=delegate.nextToken()
75#TRANSVAR3
154#TRANSVAR4=_headContext.isStartHandled()
169#TRANSVAR5=delegate.getCurrentName()
28#TRANSVAR0=_exposedContext
32#TRANSVAR1=ctxt.nextTokenToRead()
69#TRANSVAR2=delegate.nextToken()
77#TRANSVAR3
156#TRANSVAR4=_headContext.isStartHandled()
171#TRANSVAR5=delegate.getCurrentName()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
8#TRANSVAR2=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1))
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
7#TRANSVAR2=len + (len >> 1)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i++)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=0
11#TRANSVAR3=str.charAt(i)
17#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
17#TRANSVAR3=1
24#TRANSVAR4=NumberInput.parseLong(str)
12#TRANSVAR0=_index
15#TRANSVAR0=_index
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
14#TRANSVAR4=_serializer
16#TRANSVAR5=value.getClass()
17#TRANSVAR6=_dynamicSerializers
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
15#TRANSVAR4=_serializer
17#TRANSVAR5=value.getClass()
18#TRANSVAR6=_dynamicSerializers
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
10#TRANSVAR2=n.binaryValue()
15#TRANSVAR3=((POJONode)n).getPojo()
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
60#TRANSVAR10=_beanProperties.find(propName)
80#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
86#Exception TRANSVAR12
94#TRANSVAR13
97#Exception TRANSVAR14
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
64#TRANSVAR10=_beanProperties.find(propName)
84#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
90#Exception TRANSVAR12
98#TRANSVAR13
101#Exception TRANSVAR14
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
10#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
15#TRANSVAR3=format.getShape()
23#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
26#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
27#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
34#TRANSVAR7=format.hasLocale()
35#TRANSVAR8=format.hasTimeZone()
36#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
42#TRANSVAR10=serializers.getConfig().getDateFormat()
45#TRANSVAR11=(StdDateFormat)df0
63#TRANSVAR12=(SimpleDateFormat)df0
70#TRANSVAR13=format.getTimeZone()
71#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
7#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
12#TRANSVAR3=format.getShape()
20#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
24#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
31#TRANSVAR7=format.hasLocale()
32#TRANSVAR8=format.hasTimeZone()
33#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
39#TRANSVAR10=serializers.getConfig().getDateFormat()
42#TRANSVAR11=(StdDateFormat)df0
60#TRANSVAR12=(SimpleDateFormat)df0
67#TRANSVAR13=format.getTimeZone()
68#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name)
26#TRANSVAR4=type.getBounds()
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name,false)
26#TRANSVAR4=type.getBounds()
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getDelegateType(ctxt.getConfig())
15#TRANSVAR5=_valueDeserializer
16#TRANSVAR6=_containerType.getContentType()
29#TRANSVAR7=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
31#TRANSVAR8=findContentNullProvider(ctxt,property,valueDeser)
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getArrayDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
14#TRANSVAR5=_valueInstantiator.getDelegateType(ctxt.getConfig())
18#TRANSVAR6=_valueDeserializer
19#TRANSVAR7=_containerType.getContentType()
32#TRANSVAR8=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
34#TRANSVAR9=findContentNullProvider(ctxt,property,valueDeser)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#JavaType TRANSVAR0
2#JavaType TRANSVAR0
2#Class<?> TRANSVAR0
5#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#Class<?> TRANSVAR0
8#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#DateFormat TRANSVAR0
6#TRANSVAR1=(df == null) ? _timeZone : df.getTimeZone()
2#DateFormat TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
21#TRANSVAR3=p.getText()
22#TRANSVAR4=_findDeserializer(ctxt,typeId)
28#TRANSVAR5=new TokenBuffer(null,false)
36#TRANSVAR6=deser.deserialize(p,ctxt)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
12#TRANSVAR3=p.getCurrentToken()
23#TRANSVAR4=p.getText()
24#TRANSVAR5=_findDeserializer(ctxt,typeId)
30#TRANSVAR6=new TokenBuffer(null,false)
38#TRANSVAR7=deser.deserialize(p,ctxt)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
8#TRANSVAR2=p.nextToken()
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
20#TRANSVAR1=subclass.getSuperclass()
26#TRANSVAR2=_narrow(next)
31#TRANSVAR3=subclass.getInterfaces()
32#Class<?> TRANSVAR4
38#TRANSVAR5=_narrow(iface)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
16#TRANSVAR4=format.getTimeZone()
17#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
20#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
17#TRANSVAR4=format.getTimeZone()
18#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
21#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#StringBuilder TRANSVAR0
2#StringBuilder TRANSVAR0
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
27#IllegalArgumentException TRANSVAR6
39#TRANSVAR7=type.getKeyType()
40#TRANSVAR8=findSerializationKeyType(a,keyType)
45#TRANSVAR9=keyType.getRawClass()
59#IllegalArgumentException TRANSVAR10
70#TRANSVAR11=type.getContentType()
73#TRANSVAR12=findSerializationContentType(a,contentType)
81#TRANSVAR13=contentType.getRawClass()
92#IllegalArgumentException TRANSVAR14
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
23#TRANSVAR6=type.getRawClass()
36#IllegalArgumentException TRANSVAR7
48#TRANSVAR8=type.getKeyType()
49#TRANSVAR9=findSerializationKeyType(a,keyType)
54#TRANSVAR10=keyType.getRawClass()
68#IllegalArgumentException TRANSVAR11
79#TRANSVAR12=type.getContentType()
82#TRANSVAR13=findSerializationContentType(a,contentType)
90#TRANSVAR14=contentType.getRawClass()
101#IllegalArgumentException TRANSVAR15
2#Object TRANSVAR0
2#Object TRANSVAR0
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
17#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
20#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
27#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
29#TRANSVAR8=type.getTypeHandler()
30#TRANSVAR9
42#TRANSVAR10=propDef.findReferenceType()
46#TRANSVAR11=propDef.findObjectIdInfo()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
22#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
25#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
32#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
34#TRANSVAR8=type.getTypeHandler()
35#TRANSVAR9
47#TRANSVAR10=propDef.findReferenceType()
51#TRANSVAR11=propDef.findObjectIdInfo()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
51#TRANSVAR7=new StringBuilder(dateStr)
61#TRANSVAR8=new StringBuilder(dateStr)
63#TRANSVAR9=len - dateStr.lastIndexOf('T') - 1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
49#TRANSVAR7=len - dateStr.lastIndexOf('T') - 6
51#TRANSVAR8=len - 5
52#TRANSVAR9=new StringBuilder(dateStr)
77#TRANSVAR10=new StringBuilder(dateStr)
79#TRANSVAR11=len - dateStr.lastIndexOf('T') - 1
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
21#TRANSVAR4=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
24#TRANSVAR5=_valueDeserializer
28#TRANSVAR6=_collectionType.getContentType()
35#TRANSVAR7=_valueTypeDeserializer
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
17#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
29#TRANSVAR5=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
32#TRANSVAR6=_valueDeserializer
36#TRANSVAR7=_collectionType.getContentType()
43#TRANSVAR8=_valueTypeDeserializer
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
113#TRANSVAR16=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
118#TRANSVAR17=_annotationIntrospector.findNullSerializer(am)
123#TRANSVAR18=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
64#TRANSVAR16
77#Exception TRANSVAR17
118#TRANSVAR18=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
123#TRANSVAR19=_annotationIntrospector.findNullSerializer(am)
128#TRANSVAR20=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
27#BeanDeserializerModifier TRANSVAR6
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
28#BeanDeserializerModifier TRANSVAR6
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
12#TRANSVAR2
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
26#TRANSVAR5=p.getText().trim()
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
21#TRANSVAR8
24#Exception TRANSVAR9
47#TRANSVAR10=_beanProperties.find(propName)
65#TRANSVAR11
69#Exception TRANSVAR12
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
27#TRANSVAR8=_beanProperties.find(propName)
45#TRANSVAR9
49#Exception TRANSVAR10
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
9#TRANSVAR5
26#TRANSVAR6=oldOne.getRawParameterType(0)
27#TRANSVAR7=newOne.getRawParameterType(0)
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
19#IllegalArgumentException TRANSVAR4
21#MalformedURLException TRANSVAR5
24#TRANSVAR6="not a valid textual representation"
26#TRANSVAR7=cause.getMessage()
32#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
39#TRANSVAR9=p.getCurrentToken()
46#TRANSVAR10=p.getEmbeddedObject()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
17#IllegalArgumentException TRANSVAR4
19#MalformedURLException TRANSVAR5
22#TRANSVAR6="not a valid textual representation"
24#TRANSVAR7=cause.getMessage()
30#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
37#TRANSVAR9=p.getCurrentToken()
44#TRANSVAR10=p.getEmbeddedObject()
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
22#TRANSVAR4=format.getTimeZone()
23#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
26#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
29#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
21#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
25#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
32#TRANSVAR7=format.hasLocale()
33#TRANSVAR8=format.hasTimeZone()
34#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
40#TRANSVAR10=serializers.getConfig().getDateFormat()
43#TRANSVAR11=(StdDateFormat)df0
62#TRANSVAR12=(SimpleDateFormat)df0
69#TRANSVAR13=format.getTimeZone()
70#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
18#TRANSVAR4
21#ClassNotFoundException TRANSVAR5
25#TRANSVAR6=(DeserializationContext)ctxt
31#Exception TRANSVAR7
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
22#TRANSVAR4
25#ClassNotFoundException TRANSVAR5
29#TRANSVAR6=(DeserializationContext)ctxt
35#Exception TRANSVAR7
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4=value.getClass()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
13#TRANSVAR2=t.getKeyType()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
49#TRANSVAR12=creator.build(ctxt,buffer)
51#TRANSVAR13=0
52#TRANSVAR14=_properties[i].getProperty()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
45#TRANSVAR12
49#TRANSVAR13=new TokenBuffer(p,ctxt)
58#TRANSVAR14=creator.build(ctxt,buffer)
60#TRANSVAR15=0
61#TRANSVAR16=_properties[i].getProperty()
4#TRANSVAR0=new StringBuilder()
4#TRANSVAR0=new StringBuilder()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
2#JsonGenerator TRANSVAR0
2#JsonGenerator TRANSVAR0
6#TRANSVAR1=_rootNameFromConfig()
2#XmlSerializerProvider TRANSVAR0
2#XmlSerializerProvider TRANSVAR0
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
19#TRANSVAR5=new URL(base,relUrl)
21#MalformedURLException TRANSVAR6
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
21#TRANSVAR5=new URL(base,relUrl)
23#MalformedURLException TRANSVAR6
2#String TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=attributeKey.substring("abs:".length())
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
9#Protocol TRANSVAR4
10#TRANSVAR5=protocol.toString() + ":"
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
11#Protocol TRANSVAR4
12#TRANSVAR5=protocol.toString() + ":"
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
35#TRANSVAR7
45#TRANSVAR8=child.absUrl("href")
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
36#TRANSVAR7
46#TRANSVAR8=child.absUrl("href")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
12#TRANSVAR3=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
11#TRANSVAR3=r.consume()
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
3#TRANSVAR0=(Element)super.clone()
3#TRANSVAR0=(Element)super.clone()
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
12#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
13#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
481#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
482#Node TRANSVAR45
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
482#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
483#Node TRANSVAR45
3#TRANSVAR0=new StringBuilder()
3#TRANSVAR0=new StringBuilder()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
220#TRANSVAR23=tb.getFormElement()
226#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
233#TRANSVAR25=new Attributes()
234#Attribute TRANSVAR26
268#TRANSVAR27=tb.state()
307#TRANSVAR28=t.asEndTag()
318#TRANSVAR29=tb.process(new Token.EndTag("body"))
333#TRANSVAR30=tb.getFormElement()
392#TRANSVAR31=0
393#TRANSVAR32=tb.getActiveFormattingElement(name)
406#TRANSVAR33=null
407#TRANSVAR34=null
408#TRANSVAR35=false
409#TRANSVAR36=tb.getStack()
412#TRANSVAR37=stack.size()
413#TRANSVAR38=0
414#TRANSVAR39=stack.get(si)
431#TRANSVAR40=furthestBlock
432#TRANSVAR41=furthestBlock
434#TRANSVAR42=0
443#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
469#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
471#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
472#Node TRANSVAR46
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
223#TRANSVAR23=tb.getFormElement()
229#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
236#TRANSVAR25=new Attributes()
237#Attribute TRANSVAR26
271#TRANSVAR27=tb.state()
310#TRANSVAR28=t.asEndTag()
321#TRANSVAR29=tb.process(new Token.EndTag("body"))
336#TRANSVAR30=tb.getFormElement()
395#TRANSVAR31=0
396#TRANSVAR32=tb.getActiveFormattingElement(name)
409#TRANSVAR33=null
410#TRANSVAR34=null
411#TRANSVAR35=false
412#TRANSVAR36=tb.getStack()
415#TRANSVAR37=stack.size()
416#TRANSVAR38=0
417#TRANSVAR39=stack.get(si)
434#TRANSVAR40=furthestBlock
435#TRANSVAR41=furthestBlock
437#TRANSVAR42=0
446#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
472#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
474#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
475#Node TRANSVAR46
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
8#TRANSVAR2=el.attr("name")
10#TRANSVAR3=el.attr("type")
13#TRANSVAR4=el.select("option[selected]")
14#TRANSVAR5=false
15#Element TRANSVAR6
20#TRANSVAR7=el.select("option").first()
27#TRANSVAR8=el.val()
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
14#TRANSVAR4=el.select("option[selected]")
15#TRANSVAR5=false
16#Element TRANSVAR6
21#TRANSVAR7=el.select("option").first()
28#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
25#TRANSVAR8=new StringBuilder()
26#TRANSVAR9=0
27#TRANSVAR10=values.get(i)
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
12#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
14#TRANSVAR7=null
23#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
8#TRANSVAR6=new byte[4]
26#TRANSVAR7=doc.select("meta[http-equiv=content-type], meta[charset]").first()
28#TRANSVAR8=null
37#IllegalCharsetNameException TRANSVAR9
5#TRANSVAR0=input[pos]
5#TRANSVAR0=input[pos]
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
10#TRANSVAR6=consume()
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
7#TRANSVAR6=false
11#TRANSVAR7=consume()
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
9#TRANSVAR0
10#TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
3#TRANSVAR1=attributes.get("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#String TRANSVAR0
3#TRANSVAR1=attributes.getIgnoreCase("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().normalName()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().name()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
8#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
11#TRANSVAR5=bottom
12#TRANSVAR6=stack.get(pos).nodeName()
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
5#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
8#TRANSVAR5=bottom
9#TRANSVAR6=stack.get(pos).nodeName()
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
6#TRANSVAR2=0
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
8#TRANSVAR4=0
9#TRANSVAR5=start
10#TRANSVAR6=0
15#TRANSVAR7=hash & stringCache.length - 1
16#TRANSVAR8=stringCache[index]
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
10#TRANSVAR4=0
11#TRANSVAR5=start
12#TRANSVAR6=0
17#TRANSVAR7=hash & stringCache.length - 1
18#TRANSVAR8=stringCache[index]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
144#TRANSVAR17=tb.getStack()
145#TRANSVAR18=stack.size() - 1
146#TRANSVAR19=stack.get(i)
177#TRANSVAR20=tb.insert(startTag)
186#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
311#TRANSVAR28=t.asEndTag()
315#TRANSVAR29=0
316#TRANSVAR30=tb.getActiveFormattingElement(name)
329#TRANSVAR31=null
330#TRANSVAR32=null
331#TRANSVAR33=false
332#TRANSVAR34=tb.getStack()
335#TRANSVAR35=stack.size()
336#TRANSVAR36=0
337#TRANSVAR37=stack.get(si)
354#TRANSVAR38=furthestBlock
355#TRANSVAR39=furthestBlock
356#TRANSVAR40=0
365#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
392#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
394#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
395#Node TRANSVAR44
437#TRANSVAR45=tb.processEndTag("body")
441#TRANSVAR46=tb.getFormElement()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
145#TRANSVAR17=tb.getStack()
146#TRANSVAR18=stack.size() - 1
147#TRANSVAR19=stack.get(i)
178#TRANSVAR20=tb.insert(startTag)
187#TRANSVAR21=tb.insert(startTag)
203#TRANSVAR22=tb.insertEmpty(startTag)
227#TRANSVAR23=tb.getFormElement()
233#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR25=new Attributes()
241#Attribute TRANSVAR26
275#TRANSVAR27=tb.state()
312#TRANSVAR28=t.asEndTag()
316#TRANSVAR29=0
317#TRANSVAR30=tb.getActiveFormattingElement(name)
330#TRANSVAR31=null
331#TRANSVAR32=null
332#TRANSVAR33=false
333#TRANSVAR34=tb.getStack()
336#TRANSVAR35=stack.size()
337#TRANSVAR36=0
338#TRANSVAR37=stack.get(si)
355#TRANSVAR38=furthestBlock
356#TRANSVAR39=furthestBlock
357#TRANSVAR40=0
366#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
393#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
395#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
396#Node TRANSVAR44
438#TRANSVAR45=tb.processEndTag("body")
442#TRANSVAR46=tb.getFormElement()
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.name()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.normalName()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
10#TRANSVAR5=doc.child(0)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
11#TRANSVAR5=doc.child(0)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=doc.createElementNS(namespace,tagName)
21#TRANSVAR7=(org.jsoup.nodes.TextNode)source
22#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
25#TRANSVAR9=(org.jsoup.nodes.Comment)source
26#TRANSVAR10=doc.createComment(sourceComment.getData())
29#TRANSVAR11=(org.jsoup.nodes.DataNode)source
30#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=namespace == null && tagName.contains(":") ? doc.createElementNS("",tagName) : doc.createElementNS(namespace,tagName)
22#TRANSVAR7=(org.jsoup.nodes.TextNode)source
23#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
26#TRANSVAR9=(org.jsoup.nodes.Comment)source
27#TRANSVAR10=doc.createComment(sourceComment.getData())
30#TRANSVAR11=(org.jsoup.nodes.DataNode)source
31#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
2#String TRANSVAR0
3#TRANSVAR1=parent.get(this.key)
5#TRANSVAR2=parent.indexOfKey(this.key)
2#String TRANSVAR0
3#TRANSVAR1=this.val
6#TRANSVAR2=parent.indexOfKey(this.key)
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
15#TRANSVAR4=el.select("option[selected]")
16#TRANSVAR5=false
17#Element TRANSVAR6
22#TRANSVAR7=el.select("option").first()
29#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
16#TRANSVAR4=el.select("option[selected]")
17#TRANSVAR5=false
18#Element TRANSVAR6
23#TRANSVAR7=el.select("option").first()
30#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#EvalContext TRANSVAR0
2#EvalContext TRANSVAR0
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
28#TRANSVAR8=node.getNodeType()
45#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
46#TRANSVAR10=((ProcessingInstruction)node).getTarget()
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
29#TRANSVAR8=node.getNodeType()
46#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
47#TRANSVAR10=((ProcessingInstruction)node).getTarget()
3#TRANSVAR0=getBaseValue()
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
29#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
27#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
22#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
25#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=0
20#TRANSVAR5=pfxLen
28#TRANSVAR6=str.length() - pfxLen
37#TRANSVAR7=str.charAt(str.length() - 1)
38#TRANSVAR8
39#TRANSVAR9
40#TRANSVAR10
41#TRANSVAR11=str.indexOf('.')
42#TRANSVAR12=str.indexOf('e') + str.indexOf('E') + 1
46#TRANSVAR13=0
77#TRANSVAR14=str.substring(0,str.length() - 1)
78#TRANSVAR15=isAllZeros(mant) && isAllZeros(exp)
87#final NumberFormatException TRANSVAR16
97#TRANSVAR17=NumberUtils.createFloat(numeric)
104#final NumberFormatException TRANSVAR18
111#TRANSVAR19=NumberUtils.createDouble(numeric)
115#final NumberFormatException TRANSVAR20
120#final NumberFormatException TRANSVAR21
140#final NumberFormatException TRANSVAR22
145#final NumberFormatException TRANSVAR23
152#TRANSVAR24=isAllZeros(mant) && isAllZeros(exp)
155#TRANSVAR25=createFloat(str)
160#final NumberFormatException TRANSVAR26
165#TRANSVAR27=createDouble(str)
170#final NumberFormatException TRANSVAR28
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=false
4#TRANSVAR4=0
5#TRANSVAR5=value.charAt(i)
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=value.charAt(i)
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
30#TRANSVAR7=new char[count]
31#TRANSVAR8=end - start
34#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
19#TRANSVAR7=new char[count]
20#TRANSVAR8=end - start
23#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=Character.codePointCount(input,0,input.length())
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
20#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
17#TRANSVAR7=start
24#TRANSVAR8
31#NumberFormatException TRANSVAR9
37#TRANSVAR10=Character.toChars(entityValue)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
20#TRANSVAR7=start
29#TRANSVAR8
36#NumberFormatException TRANSVAR9
42#TRANSVAR10=Character.toChars(entityValue)
49#TRANSVAR11=(end != seqEnd) && (input.charAt(end) == ';')
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
24#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
21#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone)
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone,mLocale)
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
31#TRANSVAR9=Character.toChars(entityValue)
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
145#TRANSVAR23=createFloat(str)
149#final NumberFormatException TRANSVAR24
153#TRANSVAR25=createDouble(str)
157#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=0
9#TRANSVAR5=cs.charAt(i)
10#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=csLength - 1
9#TRANSVAR5=searchLength - 1
10#TRANSVAR6=0
11#TRANSVAR7=cs.charAt(i)
12#TRANSVAR8=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
13#ArrayStoreException TRANSVAR4
15#TRANSVAR5=array2.getClass().getComponentType()
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
73#TRANSVAR15=replacementList[i].length() - searchList[i].length()
81#TRANSVAR16=new StringBuilder(text.length() + increase)
85#TRANSVAR17=start
97#TRANSVAR18=0
118#TRANSVAR19=text.length()
119#TRANSVAR20=start
122#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
76#TRANSVAR15=replacementList[i].length() - searchList[i].length()
84#TRANSVAR16=new StringBuilder(text.length() + increase)
88#TRANSVAR17=start
100#TRANSVAR18=0
121#TRANSVAR19=text.length()
122#TRANSVAR20=start
125#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR1
6#TRANSVAR2=searchStr.length()
7#TRANSVAR3=str.length() - len
8#TRANSVAR4=0
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=str.charAt(i)
6#TRANSVAR5=this.entityName(c)
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=Character.codePointAt(str,i)
6#TRANSVAR5=this.entityName(c)
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
9#TRANSVAR6=start
10#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
10#TRANSVAR6=start
11#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
19#TRANSVAR1=val.charAt(val.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=val.indexOf('.')
24#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
52#TRANSVAR7=val.substring(0,val.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(val)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(val)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
22#TRANSVAR1=val.charAt(val.length() - 1)
23#TRANSVAR2
24#TRANSVAR3
25#TRANSVAR4
26#TRANSVAR5=val.indexOf('.')
27#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
55#TRANSVAR7=val.substring(0,val.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(val)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(val)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
23#TRANSVAR4=new StringBuffer()
24#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
26#TRANSVAR4=new StringBuffer()
27#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
3#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
6#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
24#TRANSVAR4=str.charAt(3)
28#TRANSVAR5=str.charAt(4)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
15#TRANSVAR3=str.charAt(1)
16#TRANSVAR4=str.charAt(2)
31#TRANSVAR5=str.charAt(1)
44#TRANSVAR6=str.charAt(3)
48#TRANSVAR7=str.charAt(4)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
37#TRANSVAR4=str.charAt(0)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
38#TRANSVAR4=str.charAt(0)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
22#TRANSVAR5=str.charAt(4)
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
25#TRANSVAR5=str.charAt(4)
2#Locale TRANSVAR0
2#Locale TRANSVAR0
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
63#NumberFormatException TRANSVAR9
73#TRANSVAR10=NumberUtils.createFloat(numeric)
80#NumberFormatException TRANSVAR11
87#TRANSVAR12=NumberUtils.createDouble(numeric)
91#NumberFormatException TRANSVAR13
96#NumberFormatException TRANSVAR14
116#NumberFormatException TRANSVAR15
121#NumberFormatException TRANSVAR16
128#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
130#TRANSVAR18=createFloat(str)
134#NumberFormatException TRANSVAR19
138#TRANSVAR20=createDouble(str)
142#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=thisBuf.length - strLen
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=size - strLen + 1
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
24#TRANSVAR3=false
25#TRANSVAR4=0
26#TRANSVAR5=0
50#TRANSVAR6=0
51#TRANSVAR7=false
84#TRANSVAR8=val.getActualMinimum(fields[i][0])
85#TRANSVAR9=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0.0d
13#TRANSVAR3=0.0d
14#TRANSVAR4=0
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0d
13#TRANSVAR3=0d
14#TRANSVAR4=0
18#TRANSVAR5=1.0d
19#TRANSVAR6=false
24#TRANSVAR7=0.0d
25#TRANSVAR8=0.0d
26#TRANSVAR9=0
2#double TRANSVAR0
2#double TRANSVAR0
6#MaxIterationsExceededException TRANSVAR1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
40#TRANSVAR6=pos.getIndex()
41#TRANSVAR7=parseNextCharacter(source,pos)
63#TRANSVAR8=getDenominatorFormat().parse(source,pos)
74#TRANSVAR9=whole.intValue()
75#TRANSVAR10=num.intValue()
76#TRANSVAR11=den.intValue()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
44#TRANSVAR6=pos.getIndex()
45#TRANSVAR7=parseNextCharacter(source,pos)
67#TRANSVAR8=getDenominatorFormat().parse(source,pos)
82#TRANSVAR9=whole.intValue()
83#TRANSVAR10=num.intValue()
84#TRANSVAR11=den.intValue()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#RealMatrix TRANSVAR0
3#TRANSVAR1=new EigenDecomposition(m)
2#RealMatrix TRANSVAR0
4#TRANSVAR1=m.getRowDimension()
5#TRANSVAR2=new DiagonalMatrix(dim)
6#TRANSVAR3=0
11#TRANSVAR4=new EigenDecomposition(m)
2#final int TRANSVAR0
2#final int TRANSVAR0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
48#TRANSVAR7=0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
38#TRANSVAR7=0
40#TRANSVAR8=Double.MAX_VALUE + boundaries[0][i]
41#TRANSVAR9=new NumberIsTooLargeException(boundaries[1][i],max,true)
61#TRANSVAR10=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=new int[order]
11#TRANSVAR7=0
15#TRANSVAR8=0
16#TRANSVAR9=true
20#TRANSVAR10=r + 1
21#TRANSVAR11=index[i]
22#TRANSVAR12=index[swap[i]]
31#TRANSVAR13=index[r]
37#TRANSVAR14=index[r]
45#TRANSVAR15=r
61#TRANSVAR16=FastMath.sqrt(c[ir][ir])
63#TRANSVAR17=1 / sqrt
64#TRANSVAR18=r + 1
65#TRANSVAR19=index[i]
66#TRANSVAR20=inverse * c[ii][ir]
69#TRANSVAR21=r + 1
70#TRANSVAR22=index[j]
71#TRANSVAR23=c[ii][ij] - e * b[j][r]
85#TRANSVAR24=0
86#TRANSVAR25=0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=0
14#TRANSVAR7=0
15#TRANSVAR8=true
18#TRANSVAR9=r
19#TRANSVAR10=r + 1
20#TRANSVAR11=index[i]
21#TRANSVAR12=index[swapR]
30#TRANSVAR13=index[r]
33#TRANSVAR14=b[r]
39#TRANSVAR15=index[r]
47#TRANSVAR16=r
63#TRANSVAR17=FastMath.sqrt(c[ir][ir])
65#TRANSVAR18=1 / sqrt
66#TRANSVAR19=1 / c[ir][ir]
67#TRANSVAR20=r + 1
68#TRANSVAR21=index[i]
69#TRANSVAR22=inverse * c[ii][ir]
72#TRANSVAR23=r + 1
73#TRANSVAR24=index[j]
74#TRANSVAR25=c[ii][ij] - e * b[j][r]
88#TRANSVAR26=0
89#TRANSVAR27=0
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
39#TRANSVAR17=0
41#TRANSVAR18=0.5 * (a + b)
42#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
43#TRANSVAR20=2 * tol1
46#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
48#TRANSVAR22=0
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
113#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=current
40#TRANSVAR18=0
42#TRANSVAR19=0.5 * (a + b)
43#TRANSVAR20=relativeThreshold * FastMath.abs(x) + absoluteThreshold
44#TRANSVAR21=2 * tol1
47#TRANSVAR22=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
52#TRANSVAR26=0
114#TRANSVAR27=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
31#Integer TRANSVAR9
32#TRANSVAR10=0
33#TRANSVAR11=i + tableau.getArtificialVariableOffset()
34#TRANSVAR12=tableau.getEntry(row,column)
50#TRANSVAR13=null
51#TRANSVAR14=tableau.getWidth()
52#Integer TRANSVAR15
53#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
32#Integer TRANSVAR9
33#TRANSVAR10=0
34#TRANSVAR11=i + tableau.getArtificialVariableOffset()
35#TRANSVAR12=tableau.getEntry(row,column)
53#TRANSVAR13=null
54#TRANSVAR14=tableau.getWidth()
55#Integer TRANSVAR15
56#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
11#TRANSVAR3=new double[len]
12#TRANSVAR4=0
14#TRANSVAR5=0
15#TRANSVAR6=a[i]
16#TRANSVAR7=SPLIT_FACTOR * ai
17#TRANSVAR8=ca - (ca - ai)
18#TRANSVAR9=ai - aHigh
20#TRANSVAR10=b[i]
21#TRANSVAR11=SPLIT_FACTOR * bi
22#TRANSVAR12=cb - (cb - bi)
23#TRANSVAR13=bi - bHigh
25#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
33#TRANSVAR15=prodHigh[0]
34#TRANSVAR16=prodHigh[1]
35#TRANSVAR17=prodHighCur + prodHighNext
36#TRANSVAR18=sHighPrev - prodHighNext
37#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
39#TRANSVAR20=len - 1
40#TRANSVAR21=1
42#TRANSVAR22=sHighPrev + prodHighNext
48#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
54#TRANSVAR24=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
14#TRANSVAR3=new double[len]
15#TRANSVAR4=0
17#TRANSVAR5=0
18#TRANSVAR6=a[i]
19#TRANSVAR7=SPLIT_FACTOR * ai
20#TRANSVAR8=ca - (ca - ai)
21#TRANSVAR9=ai - aHigh
23#TRANSVAR10=b[i]
24#TRANSVAR11=SPLIT_FACTOR * bi
25#TRANSVAR12=cb - (cb - bi)
26#TRANSVAR13=bi - bHigh
28#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
36#TRANSVAR15=prodHigh[0]
37#TRANSVAR16=prodHigh[1]
38#TRANSVAR17=prodHighCur + prodHighNext
39#TRANSVAR18=sHighPrev - prodHighNext
40#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
42#TRANSVAR20=len - 1
43#TRANSVAR21=1
45#TRANSVAR22=sHighPrev + prodHighNext
51#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
57#TRANSVAR24=0
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=1.0
14#TRANSVAR8=1.0
15#TRANSVAR9=hPrev
16#TRANSVAR10=hPrev
19#TRANSVAR11=getA(n,x)
20#TRANSVAR12=getB(n,x)
22#TRANSVAR13=a * hPrev + b * p0
23#TRANSVAR14=a * q1 + b * dPrev
25#TRANSVAR15=1d
26#TRANSVAR16=1d
27#TRANSVAR17=5
28#TRANSVAR18=FastMath.max(a,b)
32#TRANSVAR19=0
48#TRANSVAR20=cN / q2 / cPrev
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=hPrev
14#TRANSVAR8=hPrev
17#TRANSVAR9=getA(n,x)
18#TRANSVAR10=getB(n,x)
20#TRANSVAR11=a + b * dPrev
24#TRANSVAR12=a + b / cPrev
30#TRANSVAR13=cN * dN
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt
83#TRANSVAR28=jpt
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt - 1
83#TRANSVAR28=jpt - 1
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
63#TRANSVAR16=1
65#TRANSVAR17=0
66#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
67#TRANSVAR19=1
78#TRANSVAR20=0
79#TRANSVAR21=b[0] * yDotK[0][j]
80#TRANSVAR22=1
90#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
116#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
118#TRANSVAR25=stepSize * factor
119#TRANSVAR26=stepStart + scaledH
120#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
123#TRANSVAR28=stepStart + hNew
124#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
72#TRANSVAR16=1
74#TRANSVAR17=0
75#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
76#TRANSVAR19=1
87#TRANSVAR20=0
88#TRANSVAR21=b[0] * yDotK[0][j]
89#TRANSVAR22=1
99#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
125#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
127#TRANSVAR25=stepSize * factor
128#TRANSVAR26=stepStart + scaledH
129#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
132#TRANSVAR28=stepStart + hNew
133#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
104#TRANSVAR15
105#TRANSVAR16=0
106#TRANSVAR17=nbPoints
142#TRANSVAR18=computeObjectiveValue(nextX)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
94#TRANSVAR15=agingA - MAXIMAL_AGING
95#TRANSVAR16=(1 << p) - 1
96#TRANSVAR17=p + 1
100#TRANSVAR18=agingB - MAXIMAL_AGING
101#TRANSVAR19=p + 1
102#TRANSVAR20=(1 << p) - 1
110#TRANSVAR21
111#TRANSVAR22=0
112#TRANSVAR23=nbPoints
148#TRANSVAR24=computeObjectiveValue(nextX)
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=begin
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
2#double TRANSVAR0
2#double TRANSVAR0
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
12#EventState TRANSVAR6
19#TRANSVAR7=interpolator.isForward() ? +1 : -1
20#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
23#EventState TRANSVAR9
23#EventState TRANSVAR10
29#final EventState TRANSVAR11
39#TRANSVAR12=occuringEvents.iterator()
40#TRANSVAR13=iterator.next()
44#TRANSVAR14=currentEvent.getEventTime()
50#TRANSVAR15=interpolator.getInterpolatedState()
55#final StepHandler TRANSVAR16
88#TRANSVAR17=interpolator.getInterpolatedState()
89#final EventState TRANSVAR18
96#StepHandler TRANSVAR19
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState()
54#final StepHandler TRANSVAR16
61#final EventState TRANSVAR17
73#final EventState TRANSVAR18
93#TRANSVAR19=interpolator.getInterpolatedState()
94#final EventState TRANSVAR20
101#StepHandler TRANSVAR21
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=(long)rowDimension
5#TRANSVAR3=(long)columnDimension
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
61#TRANSVAR10=FastMath.max(rtol * FastMath.abs(x1),atol)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
36#TRANSVAR21=Vector3D.crossProduct(v1,v2)
37#TRANSVAR22=v3.subtract(u3)
39#TRANSVAR23=u1.crossProduct(u3)
68#TRANSVAR24=1.0 / (c + c)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
33#TRANSVAR21=0.001
37#TRANSVAR22=Vector3D.crossProduct(v1,v2)
38#TRANSVAR23=v3.subtract(u3)
40#TRANSVAR24=u1.crossProduct(u3)
69#TRANSVAR25=1.0 / (c + c)
2#Complex TRANSVAR0
2#Complex TRANSVAR0
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
4#TRANSVAR2=v1.getNormSq()
5#TRANSVAR3=v2.getNormSq()
12#TRANSVAR4=(FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4
13#TRANSVAR5=FastMath.scalb(v1.x,-deltaExp)
14#TRANSVAR6=FastMath.scalb(v1.y,-deltaExp)
15#TRANSVAR7=FastMath.scalb(v1.z,-deltaExp)
16#TRANSVAR8=FastMath.scalb(v2.x,deltaExp)
17#TRANSVAR9=FastMath.scalb(v2.y,deltaExp)
18#TRANSVAR10=FastMath.scalb(v2.z,deltaExp)
27#TRANSVAR11=(x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2,2 * deltaExp)
28#TRANSVAR12=FastMath.rint(256 * ratio) / 256
30#TRANSVAR13=x1 - rho * x2
31#TRANSVAR14=y1 - rho * y2
32#TRANSVAR15=z1 - rho * z2
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
23#TRANSVAR6=1
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
2#final float TRANSVAR0
2#final float TRANSVAR1
2#final float TRANSVAR0
2#final float TRANSVAR1
2#double TRANSVAR0
3#TRANSVAR1=x - mean
7#MaxIterationsExceededException TRANSVAR2
2#double TRANSVAR0
3#TRANSVAR1=x - mean
2#double TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR0
2#double TRANSVAR1
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[cols]
20#TRANSVAR6=new double[cols]
21#TRANSVAR7=new double[cols]
28#TRANSVAR8=true
29#TRANSVAR9=new VectorialPointValuePair(point,objective)
34#TRANSVAR10=current
42#TRANSVAR11=0
43#TRANSVAR12=permutation[k]
52#TRANSVAR13=0
53#TRANSVAR14=jacNorm[k]
57#TRANSVAR15=dk * point[k]
69#TRANSVAR16=0
71#TRANSVAR17=0
72#TRANSVAR18=permutation[j]
73#TRANSVAR19=jacNorm[pj]
75#TRANSVAR20=0
76#TRANSVAR21=0
89#TRANSVAR22=0
94#TRANSVAR23=0
97#TRANSVAR24=0
98#TRANSVAR25=permutation[j]
101#TRANSVAR26=cost
102#TRANSVAR27=residuals
110#TRANSVAR28=0
111#TRANSVAR29=0
112#TRANSVAR30=permutation[j]
115#TRANSVAR31=diag[pj] * lmDir[pj]
129#TRANSVAR32=-1.0
131#TRANSVAR33=cost / previousCost
137#TRANSVAR34=0
138#TRANSVAR35=permutation[j]
139#TRANSVAR36=lmDir[pj]
141#TRANSVAR37=0
145#TRANSVAR38=0
146#TRANSVAR39=0
149#TRANSVAR40=previousCost * previousCost
151#TRANSVAR41=lmPar * lmNorm * lmNorm / pc2
152#TRANSVAR42=coeff1 + 2 * coeff2
153#TRANSVAR43=-(coeff1 + coeff2)
160#TRANSVAR44=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
177#TRANSVAR45=0
178#TRANSVAR46=diag[k] * point[k]
188#TRANSVAR47=0
189#TRANSVAR48=permutation[j]
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[rows]
20#TRANSVAR6=new double[rows]
21#TRANSVAR7=new double[cols]
22#TRANSVAR8=new double[cols]
23#TRANSVAR9=new double[cols]
30#TRANSVAR10=true
31#TRANSVAR11=new VectorialPointValuePair(point,objective)
33#TRANSVAR12=0
39#TRANSVAR13=current
47#TRANSVAR14=0
48#TRANSVAR15=permutation[k]
57#TRANSVAR16=0
58#TRANSVAR17=jacNorm[k]
62#TRANSVAR18=dk * point[k]
74#TRANSVAR19=0
76#TRANSVAR20=0
77#TRANSVAR21=permutation[j]
78#TRANSVAR22=jacNorm[pj]
80#TRANSVAR23=0
81#TRANSVAR24=0
96#TRANSVAR25=0
101#TRANSVAR26=0
104#TRANSVAR27=0
105#TRANSVAR28=permutation[j]
108#TRANSVAR29=cost
109#TRANSVAR30=residuals
120#TRANSVAR31=0
121#TRANSVAR32=0
122#TRANSVAR33=permutation[j]
125#TRANSVAR34=diag[pj] * lmDir[pj]
138#TRANSVAR35=-1.0
140#TRANSVAR36=cost / previousCost
146#TRANSVAR37=0
147#TRANSVAR38=permutation[j]
148#TRANSVAR39=lmDir[pj]
150#TRANSVAR40=0
154#TRANSVAR41=0
155#TRANSVAR42=0
158#TRANSVAR43=previousCost * previousCost
160#TRANSVAR44=lmPar * lmNorm * lmNorm / pc2
161#TRANSVAR45=coeff1 + 2 * coeff2
162#TRANSVAR46=-(coeff1 + coeff2)
169#TRANSVAR47=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
186#TRANSVAR48=0
187#TRANSVAR49=diag[k] * point[k]
203#TRANSVAR50=0
204#TRANSVAR51=permutation[j]
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
56#final StepHandler TRANSVAR16
63#final EventState TRANSVAR17
69#TRANSVAR18=currentEvent.reset(eventT,eventY)
76#final EventState TRANSVAR19
97#TRANSVAR20=interpolator.getInterpolatedState()
98#final EventState TRANSVAR21
105#StepHandler TRANSVAR22
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
52#final EventState TRANSVAR16
58#final StepHandler TRANSVAR17
68#TRANSVAR18=false
69#final EventState TRANSVAR19
96#TRANSVAR20=interpolator.getInterpolatedState()
97#final EventState TRANSVAR21
104#StepHandler TRANSVAR22
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18
70#TRANSVAR19=1
72#TRANSVAR20=0
73#TRANSVAR21=a[k - 1][0] * yDotK[0][j]
74#TRANSVAR22=1
85#TRANSVAR23=0
86#TRANSVAR24=b[0] * yDotK[0][j]
87#TRANSVAR25=1
100#TRANSVAR26=manager.getEventTime() - stepStart
115#TRANSVAR27=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
124#TRANSVAR28=stepStart + stepSize
131#StepHandler TRANSVAR29
154#TRANSVAR30=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
157#TRANSVAR31=stepSize * factor
158#TRANSVAR32=stepStart + scaledH
159#TRANSVAR33=forward ? (nextT >= t) : (nextT <= t)
165#TRANSVAR34=stepStart
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18=new double[y0.length]
57#TRANSVAR19=0
61#TRANSVAR20=0
73#TRANSVAR21=1
75#TRANSVAR22=0
76#TRANSVAR23=a[k - 1][0] * yDotK[0][j]
77#TRANSVAR24=1
88#TRANSVAR25=0
89#TRANSVAR26=b[0] * yDotK[0][j]
90#TRANSVAR27=1
103#TRANSVAR28=manager.getEventTime() - stepStart
118#TRANSVAR29=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
127#TRANSVAR30=stepStart + stepSize
134#StepHandler TRANSVAR31
157#TRANSVAR32=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
160#TRANSVAR33=stepSize * factor
161#TRANSVAR34=stepStart + scaledH
162#TRANSVAR35=forward ? (nextT >= t) : (nextT <= t)
168#TRANSVAR36=stepStart
2#Object TRANSVAR0
2#Object TRANSVAR0
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
38#TRANSVAR9=new UnivariateRealFunction(){
  public double methodName(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

39#final double TRANSVAR10
43#DerivativeException TRANSVAR11
45#EventException TRANSVAR12
50#TRANSVAR13=new BrentSolver()
53#TRANSVAR14=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
88#FunctionEvaluationException TRANSVAR15
89#TRANSVAR16=e.getCause()
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
34#TRANSVAR9=(forward ? 0.25 : -0.25) * convergence
35#TRANSVAR10=0
49#TRANSVAR11=new UnivariateRealFunction(){
  public double methodName(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

50#final double TRANSVAR12
54#DerivativeException TRANSVAR13
56#EventException TRANSVAR14
61#TRANSVAR15=new BrentSolver()
64#TRANSVAR16=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
99#FunctionEvaluationException TRANSVAR17
100#TRANSVAR18=e.getCause()
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int TRANSVAR0
8#TRANSVAR1=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize)
10#TRANSVAR2=0
2#int TRANSVAR0
8#TRANSVAR1=new Object[sampleSize]
10#TRANSVAR2=0
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * n - 1
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * (n - 1)
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final Comparator<RealPointValuePair> TRANSVAR0
10#TRANSVAR1=simplex
11#TRANSVAR2=original[0]
14#TRANSVAR3=evaluateNewSimplex(original,1.0,comparator)
18#TRANSVAR4=simplex
19#TRANSVAR5=evaluateNewSimplex(original,khi,comparator)
30#TRANSVAR6=evaluateNewSimplex(original,gamma,comparator)
2#final Comparator<RealPointValuePair> TRANSVAR0
5#TRANSVAR1=getConvergenceChecker()
11#TRANSVAR2=simplex
12#TRANSVAR3=original[0]
15#TRANSVAR4=evaluateNewSimplex(original,1.0,comparator)
19#TRANSVAR5=simplex
20#TRANSVAR6=evaluateNewSimplex(original,khi,comparator)
31#TRANSVAR7=evaluateNewSimplex(original,gamma,comparator)
38#TRANSVAR8=getIterations()
39#TRANSVAR9=true
40#TRANSVAR10=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
27#TRANSVAR6=i + 1
28#TRANSVAR7=lTData[j]
29#TRANSVAR8=lI[j]
30#TRANSVAR9=lJ[i]
31#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
41#TRANSVAR11=0
43#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
24#TRANSVAR6=i + 1
25#TRANSVAR7=lTData[j]
26#TRANSVAR8=lI[j]
27#TRANSVAR9=lJ[i]
28#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
38#TRANSVAR11=0
40#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=0
15#TRANSVAR4=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=0
2#Object TRANSVAR0
2#Object TRANSVAR0
3#TRANSVAR0=new Line(zero,zero.subtract(direction))
3#TRANSVAR0=new Line(this)
2#Object TRANSVAR0
14#TRANSVAR1=v
19#TRANSVAR2=(Long)freqTable.get(obj)
25#ClassCastException TRANSVAR3
2#Object TRANSVAR0
2#Fraction TRANSVAR0
3#TRANSVAR1=doubleValue()
4#TRANSVAR2=object.doubleValue()
2#Fraction TRANSVAR0
3#TRANSVAR1=((long)numerator) * object.denominator
4#TRANSVAR2=((long)denominator) * object.numerator
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#double TRANSVAR0
3#TRANSVAR1
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#double TRANSVAR0
3#TRANSVAR1=1.0
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
8#TRANSVAR2=0
9#TRANSVAR3=matchers.get(position)
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
5#TRANSVAR2=0
6#TRANSVAR3=matchers.get(position)
11#TRANSVAR4=indexOfVararg
12#TRANSVAR5=matchers.get(position)
19#TRANSVAR6=0
20#TRANSVAR7=matchers.get(position)
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
31#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
34#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
40#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
33#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
36#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
42#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=null
13#TRANSVAR4=(MockMethodInterceptor.MockAccess)mockInstance
17#ClassCastException TRANSVAR5
28#org.mockito.internal.creation.instance.InstantiationException TRANSVAR6
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=new InstantiatorProvider().getInstantiator(settings)
11#TRANSVAR4=null
14#TRANSVAR5=(MockMethodInterceptor.MockAccess)mockInstance
18#ClassCastException TRANSVAR6
29#org.mockito.internal.creation.instance.InstantiationException TRANSVAR7
2#Object TRANSVAR0
2#Object TRANSVAR1
2#Object TRANSVAR0
2#Object TRANSVAR1
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=new MockHandler<T>(oldMockHandler)
5#TRANSVAR3=new MethodInterceptorFilter(newMockHandler,(MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS))
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=newMethodInterceptorFilter(oldMockHandler.getMockSettings())
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
4#TRANSVAR4=mockCandidateFilter.filterCandidate(mocks,field,fieldInstance).thenInject()
2#Description TRANSVAR0
2#Description TRANSVAR0
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
10#TRANSVAR3=m1.getParameterTypes()
11#TRANSVAR4=m2.getParameterTypes()
13#TRANSVAR5=0
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#org.mockito.exceptions.verification.junit.ArgumentsAreDifferent TRANSVAR3
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#AssertionError TRANSVAR3
3#Type TRANSVAR0
3#Type TRANSVAR0
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=0L
11#TRANSVAR5=0
11#TRANSVAR6=partial.size()
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=partial.getValue(0) - 1
11#TRANSVAR5=((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1
15#TRANSVAR6=0L
16#TRANSVAR7=0
16#TRANSVAR8=partial.size()
2#long TRANSVAR0
2#int TRANSVAR1
11#TRANSVAR2=val1 * val2
2#long TRANSVAR0
2#int TRANSVAR1
14#TRANSVAR2=val1 * val2
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,iDefaultYear)
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,chrono.year().get(instantLocal))
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR)
7#TRANSVAR3=convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR)
13#TRANSVAR4=convertUTCToLocal(instant)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=instant - 3 * DateTimeConstants.MILLIS_PER_HOUR
7#TRANSVAR3=instant + 3 * DateTimeConstants.MILLIS_PER_HOUR
8#TRANSVAR4=getOffset(instantBefore)
9#TRANSVAR5=getOffset(instantAfter)
15#TRANSVAR6=offsetBefore - offsetAfter
16#TRANSVAR7=nextTransition(instantBefore)
17#TRANSVAR8=transition - diff
18#TRANSVAR9=transition + diff
24#TRANSVAR10=instant - overlapStart
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
20#IllegalFieldValueException TRANSVAR9
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#String TRANSVAR4
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#TRANSVAR4=null
5#String TRANSVAR5
2#long TRANSVAR0
2#long TRANSVAR0
6#TRANSVAR1=ISOChronology.getInstanceUTC().get(this,duration)
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
26#IllegalFieldValueException TRANSVAR9
36#TRANSVAR10=iZone.getOffsetFromLocal(millis)
39#TRANSVAR11="Illegal instant due to time zone offset transition (" + iZone + ')'
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
27#TRANSVAR9=0
31#IllegalFieldValueException TRANSVAR10
41#TRANSVAR11=iZone.getOffsetFromLocal(millis)
44#TRANSVAR12="Illegal instant due to time zone offset transition (" + iZone + ')'
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
9#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
13#TRANSVAR6=createComposite(elementPairs)
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
10#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
15#TRANSVAR6=createComposite(elementPairs)
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(iChronology,newTypes,newValues)
47#TRANSVAR13=getValues()
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(newTypes,newValues,iChronology)
47#TRANSVAR13=getValues()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
14#TRANSVAR5=years * 12L + months
16#TRANSVAR6=FieldUtils.safeToInt(totalMonths / 12)
21#TRANSVAR7=FieldUtils.safeToInt(totalMonths)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
12#TRANSVAR7=chrono.year().get(instantLocal)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=DateTimeUtils.getChronology(chrono).year().get(instantMillis)
11#TRANSVAR7=instantMillis + chrono.getZone().getOffset(instantMillis)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#int TRANSVAR0
2#int TRANSVAR1
12#TRANSVAR2=0
14#TRANSVAR3=hoursOffset * 60
21#ArithmeticException TRANSVAR4
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
17#TRANSVAR3=hoursOffset * 60
24#ArithmeticException TRANSVAR4
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
2#String TRANSVAR0
2#String TRANSVAR0
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p1.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p2.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth() - w[2]),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,Math.max(constraint.getWidth() - w[2],0.0)),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
3#TRANSVAR0=createCopy(0,getItemCount() - 1)
3#TRANSVAR0=(TimeSeries)super.clone()
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
102#TRANSVAR37=owner.getEntityCollection()
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
103#TRANSVAR37=owner.getEntityCollection()
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
13#TRANSVAR3=start
14#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
16#TRANSVAR5=(TimeSeriesDataItem)item.clone()
20#SeriesException TRANSVAR6
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
15#TRANSVAR3=start
16#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
18#TRANSVAR5=(TimeSeriesDataItem)item.clone()
22#SeriesException TRANSVAR6
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
70#TRANSVAR14=r.getAnnotations()
71#TRANSVAR15=c.iterator()
73#TRANSVAR16=(XYAnnotation)i.next()
81#TRANSVAR17=includedAnnotations.iterator()
83#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
71#TRANSVAR14=r.getAnnotations()
72#TRANSVAR15=c.iterator()
74#TRANSVAR16=(XYAnnotation)i.next()
83#TRANSVAR17=includedAnnotations.iterator()
85#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#Number TRANSVAR0
2#Number TRANSVAR1
8#TRANSVAR2=null
9#TRANSVAR3=indexOf(x)
11#TRANSVAR4=(XYDataItem)this.data.get(index)
15#CloneNotSupportedException TRANSVAR5
2#Number TRANSVAR0
2#Number TRANSVAR1
12#TRANSVAR2=null
13#TRANSVAR3=indexOf(x)
15#TRANSVAR4=(XYDataItem)this.data.get(index)
19#CloneNotSupportedException TRANSVAR5
2#Object TRANSVAR0
2#Object TRANSVAR0
10#TRANSVAR1=(ShapeList)obj
11#TRANSVAR2=size()
12#TRANSVAR3=0
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
22#TRANSVAR3=valueList.size()
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
2#String TRANSVAR0
2#boolean TRANSVAR1
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
19#TRANSVAR5=token.indexOf('=')
20#TRANSVAR6=pos == -1 ? token : token.substring(0,pos)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
21#TRANSVAR6=pos
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
24#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#String TRANSVAR0
5#TRANSVAR1=new Option(opt,description)
2#String TRANSVAR0
4#TRANSVAR1=null
2#Option TRANSVAR0
2#Option TRANSVAR0
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#String TRANSVAR0
8#TRANSVAR1=str.length()
2#String TRANSVAR0
4#TRANSVAR1=str.length()
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
10#String TRANSVAR2
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
13#String TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer()
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR0
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#Scope TRANSVAR0
13#TRANSVAR1=fnScope.getRootNode()
21#TRANSVAR2=getFunctionArgList(function)
22#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
26#TRANSVAR4
28#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Scope TRANSVAR0
16#TRANSVAR1=fnScope.getRootNode()
24#TRANSVAR2=getFunctionArgList(function)
25#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
29#TRANSVAR4
31#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Node TRANSVAR0
2#boolean TRANSVAR1
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
2#Node TRANSVAR0
2#Node TRANSVAR1
5#TRANSVAR2=new MakeDeclaredNamesUnique()
6#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#Node TRANSVAR0
2#Node TRANSVAR1
6#TRANSVAR2=new MakeDeclaredNamesUnique()
7#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=new StringBuilder()
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
49#TRANSVAR12=InlineCostEstimator.getCost(n)
52#TRANSVAR13=Node.newString("")
57#TRANSVAR14=arrayFoldedChildren.remove(0)
65#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
77#TRANSVAR16="[].join()".length()
84#Node TRANSVAR17
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=null
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
51#TRANSVAR12=InlineCostEstimator.getCost(n)
54#TRANSVAR13=Node.newString("")
59#TRANSVAR14=arrayFoldedChildren.remove(0)
67#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
79#TRANSVAR16="[].join()".length()
86#Node TRANSVAR17
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
2#JsDocToken TRANSVAR0
2#JsDocToken TRANSVAR0
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#JSType TRANSVAR0
2#JSType TRANSVAR0
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=inferTemplateTypesFromParameters(fnType,n)
17#TRANSVAR4=new TemplateTypeReplacer(registry,inferred)
19#TRANSVAR5=n.getFirstChild()
21#TRANSVAR6=fnType.visit(replacer).toMaybeFunctionType()
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=Maps.filterKeys(inferTemplateTypesFromParameters(fnType,n),new Predicate<TemplateType>(){
  @Override public boolean methodName(  TemplateType key){
    return keys.contains(key);
  }
}
)
16#TemplateType TRANSVAR4
23#TRANSVAR5=new TemplateTypeReplacer(registry,inferred)
25#TRANSVAR6=n.getFirstChild()
27#TRANSVAR7=fnType.visit(replacer).toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
19#TRANSVAR5=callNode.getFirstChild().getNext()
38#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
11#TRANSVAR3=callNode.getFirstChild().getNext()
30#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
12#TRANSVAR3=callNode.getFirstChild().getNext()
31#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
21#TRANSVAR5=callNode.getFirstChild().getNext()
40#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
2#Node TRANSVAR0
2#boolean TRANSVAR1
10#TRANSVAR2=getJSType(n.getFirstChild()).dereference()
12#TRANSVAR3=n.getLastChild().getString()
34#TRANSVAR4=getJSType(n)
36#TRANSVAR5=type.dereference()
46#TRANSVAR6=n.getQualifiedName()
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR2=getJSType(n)
5#TRANSVAR3=type.dereference()
22#TRANSVAR4=getJSType(n.getFirstChild()).dereference()
24#TRANSVAR5=n.getLastChild().getString()
46#TRANSVAR6=n.getQualifiedName()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
9#TRANSVAR3=child.getString()
10#TRANSVAR4=typeSystem.getType(getScope(),n,name)
12#TRANSVAR5=getProperty(name)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
12#TRANSVAR3=child.getString()
13#TRANSVAR4=typeSystem.getType(getScope(),n,name)
15#TRANSVAR5=getProperty(name)
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
3#TRANSVAR1=getCfg().getOutEdges(cfgNode)
4#DiGraphEdge<Node,Branch> TRANSVAR2
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
56#TRANSVAR11=referenceInfo.references
57#TRANSVAR12=1
58#TRANSVAR13=refs.get(i).getNode()
60#TRANSVAR14=aliasCandidates.get(nameNode)
63#TRANSVAR15
65#TRANSVAR16=aliasInit.getAssignedValue()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
58#TRANSVAR11=referenceInfo.references
59#TRANSVAR12=1
60#TRANSVAR13=refs.get(i).getNode()
62#TRANSVAR14=aliasCandidates.get(nameNode)
65#TRANSVAR15
67#TRANSVAR16=aliasInit.getAssignedValue()
2#Comment TRANSVAR0
2#Comment TRANSVAR0
3#TRANSVAR1=Pattern.compile("(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]")
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=Context.OTHER
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=getContextForNoInOperator(context)
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
38#TRANSVAR9=n.getLastChild()
45#TRANSVAR10=n.getLastChild()
60#Node TRANSVAR11
64#TRANSVAR12=c
65#TRANSVAR13
65#TRANSVAR14
90#TRANSVAR15=n.getLastChild()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
41#TRANSVAR9=n.getLastChild()
56#Node TRANSVAR10
60#TRANSVAR11=c
61#TRANSVAR12
61#TRANSVAR13
86#TRANSVAR14=n.getLastChild()
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
7#TRANSVAR2=0
8#TRANSVAR3=s.charAt(index)
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
16#TRANSVAR3=c.getNext()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
15#TRANSVAR3=c.getNext()
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#String TRANSVAR0
3#TRANSVAR1=s.length()
10#TRANSVAR2=1
2#String TRANSVAR0
3#TRANSVAR1=s.length()
11#TRANSVAR2=1
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
151#TRANSVAR22=thenOp.removeFirstChild()
152#TRANSVAR23=thenOp.removeFirstChild()
153#TRANSVAR24=elseOp.getLastChild()
156#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
157#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
159#TRANSVAR27=NodeUtil.newExpr(assign)
171#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
178#TRANSVAR29=isVarBlock(thenBranch)
179#TRANSVAR30=isVarBlock(elseBranch)
185#TRANSVAR31=getBlockVar(thenBranch)
186#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
188#TRANSVAR33=var.getFirstChild()
189#TRANSVAR34=elseAssign.getFirstChild()
194#TRANSVAR35=name1.removeChildren()
195#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
197#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
210#TRANSVAR38=getBlockVar(elseBranch)
211#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
213#TRANSVAR40=thenAssign.getFirstChild()
214#TRANSVAR41=var.getFirstChild()
219#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
220#TRANSVAR43=name2.removeChildren()
222#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
153#TRANSVAR22=thenOp.removeFirstChild()
154#TRANSVAR23=thenOp.removeFirstChild()
155#TRANSVAR24=elseOp.getLastChild()
158#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
159#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
161#TRANSVAR27=NodeUtil.newExpr(assign)
173#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
180#TRANSVAR29=isVarBlock(thenBranch)
181#TRANSVAR30=isVarBlock(elseBranch)
187#TRANSVAR31=getBlockVar(thenBranch)
188#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
190#TRANSVAR33=var.getFirstChild()
191#TRANSVAR34=elseAssign.getFirstChild()
196#TRANSVAR35=name1.removeChildren()
197#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
199#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
212#TRANSVAR38=getBlockVar(elseBranch)
213#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
215#TRANSVAR40=thenAssign.getFirstChild()
216#TRANSVAR41=var.getFirstChild()
221#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
222#TRANSVAR43=name2.removeChildren()
224#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR0
4#TRANSVAR1=n.getLastChild()
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
12#TRANSVAR2=getNativeType(JSTypeNative.NO_TYPE)
2#Node TRANSVAR0
21#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
24#TRANSVAR1=n.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
13#TRANSVAR2=false
14#TRANSVAR3=ImmutableList.builder()
16#ObjectType TRANSVAR4
17#TRANSVAR5=(ObjectType)iface.resolve(t,scope)
26#TRANSVAR6=0
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
11#TRANSVAR2=safeResolve(typeOfThis,t,scope)
16#TRANSVAR3=false
17#TRANSVAR4=ImmutableList.builder()
19#ObjectType TRANSVAR5
20#TRANSVAR6=(ObjectType)iface.resolve(t,scope)
29#TRANSVAR7=0
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
7#TRANSVAR2=node.getFirstChild()
13#TRANSVAR3=node.getFirstChild()
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
12#TRANSVAR2=node.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
44#TRANSVAR3=new ComposeWarningsGuard(guards)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
14#TRANSVAR4=right.getDouble()
15#TRANSVAR5=(int)index
26#TRANSVAR6=left.getFirstChild()
27#TRANSVAR7=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=0
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
50#TRANSVAR8=thisIsVarArgs || thisParam.isOptionalArg()
51#TRANSVAR9=thatIsVarArgs || thatParam.isOptionalArg()
60#TRANSVAR10=thatIsVarArgs && (thatParamType == null || thatParamType.isUnknownType() || thatParamType.isNoType())
2#JSType TRANSVAR0
2#JSType TRANSVAR0
20#JSType TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
36#TRANSVAR5=rValue.getFirstChild()
37#TRANSVAR6=firstClause.getNext()
38#TRANSVAR7=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
26#TRANSVAR5=rValue.getJSDocInfo()
40#TRANSVAR6=rValue.getFirstChild()
41#TRANSVAR7=firstClause.getNext()
42#TRANSVAR8=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
14#TRANSVAR5=true
31#TRANSVAR6=n.getParent()
41#TRANSVAR7=getFunctionAnalysisResults(scope.getRootNode())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
11#TRANSVAR5=qName.substring(0,qName.lastIndexOf(".prototype"))
12#TRANSVAR6=scope.getSlot(className)
13#TRANSVAR7=slot == null ? null : slot.getType()
20#TRANSVAR8=true
37#TRANSVAR9=n.getParent()
47#TRANSVAR10=getFunctionAnalysisResults(scope.getRootNode())
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=left.hasChildren()
27#TRANSVAR7=!isVarDeclaration || var == null || var.isTypeInferred()
47#TRANSVAR8=var.getType()
53#TRANSVAR9=left.getQualifiedName()
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=var == null ? null : var.getType()
10#TRANSVAR7=left.hasChildren() && varType != null && !var.isTypeInferred()
29#TRANSVAR8=isVarDeclaration && !resultType.isNullType() && !resultType.isVoidType()
51#TRANSVAR9=var.getType()
57#TRANSVAR10=left.getQualifiedName()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
11#String TRANSVAR8
12#TRANSVAR9=properties.get(name)
24#ObjectType TRANSVAR10
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
15#String TRANSVAR8
16#TRANSVAR9=properties.get(name)
28#ObjectType TRANSVAR10
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
15#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
36#Node TRANSVAR5
37#TRANSVAR6=an.getType()
50#TRANSVAR7="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
20#TRANSVAR3=parent.getParent()
30#Node TRANSVAR4
31#TRANSVAR5=an.getType()
48#TRANSVAR6=NodeUtil.isExpressionResultUsed(n)
49#TRANSVAR7=NodeUtil.isSimpleOperatorType(n.getType())
57#TRANSVAR8="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
4#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
26#TRANSVAR6=constructor.getNext()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
5#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#Reference TRANSVAR2
5#TRANSVAR3=ref.getNode()
6#TRANSVAR4=ref.getParent()
7#TRANSVAR5=ref.getGrandparent()
36#TRANSVAR6=ref.getAssignedValue()
55#TRANSVAR7=val.getFirstChild()
64#TRANSVAR8=child.getFirstChild()
68#Reference TRANSVAR9
69#TRANSVAR10=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
29#TRANSVAR7=parent.getLastChild().getString()
45#TRANSVAR8=ref.getAssignedValue()
64#TRANSVAR9=val.getFirstChild()
74#TRANSVAR10=child.getFirstChild()
78#Reference TRANSVAR11
79#TRANSVAR12=t.getParent()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
53#CompilerInput TRANSVAR5
56#String TRANSVAR6
66#CircularDependencyException TRANSVAR7
74#MissingProvideException TRANSVAR8
85#CompilerInput TRANSVAR9
86#TRANSVAR10=input.getAstRoot(this)
94#TRANSVAR11=n.getJSDocInfo()
119#CompilerInput TRANSVAR12
120#TRANSVAR13=input.getAstRoot(this)
137#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
52#CompilerInput TRANSVAR5
55#String TRANSVAR6
65#CircularDependencyException TRANSVAR7
73#MissingProvideException TRANSVAR8
84#CompilerInput TRANSVAR9
85#TRANSVAR10=input.getAstRoot(this)
93#TRANSVAR11=n.getJSDocInfo()
118#CompilerInput TRANSVAR12
119#TRANSVAR13=input.getAstRoot(this)
136#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
70#TRANSVAR7=builder.toString()
76#TRANSVAR8=stream.getLineno()
77#TRANSVAR9=stream.getCharno()
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
31#TRANSVAR7=-1
65#TRANSVAR8=token == JsDocToken.EOC
68#TRANSVAR9=stream.getCharno() - lineStartChar
69#TRANSVAR10=0
85#TRANSVAR11=builder.toString()
91#TRANSVAR12=stream.getLineno()
92#TRANSVAR13=stream.getCharno()
2#ObjectType TRANSVAR0
15#String TRANSVAR1
16#TRANSVAR2=constraintObj.getPropertyType(prop)
18#TRANSVAR3=propType
2#ObjectType TRANSVAR0
18#String TRANSVAR1
19#TRANSVAR2=constraintObj.getPropertyType(prop)
21#TRANSVAR3=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
11#TRANSVAR3=ObjectType.cast(type.restrictByNotNullOrUndefined())
13#String TRANSVAR4
14#TRANSVAR5=constraintObj.getPropertyType(prop)
16#TRANSVAR6=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,false)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,true)
2#ForInLoop TRANSVAR0
2#ForInLoop TRANSVAR0
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
115#TRANSVAR13=getObjectSlot(ownerName)
119#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
134#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
137#TRANSVAR16=ownerType.getTypeOfThis()
138#TRANSVAR17=codingConvention.getDelegateSuperclassName()
139#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
118#TRANSVAR13=getObjectSlot(ownerName)
122#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
137#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
140#TRANSVAR16=ownerType.getTypeOfThis()
141#TRANSVAR17=codingConvention.getDelegateSuperclassName()
142#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
32#TRANSVAR7=parent.getLastChild().getString()
48#TRANSVAR8=ref.getAssignedValue()
67#TRANSVAR9=val.getFirstChild()
77#TRANSVAR10=child.getFirstChild()
81#Reference TRANSVAR11
82#TRANSVAR12=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
35#TRANSVAR7=parent.getLastChild().getString()
51#TRANSVAR8=ref.getAssignedValue()
70#TRANSVAR9=val.getFirstChild()
80#TRANSVAR10=child.getFirstChild()
84#Reference TRANSVAR11
85#TRANSVAR12=t.getParent()
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
26#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
27#TRANSVAR6=Lists.newLinkedList()
28#TRANSVAR7=null
29#TRANSVAR8=0
30#TRANSVAR9=null
31#TRANSVAR10=arrayNode.getFirstChild()
67#TRANSVAR11=InlineCostEstimator.getCost(n)
70#TRANSVAR12=Node.newString("")
75#TRANSVAR13=arrayFoldedChildren.remove(0)
83#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
96#TRANSVAR15="[].join()".length()
103#Node TRANSVAR16
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
31#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
32#TRANSVAR6=Lists.newLinkedList()
33#TRANSVAR7=null
34#TRANSVAR8=0
35#TRANSVAR9=null
36#TRANSVAR10=arrayNode.getFirstChild()
72#TRANSVAR11=InlineCostEstimator.getCost(n)
75#TRANSVAR12=Node.newString("")
80#TRANSVAR13=arrayFoldedChildren.remove(0)
88#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
101#TRANSVAR15="[].join()".length()
108#Node TRANSVAR16
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
39#TRANSVAR11=replacement
40#TRANSVAR12
43#TRANSVAR13=new Node(Token.COMMA)
50#TRANSVAR14=ref.getParent()
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
42#TRANSVAR11=replacement
43#TRANSVAR12
46#TRANSVAR13=new Node(Token.COMMA)
54#TRANSVAR14=ref.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
37#TRANSVAR6=n.getFirstChild()
71#TRANSVAR7=n.getFirstChild()
81#TRANSVAR8=n.getFirstChild()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
41#TRANSVAR6=n.getFirstChild()
75#TRANSVAR7=n.getFirstChild()
85#TRANSVAR8=n.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
44#TRANSVAR2=Lists.newArrayList()
50#TRANSVAR3=new ComposeWarningsGuard(guards)
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
45#TRANSVAR2=Lists.newArrayList()
51#TRANSVAR3=new ComposeWarningsGuard(guards)
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
42#TRANSVAR4=nameNode.getNext()
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
35#TRANSVAR4=nameNode.getFirstChild().getString()
48#TRANSVAR5=nameNode.getNext()
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
149#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
150#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
151#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
169#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
170#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
199#TRANSVAR14="left side of comparison"
272#TRANSVAR15=getJSType(parent.getFirstChild())
273#TRANSVAR16=getJSType(n.getFirstChild())
279#TRANSVAR17=n.getFirstChild()
334#Node TRANSVAR18
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
151#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
152#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
153#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
171#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
172#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
201#TRANSVAR14="left side of comparison"
274#TRANSVAR15=getJSType(parent.getFirstChild())
275#TRANSVAR16=getJSType(n.getFirstChild())
281#TRANSVAR17=n.getFirstChild()
336#Node TRANSVAR18
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=parent.getJSDocInfo() != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
29#TRANSVAR9="/script"
32#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
73#TRANSVAR8=Node.newNumber(result)
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
71#TRANSVAR8=Node.newNumber(result)
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
10#TRANSVAR3=newNode(Token.FUNCTION)
11#TRANSVAR4=transform(name)
19#TRANSVAR5=functionNode.getAbsolutePosition() + functionNode.getLp()
25#TRANSVAR6=newNode(Token.LP)
32#TRANSVAR7=functionNode.getFunctionName()
38#TRANSVAR8=functionNode.getLp() + functionNode.getAbsolutePosition()
42#AstNode TRANSVAR9
47#TRANSVAR10=transform(functionNode.getBody())
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
6#TRANSVAR3=functionNode.getFunctionType()
17#TRANSVAR4=newNode(Token.FUNCTION)
18#TRANSVAR5=transform(name)
26#TRANSVAR6=functionNode.getAbsolutePosition() + functionNode.getLp()
32#TRANSVAR7=newNode(Token.LP)
39#TRANSVAR8=functionNode.getFunctionName()
45#TRANSVAR9=functionNode.getLp() + functionNode.getAbsolutePosition()
49#AstNode TRANSVAR10
54#TRANSVAR11=transform(functionNode.getBody())
2#Parameters TRANSVAR0
3#TRANSVAR1=params.getParameter(0)
9#TRANSVAR2=param.toLowerCase()
2#Parameters TRANSVAR0
3#TRANSVAR1=null
6#CmdLineException TRANSVAR2
12#TRANSVAR3=param.toLowerCase()
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
14#TRANSVAR2=maybeExpr.getFirstChild().getFirstChild()
3#Node TRANSVAR0
3#String TRANSVAR1
16#TRANSVAR2=n.getFirstChild()
19#TRANSVAR3=isVariableReadBeforeKill(child,variable)
3#Node TRANSVAR0
3#String TRANSVAR1
10#TRANSVAR2=n.getNext()
11#TRANSVAR3=isVariableReadBeforeKill(rhs,variable)
22#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=isVariableReadBeforeKill(child,variable)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
38#TRANSVAR5=parent.getFirstChild()
39#TRANSVAR6=lhs.getNext()
56#TRANSVAR7=lhs.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
35#TRANSVAR5=parent.getParent()
37#TRANSVAR6=gramps.getJSDocInfo()
47#TRANSVAR7=parent.getFirstChild()
48#TRANSVAR8=lhs.getNext()
65#TRANSVAR9=lhs.getFirstChild()
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.indexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.lastIndexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
35#TRANSVAR7=scopeToDeclareIn.getVar(variableName)
42#TRANSVAR8=compiler.getInput(sourceName)
46#TRANSVAR9=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
48#TRANSVAR10=input.isExtern()
63#TRANSVAR11=(FunctionType)type
65#TRANSVAR12=fnType.getSuperClassConstructor()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
31#TRANSVAR7=scope.getGlobalScope()
42#TRANSVAR8=scopeToDeclareIn.getVar(variableName)
49#TRANSVAR9=compiler.getInput(sourceName)
53#TRANSVAR10=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
55#TRANSVAR11=input.isExtern()
70#TRANSVAR12=(FunctionType)type
72#TRANSVAR13=fnType.getSuperClassConstructor()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
23#TRANSVAR8=call.getChildCount() - 1
24#TRANSVAR9=functionType.getMinArguments()
25#TRANSVAR10=functionType.getMaxArguments()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
26#TRANSVAR8=call.getChildCount() - 1
27#TRANSVAR9=functionType.getMinArguments()
28#TRANSVAR10=functionType.getMaxArguments()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
55#TRANSVAR8=Node.newNumber(result)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
48#TRANSVAR8=lvalInt & 0xffffffffL
56#TRANSVAR9=Node.newNumber(result)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
20#TRANSVAR4=parent.getType()
30#TRANSVAR5=parent.getFirstChild()
31#TRANSVAR6=lhs.getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
21#TRANSVAR4=parent.getType()
31#TRANSVAR5=parent.getFirstChild()
32#TRANSVAR6=lhs.getNext()
49#TRANSVAR7=lhs.getFirstChild()
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=str.charAt(index - 1)
9#TRANSVAR4=str.charAt(index - 2)
10#TRANSVAR5=this.map(preHWChar)
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=index - 1
8#TRANSVAR4=str.charAt(i)
2#final byte[] TRANSVAR0
2#final byte[] TRANSVAR0
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
29#TRANSVAR3=new byte[doEncode ? 4096 : 8192]
30#TRANSVAR4=in.read(buf)
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
12#TRANSVAR3=0
31#TRANSVAR4=new byte[doEncode ? 4096 : 8192]
32#TRANSVAR5=in.read(buf)
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,MIME_CHUNK_SIZE,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,isChunked ? MIME_CHUNK_SIZE : 0,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#ZipArchiveEntry TRANSVAR1
10#TRANSVAR2=entries.get(ze)
11#TRANSVAR3=offsetEntry.headerOffset
13#TRANSVAR4=new byte[SHORT]
15#TRANSVAR5=ZipShort.getValue(b)
17#TRANSVAR6=ZipShort.getValue(b)
18#TRANSVAR7=fileNameLen
20#TRANSVAR8=archive.skipBytes(lenToSkip)
27#TRANSVAR9=new byte[extraFieldLen]
34#TRANSVAR10=ze.getName()
35#TRANSVAR11=entriesWithoutUTF8Flag.get(ze)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#TRANSVAR1=new LinkedHashMap<ZipArchiveEntry,OffsetEntry>(entries)
12#ZipArchiveEntry TRANSVAR2
13#TRANSVAR3=origMap.get(ze)
14#TRANSVAR4=offsetEntry.headerOffset
16#TRANSVAR5=new byte[SHORT]
18#TRANSVAR6=ZipShort.getValue(b)
20#TRANSVAR7=ZipShort.getValue(b)
21#TRANSVAR8=fileNameLen
23#TRANSVAR9=archive.skipBytes(lenToSkip)
30#TRANSVAR10=new byte[extraFieldLen]
37#TRANSVAR11=ze.getName()
38#TRANSVAR12=entriesWithoutUTF8Flag.get(ze)
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
46#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
49#Exception TRANSVAR6
54#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
50#Exception TRANSVAR6
56#IOException TRANSVAR7
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
34#TRANSVAR3=new StringBuffer()
35#TRANSVAR4=new byte[SMALL_BUFFER_SIZE]
36#TRANSVAR5=0
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
30#IllegalArgumentException TRANSVAR3
31#TRANSVAR4=new IOException("Error detected parsing the header")
40#TRANSVAR5=new StringBuffer()
41#TRANSVAR6=new byte[SMALL_BUFFER_SIZE]
42#TRANSVAR7=0
2#String TRANSVAR0
2#String TRANSVAR0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
51#Exception TRANSVAR6
58#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
52#Exception TRANSVAR6
59#IOException TRANSVAR7
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
41#TRANSVAR7=buffer[start]
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
10#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
13#TRANSVAR4=new StringWriter()
14#Map.Entry<String,String> TRANSVAR5
15#TRANSVAR6=h.getKey()
16#TRANSVAR7=h.getValue()
17#TRANSVAR8=key.length() + value.length() + 3+ 2
20#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
21#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
34#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
13#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
16#TRANSVAR4=new StringWriter()
17#Map.Entry<String,String> TRANSVAR5
18#TRANSVAR6=h.getKey()
19#TRANSVAR7=h.getValue()
20#TRANSVAR8=key.length() + value.length() + 3+ 2
23#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
24#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
37#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
42#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
13#TRANSVAR4=new byte[SKIP_BUF_SIZE]
15#TRANSVAR5=readFully(input,skipBuf,0,(int)Math.min(numToSkip,SKIP_BUF_SIZE))
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
18#TRANSVAR3=offs + len
19#TRANSVAR4=offs
20#TRANSVAR5
26#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
21#TRANSVAR3=offs + len
22#TRANSVAR4=offs
23#TRANSVAR5
29#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#byte[] TRANSVAR0
3#TRANSVAR1=0
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=parseOctal(header,CHKSUM_OFFSET,CHKSUMLEN)
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
11#TRANSVAR0=deferredBlockStreams.remove(0)
14#TRANSVAR0=deferredBlockStreams.remove(0)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
14#TRANSVAR5=new ByteArrayOutputStream()
18#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
20#TRANSVAR7=len - read
24#TRANSVAR8=new byte[restLen]
25#TRANSVAR9=IOUtils.readFully(i,rest)
34#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
16#TRANSVAR5=new ByteArrayOutputStream()
20#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
22#TRANSVAR7=len - read
26#TRANSVAR8=new byte[restLen]
27#TRANSVAR9=IOUtils.readFully(i,rest)
36#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
21#TRANSVAR2
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
19#TRANSVAR2=0
20#TRANSVAR3=0l
23#TRANSVAR4=count - bitsCachedSize
25#TRANSVAR5=in.read()
30#TRANSVAR6=nextByte & MASKS[bitsToAddCount]
35#TRANSVAR7=(nextByte >>> (overflowBits)) & MASKS[bitsToAddCount]
42#TRANSVAR8
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
35#TRANSVAR3=WORD
38#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
42#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
43#TRANSVAR6=gpFlag.usesUTF8ForNames()
44#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
53#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
57#TRANSVAR9=null
57#TRANSVAR10=null
71#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
75#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
78#TRANSVAR13=new byte[fileNameLen]
82#TRANSVAR14=new byte[extraLen]
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
36#TRANSVAR3=WORD
39#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
43#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
44#TRANSVAR6=gpFlag.usesUTF8ForNames()
45#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
54#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
58#TRANSVAR9=null
58#TRANSVAR10=null
72#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
76#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
79#TRANSVAR13=new byte[fileNameLen]
83#TRANSVAR14=new byte[extraLen]
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
2#long TRANSVAR0
3#TRANSVAR1=0x100000000L
2#long TRANSVAR0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
7#TRANSVAR6=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=true
5#TRANSVAR5=offset + length
6#TRANSVAR6=offset
8#TRANSVAR7=start
9#TRANSVAR8=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
3#TRANSVAR0=super.read()
3#TRANSVAR0=super.read()
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header.trim().isEmpty()
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header == null || header.trim().isEmpty()
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
89#TRANSVAR14=value.charAt(pos)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
10#ArrayIndexOutOfBoundsException TRANSVAR2
4#TRANSVAR0=in.read()
4#TRANSVAR0=in.read()
3#TRANSVAR0=format.getRecordSeparator()
3#TRANSVAR0=format.getRecordSeparator()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
6#final Entry<String,Integer> TRANSVAR1
7#TRANSVAR2=entry.getValue().intValue()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
2#double TRANSVAR0
2#double TRANSVAR0
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
15#TRANSVAR5=(Class<?>)toResolve
16#TRANSVAR6=original.getComponentType()
17#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
23#TRANSVAR8=(GenericArrayType)toResolve
24#TRANSVAR9=original.getGenericComponentType()
25#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
31#TRANSVAR11=(ParameterizedType)toResolve
32#TRANSVAR12=original.getOwnerType()
33#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
34#TRANSVAR14=newOwnerType != ownerType
36#TRANSVAR15=original.getActualTypeArguments()
37#TRANSVAR16=0
37#TRANSVAR17=args.length
38#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
53#TRANSVAR19=(WildcardType)toResolve
54#TRANSVAR20=original.getLowerBounds()
55#TRANSVAR21=original.getUpperBounds()
58#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
63#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
20#TRANSVAR5=(Class<?>)toResolve
21#TRANSVAR6=original.getComponentType()
22#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
28#TRANSVAR8=(GenericArrayType)toResolve
29#TRANSVAR9=original.getGenericComponentType()
30#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
36#TRANSVAR11=(ParameterizedType)toResolve
37#TRANSVAR12=original.getOwnerType()
38#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
39#TRANSVAR14=newOwnerType != ownerType
41#TRANSVAR15=original.getActualTypeArguments()
42#TRANSVAR16=0
42#TRANSVAR17=args.length
43#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
58#TRANSVAR19=(WildcardType)toResolve
59#TRANSVAR20=original.getLowerBounds()
60#TRANSVAR21=original.getUpperBounds()
63#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
68#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#JsonReader TRANSVAR0
6#TRANSVAR1=deserializeToDate(in.nextString())
2#JsonReader TRANSVAR0
7#TRANSVAR1=deserializeToDate(in.nextString())
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
103#TRANSVAR20="GMT" + timezoneOffset
108#TRANSVAR21=timezone.getID()
115#TRANSVAR22=act.replace(":","")
126#TRANSVAR23=new GregorianCalendar(timezone)
140#IndexOutOfBoundsException TRANSVAR24
142#NumberFormatException TRANSVAR25
144#IllegalArgumentException TRANSVAR26
147#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
148#TRANSVAR28=fail.getMessage()
152#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
104#TRANSVAR20="GMT" + timezoneOffset
109#TRANSVAR21=timezone.getID()
116#TRANSVAR22=act.replace(":","")
127#TRANSVAR23=new GregorianCalendar(timezone)
141#IndexOutOfBoundsException TRANSVAR24
143#NumberFormatException TRANSVAR25
145#IllegalArgumentException TRANSVAR26
148#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
149#TRANSVAR28=fail.getMessage()
153#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
11#TRANSVAR0=_exposedContext
15#TRANSVAR1=ctxt.nextTokenToRead()
52#TRANSVAR2=delegate.nextToken()
59#TRANSVAR3
138#TRANSVAR4=_headContext.isStartHandled()
153#TRANSVAR5=delegate.getCurrentName()
20#TRANSVAR0=_exposedContext
24#TRANSVAR1=ctxt.nextTokenToRead()
61#TRANSVAR2=delegate.nextToken()
68#TRANSVAR3
147#TRANSVAR4=_headContext.isStartHandled()
162#TRANSVAR5=delegate.getCurrentName()
2#Object TRANSVAR0
2#Object TRANSVAR0
26#TRANSVAR0=_exposedContext
30#TRANSVAR1=ctxt.nextTokenToRead()
67#TRANSVAR2=delegate.nextToken()
75#TRANSVAR3
154#TRANSVAR4=_headContext.isStartHandled()
169#TRANSVAR5=delegate.getCurrentName()
28#TRANSVAR0=_exposedContext
32#TRANSVAR1=ctxt.nextTokenToRead()
69#TRANSVAR2=delegate.nextToken()
77#TRANSVAR3
156#TRANSVAR4=_headContext.isStartHandled()
171#TRANSVAR5=delegate.getCurrentName()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
8#TRANSVAR2=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1))
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
7#TRANSVAR2=len + (len >> 1)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i++)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=0
11#TRANSVAR3=str.charAt(i)
17#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
17#TRANSVAR3=1
24#TRANSVAR4=NumberInput.parseLong(str)
12#TRANSVAR0=_index
15#TRANSVAR0=_index
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
14#TRANSVAR4=_serializer
16#TRANSVAR5=value.getClass()
17#TRANSVAR6=_dynamicSerializers
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
15#TRANSVAR4=_serializer
17#TRANSVAR5=value.getClass()
18#TRANSVAR6=_dynamicSerializers
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
10#TRANSVAR2=n.binaryValue()
15#TRANSVAR3=((POJONode)n).getPojo()
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
60#TRANSVAR10=_beanProperties.find(propName)
80#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
86#Exception TRANSVAR12
94#TRANSVAR13
97#Exception TRANSVAR14
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
64#TRANSVAR10=_beanProperties.find(propName)
84#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
90#Exception TRANSVAR12
98#TRANSVAR13
101#Exception TRANSVAR14
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
10#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
15#TRANSVAR3=format.getShape()
23#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
26#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
27#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
34#TRANSVAR7=format.hasLocale()
35#TRANSVAR8=format.hasTimeZone()
36#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
42#TRANSVAR10=serializers.getConfig().getDateFormat()
45#TRANSVAR11=(StdDateFormat)df0
63#TRANSVAR12=(SimpleDateFormat)df0
70#TRANSVAR13=format.getTimeZone()
71#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
7#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
12#TRANSVAR3=format.getShape()
20#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
24#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
31#TRANSVAR7=format.hasLocale()
32#TRANSVAR8=format.hasTimeZone()
33#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
39#TRANSVAR10=serializers.getConfig().getDateFormat()
42#TRANSVAR11=(StdDateFormat)df0
60#TRANSVAR12=(SimpleDateFormat)df0
67#TRANSVAR13=format.getTimeZone()
68#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name)
26#TRANSVAR4=type.getBounds()
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name,false)
26#TRANSVAR4=type.getBounds()
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getDelegateType(ctxt.getConfig())
15#TRANSVAR5=_valueDeserializer
16#TRANSVAR6=_containerType.getContentType()
29#TRANSVAR7=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
31#TRANSVAR8=findContentNullProvider(ctxt,property,valueDeser)
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getArrayDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
14#TRANSVAR5=_valueInstantiator.getDelegateType(ctxt.getConfig())
18#TRANSVAR6=_valueDeserializer
19#TRANSVAR7=_containerType.getContentType()
32#TRANSVAR8=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
34#TRANSVAR9=findContentNullProvider(ctxt,property,valueDeser)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#JavaType TRANSVAR0
2#JavaType TRANSVAR0
2#Class<?> TRANSVAR0
5#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#Class<?> TRANSVAR0
8#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#DateFormat TRANSVAR0
6#TRANSVAR1=(df == null) ? _timeZone : df.getTimeZone()
2#DateFormat TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
21#TRANSVAR3=p.getText()
22#TRANSVAR4=_findDeserializer(ctxt,typeId)
28#TRANSVAR5=new TokenBuffer(null,false)
36#TRANSVAR6=deser.deserialize(p,ctxt)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
12#TRANSVAR3=p.getCurrentToken()
23#TRANSVAR4=p.getText()
24#TRANSVAR5=_findDeserializer(ctxt,typeId)
30#TRANSVAR6=new TokenBuffer(null,false)
38#TRANSVAR7=deser.deserialize(p,ctxt)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
8#TRANSVAR2=p.nextToken()
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
20#TRANSVAR1=subclass.getSuperclass()
26#TRANSVAR2=_narrow(next)
31#TRANSVAR3=subclass.getInterfaces()
32#Class<?> TRANSVAR4
38#TRANSVAR5=_narrow(iface)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
16#TRANSVAR4=format.getTimeZone()
17#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
20#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
17#TRANSVAR4=format.getTimeZone()
18#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
21#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#StringBuilder TRANSVAR0
2#StringBuilder TRANSVAR0
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
27#IllegalArgumentException TRANSVAR6
39#TRANSVAR7=type.getKeyType()
40#TRANSVAR8=findSerializationKeyType(a,keyType)
45#TRANSVAR9=keyType.getRawClass()
59#IllegalArgumentException TRANSVAR10
70#TRANSVAR11=type.getContentType()
73#TRANSVAR12=findSerializationContentType(a,contentType)
81#TRANSVAR13=contentType.getRawClass()
92#IllegalArgumentException TRANSVAR14
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
23#TRANSVAR6=type.getRawClass()
36#IllegalArgumentException TRANSVAR7
48#TRANSVAR8=type.getKeyType()
49#TRANSVAR9=findSerializationKeyType(a,keyType)
54#TRANSVAR10=keyType.getRawClass()
68#IllegalArgumentException TRANSVAR11
79#TRANSVAR12=type.getContentType()
82#TRANSVAR13=findSerializationContentType(a,contentType)
90#TRANSVAR14=contentType.getRawClass()
101#IllegalArgumentException TRANSVAR15
2#Object TRANSVAR0
2#Object TRANSVAR0
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
17#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
20#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
27#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
29#TRANSVAR8=type.getTypeHandler()
30#TRANSVAR9
42#TRANSVAR10=propDef.findReferenceType()
46#TRANSVAR11=propDef.findObjectIdInfo()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
22#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
25#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
32#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
34#TRANSVAR8=type.getTypeHandler()
35#TRANSVAR9
47#TRANSVAR10=propDef.findReferenceType()
51#TRANSVAR11=propDef.findObjectIdInfo()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
51#TRANSVAR7=new StringBuilder(dateStr)
61#TRANSVAR8=new StringBuilder(dateStr)
63#TRANSVAR9=len - dateStr.lastIndexOf('T') - 1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
49#TRANSVAR7=len - dateStr.lastIndexOf('T') - 6
51#TRANSVAR8=len - 5
52#TRANSVAR9=new StringBuilder(dateStr)
77#TRANSVAR10=new StringBuilder(dateStr)
79#TRANSVAR11=len - dateStr.lastIndexOf('T') - 1
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
21#TRANSVAR4=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
24#TRANSVAR5=_valueDeserializer
28#TRANSVAR6=_collectionType.getContentType()
35#TRANSVAR7=_valueTypeDeserializer
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
17#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
29#TRANSVAR5=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
32#TRANSVAR6=_valueDeserializer
36#TRANSVAR7=_collectionType.getContentType()
43#TRANSVAR8=_valueTypeDeserializer
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
113#TRANSVAR16=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
118#TRANSVAR17=_annotationIntrospector.findNullSerializer(am)
123#TRANSVAR18=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
64#TRANSVAR16
77#Exception TRANSVAR17
118#TRANSVAR18=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
123#TRANSVAR19=_annotationIntrospector.findNullSerializer(am)
128#TRANSVAR20=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
27#BeanDeserializerModifier TRANSVAR6
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
28#BeanDeserializerModifier TRANSVAR6
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
12#TRANSVAR2
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
26#TRANSVAR5=p.getText().trim()
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
21#TRANSVAR8
24#Exception TRANSVAR9
47#TRANSVAR10=_beanProperties.find(propName)
65#TRANSVAR11
69#Exception TRANSVAR12
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
27#TRANSVAR8=_beanProperties.find(propName)
45#TRANSVAR9
49#Exception TRANSVAR10
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
9#TRANSVAR5
26#TRANSVAR6=oldOne.getRawParameterType(0)
27#TRANSVAR7=newOne.getRawParameterType(0)
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
19#IllegalArgumentException TRANSVAR4
21#MalformedURLException TRANSVAR5
24#TRANSVAR6="not a valid textual representation"
26#TRANSVAR7=cause.getMessage()
32#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
39#TRANSVAR9=p.getCurrentToken()
46#TRANSVAR10=p.getEmbeddedObject()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
17#IllegalArgumentException TRANSVAR4
19#MalformedURLException TRANSVAR5
22#TRANSVAR6="not a valid textual representation"
24#TRANSVAR7=cause.getMessage()
30#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
37#TRANSVAR9=p.getCurrentToken()
44#TRANSVAR10=p.getEmbeddedObject()
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
22#TRANSVAR4=format.getTimeZone()
23#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
26#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
29#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
21#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
25#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
32#TRANSVAR7=format.hasLocale()
33#TRANSVAR8=format.hasTimeZone()
34#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
40#TRANSVAR10=serializers.getConfig().getDateFormat()
43#TRANSVAR11=(StdDateFormat)df0
62#TRANSVAR12=(SimpleDateFormat)df0
69#TRANSVAR13=format.getTimeZone()
70#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
18#TRANSVAR4
21#ClassNotFoundException TRANSVAR5
25#TRANSVAR6=(DeserializationContext)ctxt
31#Exception TRANSVAR7
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
22#TRANSVAR4
25#ClassNotFoundException TRANSVAR5
29#TRANSVAR6=(DeserializationContext)ctxt
35#Exception TRANSVAR7
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4=value.getClass()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
13#TRANSVAR2=t.getKeyType()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
49#TRANSVAR12=creator.build(ctxt,buffer)
51#TRANSVAR13=0
52#TRANSVAR14=_properties[i].getProperty()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
45#TRANSVAR12
49#TRANSVAR13=new TokenBuffer(p,ctxt)
58#TRANSVAR14=creator.build(ctxt,buffer)
60#TRANSVAR15=0
61#TRANSVAR16=_properties[i].getProperty()
4#TRANSVAR0=new StringBuilder()
4#TRANSVAR0=new StringBuilder()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
2#JsonGenerator TRANSVAR0
2#JsonGenerator TRANSVAR0
6#TRANSVAR1=_rootNameFromConfig()
2#XmlSerializerProvider TRANSVAR0
2#XmlSerializerProvider TRANSVAR0
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
19#TRANSVAR5=new URL(base,relUrl)
21#MalformedURLException TRANSVAR6
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
21#TRANSVAR5=new URL(base,relUrl)
23#MalformedURLException TRANSVAR6
2#String TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=attributeKey.substring("abs:".length())
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
9#Protocol TRANSVAR4
10#TRANSVAR5=protocol.toString() + ":"
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
11#Protocol TRANSVAR4
12#TRANSVAR5=protocol.toString() + ":"
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
35#TRANSVAR7
45#TRANSVAR8=child.absUrl("href")
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
36#TRANSVAR7
46#TRANSVAR8=child.absUrl("href")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
12#TRANSVAR3=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
11#TRANSVAR3=r.consume()
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
3#TRANSVAR0=(Element)super.clone()
3#TRANSVAR0=(Element)super.clone()
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
12#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
13#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
481#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
482#Node TRANSVAR45
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
482#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
483#Node TRANSVAR45
3#TRANSVAR0=new StringBuilder()
3#TRANSVAR0=new StringBuilder()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
220#TRANSVAR23=tb.getFormElement()
226#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
233#TRANSVAR25=new Attributes()
234#Attribute TRANSVAR26
268#TRANSVAR27=tb.state()
307#TRANSVAR28=t.asEndTag()
318#TRANSVAR29=tb.process(new Token.EndTag("body"))
333#TRANSVAR30=tb.getFormElement()
392#TRANSVAR31=0
393#TRANSVAR32=tb.getActiveFormattingElement(name)
406#TRANSVAR33=null
407#TRANSVAR34=null
408#TRANSVAR35=false
409#TRANSVAR36=tb.getStack()
412#TRANSVAR37=stack.size()
413#TRANSVAR38=0
414#TRANSVAR39=stack.get(si)
431#TRANSVAR40=furthestBlock
432#TRANSVAR41=furthestBlock
434#TRANSVAR42=0
443#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
469#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
471#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
472#Node TRANSVAR46
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
223#TRANSVAR23=tb.getFormElement()
229#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
236#TRANSVAR25=new Attributes()
237#Attribute TRANSVAR26
271#TRANSVAR27=tb.state()
310#TRANSVAR28=t.asEndTag()
321#TRANSVAR29=tb.process(new Token.EndTag("body"))
336#TRANSVAR30=tb.getFormElement()
395#TRANSVAR31=0
396#TRANSVAR32=tb.getActiveFormattingElement(name)
409#TRANSVAR33=null
410#TRANSVAR34=null
411#TRANSVAR35=false
412#TRANSVAR36=tb.getStack()
415#TRANSVAR37=stack.size()
416#TRANSVAR38=0
417#TRANSVAR39=stack.get(si)
434#TRANSVAR40=furthestBlock
435#TRANSVAR41=furthestBlock
437#TRANSVAR42=0
446#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
472#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
474#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
475#Node TRANSVAR46
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
8#TRANSVAR2=el.attr("name")
10#TRANSVAR3=el.attr("type")
13#TRANSVAR4=el.select("option[selected]")
14#TRANSVAR5=false
15#Element TRANSVAR6
20#TRANSVAR7=el.select("option").first()
27#TRANSVAR8=el.val()
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
14#TRANSVAR4=el.select("option[selected]")
15#TRANSVAR5=false
16#Element TRANSVAR6
21#TRANSVAR7=el.select("option").first()
28#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
25#TRANSVAR8=new StringBuilder()
26#TRANSVAR9=0
27#TRANSVAR10=values.get(i)
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
12#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
14#TRANSVAR7=null
23#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
8#TRANSVAR6=new byte[4]
26#TRANSVAR7=doc.select("meta[http-equiv=content-type], meta[charset]").first()
28#TRANSVAR8=null
37#IllegalCharsetNameException TRANSVAR9
5#TRANSVAR0=input[pos]
5#TRANSVAR0=input[pos]
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
10#TRANSVAR6=consume()
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
7#TRANSVAR6=false
11#TRANSVAR7=consume()
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
9#TRANSVAR0
10#TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
3#TRANSVAR1=attributes.get("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#String TRANSVAR0
3#TRANSVAR1=attributes.getIgnoreCase("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().normalName()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().name()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
8#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
11#TRANSVAR5=bottom
12#TRANSVAR6=stack.get(pos).nodeName()
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
5#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
8#TRANSVAR5=bottom
9#TRANSVAR6=stack.get(pos).nodeName()
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
6#TRANSVAR2=0
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
8#TRANSVAR4=0
9#TRANSVAR5=start
10#TRANSVAR6=0
15#TRANSVAR7=hash & stringCache.length - 1
16#TRANSVAR8=stringCache[index]
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
10#TRANSVAR4=0
11#TRANSVAR5=start
12#TRANSVAR6=0
17#TRANSVAR7=hash & stringCache.length - 1
18#TRANSVAR8=stringCache[index]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
144#TRANSVAR17=tb.getStack()
145#TRANSVAR18=stack.size() - 1
146#TRANSVAR19=stack.get(i)
177#TRANSVAR20=tb.insert(startTag)
186#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
311#TRANSVAR28=t.asEndTag()
315#TRANSVAR29=0
316#TRANSVAR30=tb.getActiveFormattingElement(name)
329#TRANSVAR31=null
330#TRANSVAR32=null
331#TRANSVAR33=false
332#TRANSVAR34=tb.getStack()
335#TRANSVAR35=stack.size()
336#TRANSVAR36=0
337#TRANSVAR37=stack.get(si)
354#TRANSVAR38=furthestBlock
355#TRANSVAR39=furthestBlock
356#TRANSVAR40=0
365#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
392#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
394#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
395#Node TRANSVAR44
437#TRANSVAR45=tb.processEndTag("body")
441#TRANSVAR46=tb.getFormElement()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
145#TRANSVAR17=tb.getStack()
146#TRANSVAR18=stack.size() - 1
147#TRANSVAR19=stack.get(i)
178#TRANSVAR20=tb.insert(startTag)
187#TRANSVAR21=tb.insert(startTag)
203#TRANSVAR22=tb.insertEmpty(startTag)
227#TRANSVAR23=tb.getFormElement()
233#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR25=new Attributes()
241#Attribute TRANSVAR26
275#TRANSVAR27=tb.state()
312#TRANSVAR28=t.asEndTag()
316#TRANSVAR29=0
317#TRANSVAR30=tb.getActiveFormattingElement(name)
330#TRANSVAR31=null
331#TRANSVAR32=null
332#TRANSVAR33=false
333#TRANSVAR34=tb.getStack()
336#TRANSVAR35=stack.size()
337#TRANSVAR36=0
338#TRANSVAR37=stack.get(si)
355#TRANSVAR38=furthestBlock
356#TRANSVAR39=furthestBlock
357#TRANSVAR40=0
366#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
393#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
395#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
396#Node TRANSVAR44
438#TRANSVAR45=tb.processEndTag("body")
442#TRANSVAR46=tb.getFormElement()
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.name()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.normalName()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
10#TRANSVAR5=doc.child(0)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
11#TRANSVAR5=doc.child(0)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=doc.createElementNS(namespace,tagName)
21#TRANSVAR7=(org.jsoup.nodes.TextNode)source
22#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
25#TRANSVAR9=(org.jsoup.nodes.Comment)source
26#TRANSVAR10=doc.createComment(sourceComment.getData())
29#TRANSVAR11=(org.jsoup.nodes.DataNode)source
30#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=namespace == null && tagName.contains(":") ? doc.createElementNS("",tagName) : doc.createElementNS(namespace,tagName)
22#TRANSVAR7=(org.jsoup.nodes.TextNode)source
23#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
26#TRANSVAR9=(org.jsoup.nodes.Comment)source
27#TRANSVAR10=doc.createComment(sourceComment.getData())
30#TRANSVAR11=(org.jsoup.nodes.DataNode)source
31#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
2#String TRANSVAR0
3#TRANSVAR1=parent.get(this.key)
5#TRANSVAR2=parent.indexOfKey(this.key)
2#String TRANSVAR0
3#TRANSVAR1=this.val
6#TRANSVAR2=parent.indexOfKey(this.key)
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
15#TRANSVAR4=el.select("option[selected]")
16#TRANSVAR5=false
17#Element TRANSVAR6
22#TRANSVAR7=el.select("option").first()
29#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
16#TRANSVAR4=el.select("option[selected]")
17#TRANSVAR5=false
18#Element TRANSVAR6
23#TRANSVAR7=el.select("option").first()
30#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#EvalContext TRANSVAR0
2#EvalContext TRANSVAR0
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
28#TRANSVAR8=node.getNodeType()
45#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
46#TRANSVAR10=((ProcessingInstruction)node).getTarget()
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
29#TRANSVAR8=node.getNodeType()
46#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
47#TRANSVAR10=((ProcessingInstruction)node).getTarget()
3#TRANSVAR0=getBaseValue()
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
29#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
27#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
22#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
25#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=0
20#TRANSVAR5=pfxLen
28#TRANSVAR6=str.length() - pfxLen
37#TRANSVAR7=str.charAt(str.length() - 1)
38#TRANSVAR8
39#TRANSVAR9
40#TRANSVAR10
41#TRANSVAR11=str.indexOf('.')
42#TRANSVAR12=str.indexOf('e') + str.indexOf('E') + 1
46#TRANSVAR13=0
77#TRANSVAR14=str.substring(0,str.length() - 1)
78#TRANSVAR15=isAllZeros(mant) && isAllZeros(exp)
87#final NumberFormatException TRANSVAR16
97#TRANSVAR17=NumberUtils.createFloat(numeric)
104#final NumberFormatException TRANSVAR18
111#TRANSVAR19=NumberUtils.createDouble(numeric)
115#final NumberFormatException TRANSVAR20
120#final NumberFormatException TRANSVAR21
140#final NumberFormatException TRANSVAR22
145#final NumberFormatException TRANSVAR23
152#TRANSVAR24=isAllZeros(mant) && isAllZeros(exp)
155#TRANSVAR25=createFloat(str)
160#final NumberFormatException TRANSVAR26
165#TRANSVAR27=createDouble(str)
170#final NumberFormatException TRANSVAR28
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=false
4#TRANSVAR4=0
5#TRANSVAR5=value.charAt(i)
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=value.charAt(i)
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
30#TRANSVAR7=new char[count]
31#TRANSVAR8=end - start
34#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
19#TRANSVAR7=new char[count]
20#TRANSVAR8=end - start
23#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=Character.codePointCount(input,0,input.length())
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
20#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
17#TRANSVAR7=start
24#TRANSVAR8
31#NumberFormatException TRANSVAR9
37#TRANSVAR10=Character.toChars(entityValue)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
20#TRANSVAR7=start
29#TRANSVAR8
36#NumberFormatException TRANSVAR9
42#TRANSVAR10=Character.toChars(entityValue)
49#TRANSVAR11=(end != seqEnd) && (input.charAt(end) == ';')
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
24#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
21#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone)
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone,mLocale)
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
31#TRANSVAR9=Character.toChars(entityValue)
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
145#TRANSVAR23=createFloat(str)
149#final NumberFormatException TRANSVAR24
153#TRANSVAR25=createDouble(str)
157#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=0
9#TRANSVAR5=cs.charAt(i)
10#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=csLength - 1
9#TRANSVAR5=searchLength - 1
10#TRANSVAR6=0
11#TRANSVAR7=cs.charAt(i)
12#TRANSVAR8=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
13#ArrayStoreException TRANSVAR4
15#TRANSVAR5=array2.getClass().getComponentType()
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
73#TRANSVAR15=replacementList[i].length() - searchList[i].length()
81#TRANSVAR16=new StringBuilder(text.length() + increase)
85#TRANSVAR17=start
97#TRANSVAR18=0
118#TRANSVAR19=text.length()
119#TRANSVAR20=start
122#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
76#TRANSVAR15=replacementList[i].length() - searchList[i].length()
84#TRANSVAR16=new StringBuilder(text.length() + increase)
88#TRANSVAR17=start
100#TRANSVAR18=0
121#TRANSVAR19=text.length()
122#TRANSVAR20=start
125#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR1
6#TRANSVAR2=searchStr.length()
7#TRANSVAR3=str.length() - len
8#TRANSVAR4=0
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=str.charAt(i)
6#TRANSVAR5=this.entityName(c)
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=Character.codePointAt(str,i)
6#TRANSVAR5=this.entityName(c)
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
9#TRANSVAR6=start
10#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
10#TRANSVAR6=start
11#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
19#TRANSVAR1=val.charAt(val.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=val.indexOf('.')
24#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
52#TRANSVAR7=val.substring(0,val.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(val)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(val)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
22#TRANSVAR1=val.charAt(val.length() - 1)
23#TRANSVAR2
24#TRANSVAR3
25#TRANSVAR4
26#TRANSVAR5=val.indexOf('.')
27#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
55#TRANSVAR7=val.substring(0,val.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(val)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(val)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
23#TRANSVAR4=new StringBuffer()
24#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
26#TRANSVAR4=new StringBuffer()
27#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
3#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
6#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
24#TRANSVAR4=str.charAt(3)
28#TRANSVAR5=str.charAt(4)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
15#TRANSVAR3=str.charAt(1)
16#TRANSVAR4=str.charAt(2)
31#TRANSVAR5=str.charAt(1)
44#TRANSVAR6=str.charAt(3)
48#TRANSVAR7=str.charAt(4)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
37#TRANSVAR4=str.charAt(0)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
38#TRANSVAR4=str.charAt(0)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
22#TRANSVAR5=str.charAt(4)
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
25#TRANSVAR5=str.charAt(4)
2#Locale TRANSVAR0
2#Locale TRANSVAR0
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
63#NumberFormatException TRANSVAR9
73#TRANSVAR10=NumberUtils.createFloat(numeric)
80#NumberFormatException TRANSVAR11
87#TRANSVAR12=NumberUtils.createDouble(numeric)
91#NumberFormatException TRANSVAR13
96#NumberFormatException TRANSVAR14
116#NumberFormatException TRANSVAR15
121#NumberFormatException TRANSVAR16
128#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
130#TRANSVAR18=createFloat(str)
134#NumberFormatException TRANSVAR19
138#TRANSVAR20=createDouble(str)
142#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=thisBuf.length - strLen
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=size - strLen + 1
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
24#TRANSVAR3=false
25#TRANSVAR4=0
26#TRANSVAR5=0
50#TRANSVAR6=0
51#TRANSVAR7=false
84#TRANSVAR8=val.getActualMinimum(fields[i][0])
85#TRANSVAR9=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0.0d
13#TRANSVAR3=0.0d
14#TRANSVAR4=0
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0d
13#TRANSVAR3=0d
14#TRANSVAR4=0
18#TRANSVAR5=1.0d
19#TRANSVAR6=false
24#TRANSVAR7=0.0d
25#TRANSVAR8=0.0d
26#TRANSVAR9=0
2#double TRANSVAR0
2#double TRANSVAR0
6#MaxIterationsExceededException TRANSVAR1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
40#TRANSVAR6=pos.getIndex()
41#TRANSVAR7=parseNextCharacter(source,pos)
63#TRANSVAR8=getDenominatorFormat().parse(source,pos)
74#TRANSVAR9=whole.intValue()
75#TRANSVAR10=num.intValue()
76#TRANSVAR11=den.intValue()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
44#TRANSVAR6=pos.getIndex()
45#TRANSVAR7=parseNextCharacter(source,pos)
67#TRANSVAR8=getDenominatorFormat().parse(source,pos)
82#TRANSVAR9=whole.intValue()
83#TRANSVAR10=num.intValue()
84#TRANSVAR11=den.intValue()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#RealMatrix TRANSVAR0
3#TRANSVAR1=new EigenDecomposition(m)
2#RealMatrix TRANSVAR0
4#TRANSVAR1=m.getRowDimension()
5#TRANSVAR2=new DiagonalMatrix(dim)
6#TRANSVAR3=0
11#TRANSVAR4=new EigenDecomposition(m)
2#final int TRANSVAR0
2#final int TRANSVAR0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
48#TRANSVAR7=0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
38#TRANSVAR7=0
40#TRANSVAR8=Double.MAX_VALUE + boundaries[0][i]
41#TRANSVAR9=new NumberIsTooLargeException(boundaries[1][i],max,true)
61#TRANSVAR10=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=new int[order]
11#TRANSVAR7=0
15#TRANSVAR8=0
16#TRANSVAR9=true
20#TRANSVAR10=r + 1
21#TRANSVAR11=index[i]
22#TRANSVAR12=index[swap[i]]
31#TRANSVAR13=index[r]
37#TRANSVAR14=index[r]
45#TRANSVAR15=r
61#TRANSVAR16=FastMath.sqrt(c[ir][ir])
63#TRANSVAR17=1 / sqrt
64#TRANSVAR18=r + 1
65#TRANSVAR19=index[i]
66#TRANSVAR20=inverse * c[ii][ir]
69#TRANSVAR21=r + 1
70#TRANSVAR22=index[j]
71#TRANSVAR23=c[ii][ij] - e * b[j][r]
85#TRANSVAR24=0
86#TRANSVAR25=0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=0
14#TRANSVAR7=0
15#TRANSVAR8=true
18#TRANSVAR9=r
19#TRANSVAR10=r + 1
20#TRANSVAR11=index[i]
21#TRANSVAR12=index[swapR]
30#TRANSVAR13=index[r]
33#TRANSVAR14=b[r]
39#TRANSVAR15=index[r]
47#TRANSVAR16=r
63#TRANSVAR17=FastMath.sqrt(c[ir][ir])
65#TRANSVAR18=1 / sqrt
66#TRANSVAR19=1 / c[ir][ir]
67#TRANSVAR20=r + 1
68#TRANSVAR21=index[i]
69#TRANSVAR22=inverse * c[ii][ir]
72#TRANSVAR23=r + 1
73#TRANSVAR24=index[j]
74#TRANSVAR25=c[ii][ij] - e * b[j][r]
88#TRANSVAR26=0
89#TRANSVAR27=0
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
39#TRANSVAR17=0
41#TRANSVAR18=0.5 * (a + b)
42#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
43#TRANSVAR20=2 * tol1
46#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
48#TRANSVAR22=0
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
113#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=current
40#TRANSVAR18=0
42#TRANSVAR19=0.5 * (a + b)
43#TRANSVAR20=relativeThreshold * FastMath.abs(x) + absoluteThreshold
44#TRANSVAR21=2 * tol1
47#TRANSVAR22=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
52#TRANSVAR26=0
114#TRANSVAR27=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
31#Integer TRANSVAR9
32#TRANSVAR10=0
33#TRANSVAR11=i + tableau.getArtificialVariableOffset()
34#TRANSVAR12=tableau.getEntry(row,column)
50#TRANSVAR13=null
51#TRANSVAR14=tableau.getWidth()
52#Integer TRANSVAR15
53#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
32#Integer TRANSVAR9
33#TRANSVAR10=0
34#TRANSVAR11=i + tableau.getArtificialVariableOffset()
35#TRANSVAR12=tableau.getEntry(row,column)
53#TRANSVAR13=null
54#TRANSVAR14=tableau.getWidth()
55#Integer TRANSVAR15
56#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
11#TRANSVAR3=new double[len]
12#TRANSVAR4=0
14#TRANSVAR5=0
15#TRANSVAR6=a[i]
16#TRANSVAR7=SPLIT_FACTOR * ai
17#TRANSVAR8=ca - (ca - ai)
18#TRANSVAR9=ai - aHigh
20#TRANSVAR10=b[i]
21#TRANSVAR11=SPLIT_FACTOR * bi
22#TRANSVAR12=cb - (cb - bi)
23#TRANSVAR13=bi - bHigh
25#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
33#TRANSVAR15=prodHigh[0]
34#TRANSVAR16=prodHigh[1]
35#TRANSVAR17=prodHighCur + prodHighNext
36#TRANSVAR18=sHighPrev - prodHighNext
37#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
39#TRANSVAR20=len - 1
40#TRANSVAR21=1
42#TRANSVAR22=sHighPrev + prodHighNext
48#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
54#TRANSVAR24=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
14#TRANSVAR3=new double[len]
15#TRANSVAR4=0
17#TRANSVAR5=0
18#TRANSVAR6=a[i]
19#TRANSVAR7=SPLIT_FACTOR * ai
20#TRANSVAR8=ca - (ca - ai)
21#TRANSVAR9=ai - aHigh
23#TRANSVAR10=b[i]
24#TRANSVAR11=SPLIT_FACTOR * bi
25#TRANSVAR12=cb - (cb - bi)
26#TRANSVAR13=bi - bHigh
28#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
36#TRANSVAR15=prodHigh[0]
37#TRANSVAR16=prodHigh[1]
38#TRANSVAR17=prodHighCur + prodHighNext
39#TRANSVAR18=sHighPrev - prodHighNext
40#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
42#TRANSVAR20=len - 1
43#TRANSVAR21=1
45#TRANSVAR22=sHighPrev + prodHighNext
51#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
57#TRANSVAR24=0
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=1.0
14#TRANSVAR8=1.0
15#TRANSVAR9=hPrev
16#TRANSVAR10=hPrev
19#TRANSVAR11=getA(n,x)
20#TRANSVAR12=getB(n,x)
22#TRANSVAR13=a * hPrev + b * p0
23#TRANSVAR14=a * q1 + b * dPrev
25#TRANSVAR15=1d
26#TRANSVAR16=1d
27#TRANSVAR17=5
28#TRANSVAR18=FastMath.max(a,b)
32#TRANSVAR19=0
48#TRANSVAR20=cN / q2 / cPrev
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=hPrev
14#TRANSVAR8=hPrev
17#TRANSVAR9=getA(n,x)
18#TRANSVAR10=getB(n,x)
20#TRANSVAR11=a + b * dPrev
24#TRANSVAR12=a + b / cPrev
30#TRANSVAR13=cN * dN
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt
83#TRANSVAR28=jpt
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt - 1
83#TRANSVAR28=jpt - 1
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
63#TRANSVAR16=1
65#TRANSVAR17=0
66#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
67#TRANSVAR19=1
78#TRANSVAR20=0
79#TRANSVAR21=b[0] * yDotK[0][j]
80#TRANSVAR22=1
90#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
116#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
118#TRANSVAR25=stepSize * factor
119#TRANSVAR26=stepStart + scaledH
120#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
123#TRANSVAR28=stepStart + hNew
124#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
72#TRANSVAR16=1
74#TRANSVAR17=0
75#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
76#TRANSVAR19=1
87#TRANSVAR20=0
88#TRANSVAR21=b[0] * yDotK[0][j]
89#TRANSVAR22=1
99#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
125#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
127#TRANSVAR25=stepSize * factor
128#TRANSVAR26=stepStart + scaledH
129#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
132#TRANSVAR28=stepStart + hNew
133#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
104#TRANSVAR15
105#TRANSVAR16=0
106#TRANSVAR17=nbPoints
142#TRANSVAR18=computeObjectiveValue(nextX)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
94#TRANSVAR15=agingA - MAXIMAL_AGING
95#TRANSVAR16=(1 << p) - 1
96#TRANSVAR17=p + 1
100#TRANSVAR18=agingB - MAXIMAL_AGING
101#TRANSVAR19=p + 1
102#TRANSVAR20=(1 << p) - 1
110#TRANSVAR21
111#TRANSVAR22=0
112#TRANSVAR23=nbPoints
148#TRANSVAR24=computeObjectiveValue(nextX)
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=begin
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
2#double TRANSVAR0
2#double TRANSVAR0
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
12#EventState TRANSVAR6
19#TRANSVAR7=interpolator.isForward() ? +1 : -1
20#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
23#EventState TRANSVAR9
23#EventState TRANSVAR10
29#final EventState TRANSVAR11
39#TRANSVAR12=occuringEvents.iterator()
40#TRANSVAR13=iterator.next()
44#TRANSVAR14=currentEvent.getEventTime()
50#TRANSVAR15=interpolator.getInterpolatedState()
55#final StepHandler TRANSVAR16
88#TRANSVAR17=interpolator.getInterpolatedState()
89#final EventState TRANSVAR18
96#StepHandler TRANSVAR19
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState()
54#final StepHandler TRANSVAR16
61#final EventState TRANSVAR17
73#final EventState TRANSVAR18
93#TRANSVAR19=interpolator.getInterpolatedState()
94#final EventState TRANSVAR20
101#StepHandler TRANSVAR21
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=(long)rowDimension
5#TRANSVAR3=(long)columnDimension
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
61#TRANSVAR10=FastMath.max(rtol * FastMath.abs(x1),atol)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
36#TRANSVAR21=Vector3D.crossProduct(v1,v2)
37#TRANSVAR22=v3.subtract(u3)
39#TRANSVAR23=u1.crossProduct(u3)
68#TRANSVAR24=1.0 / (c + c)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
33#TRANSVAR21=0.001
37#TRANSVAR22=Vector3D.crossProduct(v1,v2)
38#TRANSVAR23=v3.subtract(u3)
40#TRANSVAR24=u1.crossProduct(u3)
69#TRANSVAR25=1.0 / (c + c)
2#Complex TRANSVAR0
2#Complex TRANSVAR0
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
4#TRANSVAR2=v1.getNormSq()
5#TRANSVAR3=v2.getNormSq()
12#TRANSVAR4=(FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4
13#TRANSVAR5=FastMath.scalb(v1.x,-deltaExp)
14#TRANSVAR6=FastMath.scalb(v1.y,-deltaExp)
15#TRANSVAR7=FastMath.scalb(v1.z,-deltaExp)
16#TRANSVAR8=FastMath.scalb(v2.x,deltaExp)
17#TRANSVAR9=FastMath.scalb(v2.y,deltaExp)
18#TRANSVAR10=FastMath.scalb(v2.z,deltaExp)
27#TRANSVAR11=(x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2,2 * deltaExp)
28#TRANSVAR12=FastMath.rint(256 * ratio) / 256
30#TRANSVAR13=x1 - rho * x2
31#TRANSVAR14=y1 - rho * y2
32#TRANSVAR15=z1 - rho * z2
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
23#TRANSVAR6=1
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
2#final float TRANSVAR0
2#final float TRANSVAR1
2#final float TRANSVAR0
2#final float TRANSVAR1
2#double TRANSVAR0
3#TRANSVAR1=x - mean
7#MaxIterationsExceededException TRANSVAR2
2#double TRANSVAR0
3#TRANSVAR1=x - mean
2#double TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR0
2#double TRANSVAR1
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[cols]
20#TRANSVAR6=new double[cols]
21#TRANSVAR7=new double[cols]
28#TRANSVAR8=true
29#TRANSVAR9=new VectorialPointValuePair(point,objective)
34#TRANSVAR10=current
42#TRANSVAR11=0
43#TRANSVAR12=permutation[k]
52#TRANSVAR13=0
53#TRANSVAR14=jacNorm[k]
57#TRANSVAR15=dk * point[k]
69#TRANSVAR16=0
71#TRANSVAR17=0
72#TRANSVAR18=permutation[j]
73#TRANSVAR19=jacNorm[pj]
75#TRANSVAR20=0
76#TRANSVAR21=0
89#TRANSVAR22=0
94#TRANSVAR23=0
97#TRANSVAR24=0
98#TRANSVAR25=permutation[j]
101#TRANSVAR26=cost
102#TRANSVAR27=residuals
110#TRANSVAR28=0
111#TRANSVAR29=0
112#TRANSVAR30=permutation[j]
115#TRANSVAR31=diag[pj] * lmDir[pj]
129#TRANSVAR32=-1.0
131#TRANSVAR33=cost / previousCost
137#TRANSVAR34=0
138#TRANSVAR35=permutation[j]
139#TRANSVAR36=lmDir[pj]
141#TRANSVAR37=0
145#TRANSVAR38=0
146#TRANSVAR39=0
149#TRANSVAR40=previousCost * previousCost
151#TRANSVAR41=lmPar * lmNorm * lmNorm / pc2
152#TRANSVAR42=coeff1 + 2 * coeff2
153#TRANSVAR43=-(coeff1 + coeff2)
160#TRANSVAR44=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
177#TRANSVAR45=0
178#TRANSVAR46=diag[k] * point[k]
188#TRANSVAR47=0
189#TRANSVAR48=permutation[j]
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[rows]
20#TRANSVAR6=new double[rows]
21#TRANSVAR7=new double[cols]
22#TRANSVAR8=new double[cols]
23#TRANSVAR9=new double[cols]
30#TRANSVAR10=true
31#TRANSVAR11=new VectorialPointValuePair(point,objective)
33#TRANSVAR12=0
39#TRANSVAR13=current
47#TRANSVAR14=0
48#TRANSVAR15=permutation[k]
57#TRANSVAR16=0
58#TRANSVAR17=jacNorm[k]
62#TRANSVAR18=dk * point[k]
74#TRANSVAR19=0
76#TRANSVAR20=0
77#TRANSVAR21=permutation[j]
78#TRANSVAR22=jacNorm[pj]
80#TRANSVAR23=0
81#TRANSVAR24=0
96#TRANSVAR25=0
101#TRANSVAR26=0
104#TRANSVAR27=0
105#TRANSVAR28=permutation[j]
108#TRANSVAR29=cost
109#TRANSVAR30=residuals
120#TRANSVAR31=0
121#TRANSVAR32=0
122#TRANSVAR33=permutation[j]
125#TRANSVAR34=diag[pj] * lmDir[pj]
138#TRANSVAR35=-1.0
140#TRANSVAR36=cost / previousCost
146#TRANSVAR37=0
147#TRANSVAR38=permutation[j]
148#TRANSVAR39=lmDir[pj]
150#TRANSVAR40=0
154#TRANSVAR41=0
155#TRANSVAR42=0
158#TRANSVAR43=previousCost * previousCost
160#TRANSVAR44=lmPar * lmNorm * lmNorm / pc2
161#TRANSVAR45=coeff1 + 2 * coeff2
162#TRANSVAR46=-(coeff1 + coeff2)
169#TRANSVAR47=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
186#TRANSVAR48=0
187#TRANSVAR49=diag[k] * point[k]
203#TRANSVAR50=0
204#TRANSVAR51=permutation[j]
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
56#final StepHandler TRANSVAR16
63#final EventState TRANSVAR17
69#TRANSVAR18=currentEvent.reset(eventT,eventY)
76#final EventState TRANSVAR19
97#TRANSVAR20=interpolator.getInterpolatedState()
98#final EventState TRANSVAR21
105#StepHandler TRANSVAR22
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int methodName(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
52#final EventState TRANSVAR16
58#final StepHandler TRANSVAR17
68#TRANSVAR18=false
69#final EventState TRANSVAR19
96#TRANSVAR20=interpolator.getInterpolatedState()
97#final EventState TRANSVAR21
104#StepHandler TRANSVAR22
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18
70#TRANSVAR19=1
72#TRANSVAR20=0
73#TRANSVAR21=a[k - 1][0] * yDotK[0][j]
74#TRANSVAR22=1
85#TRANSVAR23=0
86#TRANSVAR24=b[0] * yDotK[0][j]
87#TRANSVAR25=1
100#TRANSVAR26=manager.getEventTime() - stepStart
115#TRANSVAR27=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
124#TRANSVAR28=stepStart + stepSize
131#StepHandler TRANSVAR29
154#TRANSVAR30=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
157#TRANSVAR31=stepSize * factor
158#TRANSVAR32=stepStart + scaledH
159#TRANSVAR33=forward ? (nextT >= t) : (nextT <= t)
165#TRANSVAR34=stepStart
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18=new double[y0.length]
57#TRANSVAR19=0
61#TRANSVAR20=0
73#TRANSVAR21=1
75#TRANSVAR22=0
76#TRANSVAR23=a[k - 1][0] * yDotK[0][j]
77#TRANSVAR24=1
88#TRANSVAR25=0
89#TRANSVAR26=b[0] * yDotK[0][j]
90#TRANSVAR27=1
103#TRANSVAR28=manager.getEventTime() - stepStart
118#TRANSVAR29=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
127#TRANSVAR30=stepStart + stepSize
134#StepHandler TRANSVAR31
157#TRANSVAR32=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
160#TRANSVAR33=stepSize * factor
161#TRANSVAR34=stepStart + scaledH
162#TRANSVAR35=forward ? (nextT >= t) : (nextT <= t)
168#TRANSVAR36=stepStart
2#Object TRANSVAR0
2#Object TRANSVAR0
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
38#TRANSVAR9=new UnivariateRealFunction(){
  public double methodName(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

39#final double TRANSVAR10
43#DerivativeException TRANSVAR11
45#EventException TRANSVAR12
50#TRANSVAR13=new BrentSolver()
53#TRANSVAR14=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
88#FunctionEvaluationException TRANSVAR15
89#TRANSVAR16=e.getCause()
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
34#TRANSVAR9=(forward ? 0.25 : -0.25) * convergence
35#TRANSVAR10=0
49#TRANSVAR11=new UnivariateRealFunction(){
  public double methodName(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

50#final double TRANSVAR12
54#DerivativeException TRANSVAR13
56#EventException TRANSVAR14
61#TRANSVAR15=new BrentSolver()
64#TRANSVAR16=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
99#FunctionEvaluationException TRANSVAR17
100#TRANSVAR18=e.getCause()
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int TRANSVAR0
8#TRANSVAR1=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize)
10#TRANSVAR2=0
2#int TRANSVAR0
8#TRANSVAR1=new Object[sampleSize]
10#TRANSVAR2=0
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * n - 1
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * (n - 1)
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final Comparator<RealPointValuePair> TRANSVAR0
10#TRANSVAR1=simplex
11#TRANSVAR2=original[0]
14#TRANSVAR3=evaluateNewSimplex(original,1.0,comparator)
18#TRANSVAR4=simplex
19#TRANSVAR5=evaluateNewSimplex(original,khi,comparator)
30#TRANSVAR6=evaluateNewSimplex(original,gamma,comparator)
2#final Comparator<RealPointValuePair> TRANSVAR0
5#TRANSVAR1=getConvergenceChecker()
11#TRANSVAR2=simplex
12#TRANSVAR3=original[0]
15#TRANSVAR4=evaluateNewSimplex(original,1.0,comparator)
19#TRANSVAR5=simplex
20#TRANSVAR6=evaluateNewSimplex(original,khi,comparator)
31#TRANSVAR7=evaluateNewSimplex(original,gamma,comparator)
38#TRANSVAR8=getIterations()
39#TRANSVAR9=true
40#TRANSVAR10=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
27#TRANSVAR6=i + 1
28#TRANSVAR7=lTData[j]
29#TRANSVAR8=lI[j]
30#TRANSVAR9=lJ[i]
31#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
41#TRANSVAR11=0
43#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
24#TRANSVAR6=i + 1
25#TRANSVAR7=lTData[j]
26#TRANSVAR8=lI[j]
27#TRANSVAR9=lJ[i]
28#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
38#TRANSVAR11=0
40#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=0
15#TRANSVAR4=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=0
2#Object TRANSVAR0
2#Object TRANSVAR0
3#TRANSVAR0=new Line(zero,zero.subtract(direction))
3#TRANSVAR0=new Line(this)
2#Object TRANSVAR0
14#TRANSVAR1=v
19#TRANSVAR2=(Long)freqTable.get(obj)
25#ClassCastException TRANSVAR3
2#Object TRANSVAR0
2#Fraction TRANSVAR0
3#TRANSVAR1=doubleValue()
4#TRANSVAR2=object.doubleValue()
2#Fraction TRANSVAR0
3#TRANSVAR1=((long)numerator) * object.denominator
4#TRANSVAR2=((long)denominator) * object.numerator
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#double TRANSVAR0
3#TRANSVAR1
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#double TRANSVAR0
3#TRANSVAR1=1.0
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
8#TRANSVAR2=0
9#TRANSVAR3=matchers.get(position)
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
5#TRANSVAR2=0
6#TRANSVAR3=matchers.get(position)
11#TRANSVAR4=indexOfVararg
12#TRANSVAR5=matchers.get(position)
19#TRANSVAR6=0
20#TRANSVAR7=matchers.get(position)
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
31#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
34#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
40#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
33#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
36#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
42#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=null
13#TRANSVAR4=(MockMethodInterceptor.MockAccess)mockInstance
17#ClassCastException TRANSVAR5
28#org.mockito.internal.creation.instance.InstantiationException TRANSVAR6
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=new InstantiatorProvider().getInstantiator(settings)
11#TRANSVAR4=null
14#TRANSVAR5=(MockMethodInterceptor.MockAccess)mockInstance
18#ClassCastException TRANSVAR6
29#org.mockito.internal.creation.instance.InstantiationException TRANSVAR7
2#Object TRANSVAR0
2#Object TRANSVAR1
2#Object TRANSVAR0
2#Object TRANSVAR1
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=new MockHandler<T>(oldMockHandler)
5#TRANSVAR3=new MethodInterceptorFilter(newMockHandler,(MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS))
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=newMethodInterceptorFilter(oldMockHandler.getMockSettings())
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
4#TRANSVAR4=mockCandidateFilter.filterCandidate(mocks,field,fieldInstance).thenInject()
2#Description TRANSVAR0
2#Description TRANSVAR0
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
10#TRANSVAR3=m1.getParameterTypes()
11#TRANSVAR4=m2.getParameterTypes()
13#TRANSVAR5=0
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#org.mockito.exceptions.verification.junit.ArgumentsAreDifferent TRANSVAR3
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#AssertionError TRANSVAR3
3#Type TRANSVAR0
3#Type TRANSVAR0
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=0L
11#TRANSVAR5=0
11#TRANSVAR6=partial.size()
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=partial.getValue(0) - 1
11#TRANSVAR5=((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1
15#TRANSVAR6=0L
16#TRANSVAR7=0
16#TRANSVAR8=partial.size()
2#long TRANSVAR0
2#int TRANSVAR1
11#TRANSVAR2=val1 * val2
2#long TRANSVAR0
2#int TRANSVAR1
14#TRANSVAR2=val1 * val2
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,iDefaultYear)
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,chrono.year().get(instantLocal))
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR)
7#TRANSVAR3=convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR)
13#TRANSVAR4=convertUTCToLocal(instant)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=instant - 3 * DateTimeConstants.MILLIS_PER_HOUR
7#TRANSVAR3=instant + 3 * DateTimeConstants.MILLIS_PER_HOUR
8#TRANSVAR4=getOffset(instantBefore)
9#TRANSVAR5=getOffset(instantAfter)
15#TRANSVAR6=offsetBefore - offsetAfter
16#TRANSVAR7=nextTransition(instantBefore)
17#TRANSVAR8=transition - diff
18#TRANSVAR9=transition + diff
24#TRANSVAR10=instant - overlapStart
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
20#IllegalFieldValueException TRANSVAR9
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#String TRANSVAR4
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#TRANSVAR4=null
5#String TRANSVAR5
2#long TRANSVAR0
2#long TRANSVAR0
6#TRANSVAR1=ISOChronology.getInstanceUTC().get(this,duration)
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
26#IllegalFieldValueException TRANSVAR9
36#TRANSVAR10=iZone.getOffsetFromLocal(millis)
39#TRANSVAR11="Illegal instant due to time zone offset transition (" + iZone + ')'
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
27#TRANSVAR9=0
31#IllegalFieldValueException TRANSVAR10
41#TRANSVAR11=iZone.getOffsetFromLocal(millis)
44#TRANSVAR12="Illegal instant due to time zone offset transition (" + iZone + ')'
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
9#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
13#TRANSVAR6=createComposite(elementPairs)
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
10#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
15#TRANSVAR6=createComposite(elementPairs)
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(iChronology,newTypes,newValues)
47#TRANSVAR13=getValues()
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(newTypes,newValues,iChronology)
47#TRANSVAR13=getValues()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
14#TRANSVAR5=years * 12L + months
16#TRANSVAR6=FieldUtils.safeToInt(totalMonths / 12)
21#TRANSVAR7=FieldUtils.safeToInt(totalMonths)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
12#TRANSVAR7=chrono.year().get(instantLocal)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=DateTimeUtils.getChronology(chrono).year().get(instantMillis)
11#TRANSVAR7=instantMillis + chrono.getZone().getOffset(instantMillis)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#int TRANSVAR0
2#int TRANSVAR1
12#TRANSVAR2=0
14#TRANSVAR3=hoursOffset * 60
21#ArithmeticException TRANSVAR4
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
17#TRANSVAR3=hoursOffset * 60
24#ArithmeticException TRANSVAR4
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
3#TRANSVAR0=new LegendItemCollection()
7#TRANSVAR1=this.plot.getIndexOf(this)
8#TRANSVAR2=this.plot.getDataset(index)
12#TRANSVAR3=dataset.getRowCount()
14#TRANSVAR4=0
16#TRANSVAR5=getLegendItem(index,i)
24#TRANSVAR6=seriesCount - 1
26#TRANSVAR7=getLegendItem(index,i)
2#String TRANSVAR0
2#String TRANSVAR0
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p1.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#GeneralPath TRANSVAR0
2#GeneralPath TRANSVAR1
12#TRANSVAR2=p1.getPathIterator(null)
13#TRANSVAR3=p2.getPathIterator(null)
14#TRANSVAR4=new double[6]
15#TRANSVAR5=new double[6]
16#TRANSVAR6=iterator1.isDone() && iterator2.isDone()
21#TRANSVAR7=iterator1.currentSegment(d1)
22#TRANSVAR8=iterator2.currentSegment(d2)
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#CategoryDataset TRANSVAR0
5#TRANSVAR1=new PiePlot(null)
10#TRANSVAR2=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth() - w[2]),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
2#BlockContainer TRANSVAR0
2#Graphics2D TRANSVAR1
3#RectangleConstraint TRANSVAR2
4#TRANSVAR3=new double[5]
5#TRANSVAR4=new double[5]
8#TRANSVAR5=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12#TRANSVAR6=this.topBlock.arrange(g2,c1)
17#TRANSVAR7=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20#TRANSVAR8=this.bottomBlock.arrange(g2,c2)
25#TRANSVAR9=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29#TRANSVAR10=this.leftBlock.arrange(g2,c3)
34#TRANSVAR11=new RectangleConstraint(0.0,new Range(0.0,Math.max(constraint.getWidth() - w[2],0.0)),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38#TRANSVAR12=this.rightBlock.arrange(g2,c4)
43#TRANSVAR13=new RectangleConstraint(w[4],h[4])
3#TRANSVAR0=createCopy(0,getItemCount() - 1)
3#TRANSVAR0=(TimeSeries)super.clone()
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
2#Paint TRANSVAR1
2#Stroke TRANSVAR2
3#Paint TRANSVAR3
3#Stroke TRANSVAR4
3#float TRANSVAR5
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#double TRANSVAR0
3#TRANSVAR1=Math.max(value,this.lowerBound)
5#TRANSVAR2=(int)((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
102#TRANSVAR37=owner.getEntityCollection()
2#String TRANSVAR0
2#Graphics2D TRANSVAR1
3#Rectangle2D TRANSVAR2
3#Rectangle2D TRANSVAR3
3#RectangleEdge TRANSVAR4
4#AxisState TRANSVAR5
4#PlotRenderingInfo TRANSVAR6
15#TRANSVAR7=getLabelFont()
16#TRANSVAR8=getLabelInsets()
19#TRANSVAR9=g2.getFontMetrics()
20#TRANSVAR10=TextUtilities.getTextBounds(label,g2,fm)
21#TRANSVAR11=null
24#TRANSVAR12=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27#TRANSVAR13=t.createTransformedShape(labelBounds)
29#TRANSVAR14=(float)labelBounds.getWidth()
30#TRANSVAR15=(float)labelBounds.getHeight()
31#TRANSVAR16=(float)dataArea.getCenterX()
32#TRANSVAR17=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42#TRANSVAR18=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45#TRANSVAR19=t.createTransformedShape(labelBounds)
47#TRANSVAR20=(float)labelBounds.getWidth()
48#TRANSVAR21=(float)labelBounds.getHeight()
49#TRANSVAR22=(float)dataArea.getCenterX()
50#TRANSVAR23=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60#TRANSVAR24=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63#TRANSVAR25=t.createTransformedShape(labelBounds)
65#TRANSVAR26=(float)labelBounds.getWidth()
66#TRANSVAR27=(float)labelBounds.getHeight()
67#TRANSVAR28=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69#TRANSVAR29=(float)dataArea.getCenterY()
80#TRANSVAR30=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83#TRANSVAR31=t.createTransformedShape(labelBounds)
85#TRANSVAR32=(float)labelBounds.getWidth()
86#TRANSVAR33=(float)labelBounds.getHeight()
87#TRANSVAR34=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89#TRANSVAR35=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101#TRANSVAR36=plotState.getOwner()
103#TRANSVAR37=owner.getEntityCollection()
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
13#TRANSVAR3=start
14#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
16#TRANSVAR5=(TimeSeriesDataItem)item.clone()
20#SeriesException TRANSVAR6
2#int TRANSVAR0
2#int TRANSVAR1
10#TRANSVAR2=(TimeSeries)super.clone()
15#TRANSVAR3=start
16#TRANSVAR4=(TimeSeriesDataItem)this.data.get(index)
18#TRANSVAR5=(TimeSeriesDataItem)item.clone()
22#SeriesException TRANSVAR6
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
70#TRANSVAR14=r.getAnnotations()
71#TRANSVAR15=c.iterator()
73#TRANSVAR16=(XYAnnotation)i.next()
81#TRANSVAR17=includedAnnotations.iterator()
83#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#ValueAxis TRANSVAR0
4#TRANSVAR1=null
5#TRANSVAR2=new ArrayList()
6#TRANSVAR3=new ArrayList()
7#TRANSVAR4=true
10#TRANSVAR5=getDomainAxisIndex(axis)
17#TRANSVAR6=this.annotations.iterator()
19#TRANSVAR7=(XYAnnotation)iterator.next()
28#TRANSVAR8=getRangeAxisIndex(axis)
34#TRANSVAR9=this.annotations.iterator()
36#TRANSVAR10=(XYAnnotation)iterator.next()
46#TRANSVAR11=mappedDatasets.iterator()
48#TRANSVAR12=(XYDataset)iterator.next()
50#TRANSVAR13=getRendererForDataset(d)
71#TRANSVAR14=r.getAnnotations()
72#TRANSVAR15=c.iterator()
74#TRANSVAR16=(XYAnnotation)i.next()
83#TRANSVAR17=includedAnnotations.iterator()
85#TRANSVAR18=(XYAnnotationBoundsInfo)it.next()
2#Number TRANSVAR0
2#Number TRANSVAR1
8#TRANSVAR2=null
9#TRANSVAR3=indexOf(x)
11#TRANSVAR4=(XYDataItem)this.data.get(index)
15#CloneNotSupportedException TRANSVAR5
2#Number TRANSVAR0
2#Number TRANSVAR1
12#TRANSVAR2=null
13#TRANSVAR3=indexOf(x)
15#TRANSVAR4=(XYDataItem)this.data.get(index)
19#CloneNotSupportedException TRANSVAR5
2#Object TRANSVAR0
2#Object TRANSVAR0
10#TRANSVAR1=(ShapeList)obj
11#TRANSVAR2=size()
12#TRANSVAR3=0
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#TimePeriod TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=period.getStart().getTime()
5#TRANSVAR3=period.getEnd().getTime()
6#TRANSVAR4=start + ((end - start) / 2)
9#TRANSVAR5=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20#TRANSVAR6=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31#TRANSVAR7=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33#TRANSVAR8=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35#TRANSVAR9=s + (e - s) / 2
45#TRANSVAR10=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()
47#TRANSVAR11=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()
49#TRANSVAR12=s + (e - s) / 2
59#TRANSVAR13=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70#TRANSVAR14=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#Date TRANSVAR0
2#TimeZone TRANSVAR1
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#RegularTimePeriod TRANSVAR0
2#RegularTimePeriod TRANSVAR1
15#TRANSVAR2=false
16#TRANSVAR3=getIndex(start)
23#TRANSVAR4=getIndex(end)
32#TRANSVAR5=(TimeSeries)super.clone()
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#final StringBuffer TRANSVAR0
3#final Option TRANSVAR1
4#final boolean TRANSVAR2
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=new ArrayList()
6#TRANSVAR4=false
8#TRANSVAR5=0
10#TRANSVAR6=arguments[i]
23#TRANSVAR7=Util.stripLeadingHyphens(arg)
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final WriteableCommandLine TRANSVAR0
5#TRANSVAR1=0
8#TRANSVAR2=null
10#TRANSVAR3=options.iterator()
11#TRANSVAR4=(Option)i.next()
14#TRANSVAR5=option.isRequired() || option instanceof Group
43#TRANSVAR6=anonymous.iterator()
44#TRANSVAR7=(Option)i.next()
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
2#final Option TRANSVAR0
3#List TRANSVAR1
5#TRANSVAR2=(List)values.get(option)
22#TRANSVAR3=valueList.size()
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=1
6#TRANSVAR3=String.valueOf(token.charAt(i))
2#String TRANSVAR0
2#boolean TRANSVAR1
2#String TRANSVAR0
2#boolean TRANSVAR1
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
2#Options TRANSVAR0
2#String[] TRANSVAR1
2#boolean TRANSVAR2
8#TRANSVAR3=Arrays.asList(arguments).iterator()
14#TRANSVAR4=(String)iter.next()
19#TRANSVAR5=token.indexOf('=')
20#TRANSVAR6=pos == -1 ? token : token.substring(0,pos)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
21#TRANSVAR6=pos
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
24#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
23#TRANSVAR5=createPadding(nextLineTabStop)
2#String TRANSVAR0
5#TRANSVAR1=new Option(opt,description)
2#String TRANSVAR0
4#TRANSVAR1=null
2#Option TRANSVAR0
2#Option TRANSVAR0
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#Properties TRANSVAR0
9#TRANSVAR1=properties.propertyNames()
11#TRANSVAR2=e.nextElement().toString()
15#TRANSVAR3=getOptions().getOption(option)
18#TRANSVAR4=properties.getProperty(option)
28#RuntimeException TRANSVAR5
2#String TRANSVAR0
8#TRANSVAR1=str.length()
2#String TRANSVAR0
4#TRANSVAR1=str.length()
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
4#TRANSVAR3
21#TRANSVAR4
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
10#String TRANSVAR2
2#String TRANSVAR0
6#TRANSVAR1=new ArrayList<String>()
13#String TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
2#String TRANSVAR0
11#TRANSVAR1=token.indexOf("=")
12#TRANSVAR2=pos == -1 ? token.substring(1) : token.substring(1,pos)
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer()
9#TRANSVAR0=requiredOptions.iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#final String TRANSVAR0
2#final Class<T> TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR0
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
2#StringBuffer TRANSVAR0
2#int TRANSVAR1
3#int TRANSVAR2
3#String TRANSVAR3
5#TRANSVAR4=findWrapPos(text,width,0)
17#TRANSVAR5=createPadding(nextLineTabStop)
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
9#TRANSVAR0=getRequiredOptions().iterator()
10#TRANSVAR1=new StringBuffer("Missing required option")
2#Scope TRANSVAR0
13#TRANSVAR1=fnScope.getRootNode()
21#TRANSVAR2=getFunctionArgList(function)
22#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
26#TRANSVAR4
28#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Scope TRANSVAR0
16#TRANSVAR1=fnScope.getRootNode()
24#TRANSVAR2=getFunctionArgList(function)
25#TRANSVAR3=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
29#TRANSVAR4
31#TRANSVAR5=fnScope.getVar(lastArg.getString())
2#Node TRANSVAR0
2#boolean TRANSVAR1
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
3#TRANSVAR0=new CompilerOptions()
5#TRANSVAR1=flags.compilation_level
11#TRANSVAR2=flags.warning_level
13#FormattingOption TRANSVAR3
2#Node TRANSVAR0
2#Node TRANSVAR1
5#TRANSVAR2=new MakeDeclaredNamesUnique()
6#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#Node TRANSVAR0
2#Node TRANSVAR1
6#TRANSVAR2=new MakeDeclaredNamesUnique()
7#TRANSVAR3=new NodeTraversal(compiler,renamer)
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#JSType TRANSVAR0
3#TRANSVAR1=new UnionTypeBuilder(registry)
4#JSType TRANSVAR2
11#JSType TRANSVAR3
19#TRANSVAR4=builder.build()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=new StringBuilder()
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
49#TRANSVAR12=InlineCostEstimator.getCost(n)
52#TRANSVAR13=Node.newString("")
57#TRANSVAR14=arrayFoldedChildren.remove(0)
65#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
77#TRANSVAR16="[].join()".length()
84#Node TRANSVAR17
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#Node TRANSVAR3
3#Node TRANSVAR4
8#TRANSVAR5=left.getFirstChild()
9#TRANSVAR6=arrayNode.getNext()
16#TRANSVAR7=NodeUtil.getStringValue(right)
17#TRANSVAR8=Lists.newLinkedList()
18#TRANSVAR9=null
19#TRANSVAR10=0
20#TRANSVAR11=arrayNode.getFirstChild()
51#TRANSVAR12=InlineCostEstimator.getCost(n)
54#TRANSVAR13=Node.newString("")
59#TRANSVAR14=arrayFoldedChildren.remove(0)
67#TRANSVAR15=new Node(Token.ADD,Node.newString(""),foldedStringNode)
79#TRANSVAR16="[].join()".length()
86#Node TRANSVAR17
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
3#TRANSVAR0=new CompilerOptions()
12#TRANSVAR1=flags.compilationLevel
27#TRANSVAR2=flags.warningLevel
29#FormattingOption TRANSVAR3
45#IOException TRANSVAR4
2#JsDocToken TRANSVAR0
2#JsDocToken TRANSVAR0
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=n.getLastChild()
8#TRANSVAR4=n.getFirstChild()
9#TRANSVAR5=getJSType(objNode)
2#JSType TRANSVAR0
2#JSType TRANSVAR0
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=inferTemplateTypesFromParameters(fnType,n)
17#TRANSVAR4=new TemplateTypeReplacer(registry,inferred)
19#TRANSVAR5=n.getFirstChild()
21#TRANSVAR6=fnType.visit(replacer).toMaybeFunctionType()
3#Node TRANSVAR0
3#FunctionType TRANSVAR1
4#TRANSVAR2=fnType.getTemplateTypeMap().getTemplateKeys()
11#TRANSVAR3=Maps.filterKeys(inferTemplateTypesFromParameters(fnType,n),new Predicate<TemplateType>(){
  @Override public boolean apply(  TemplateType key){
    return keys.contains(key);
  }
}
)
16#TemplateType TRANSVAR4
23#TRANSVAR5=new TemplateTypeReplacer(registry,inferred)
25#TRANSVAR6=n.getFirstChild()
27#TRANSVAR7=fnType.visit(replacer).toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=left.getNext()
6#TRANSVAR5=arg.getString()
7#TRANSVAR6=providedNames.get(ns)
12#TRANSVAR7=provided.explicitModule
17#TRANSVAR8=t.getModule()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getFirstChild()
4#TRANSVAR4=n.getParent()
5#TRANSVAR5=createNameInformation(t,nameNode)
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
19#TRANSVAR5=callNode.getFirstChild().getNext()
38#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
11#TRANSVAR3=callNode.getFirstChild().getNext()
30#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
12#TRANSVAR3=callNode.getFirstChild().getNext()
31#TRANSVAR4=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
3#Node TRANSVAR0
3#Node TRANSVAR1
8#TRANSVAR2=fnNode.getLastChild()
10#TRANSVAR3=false
13#TRANSVAR4=block.getFirstChild()
21#TRANSVAR5=callNode.getFirstChild().getNext()
40#TRANSVAR6=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
2#Node TRANSVAR0
2#boolean TRANSVAR1
10#TRANSVAR2=getJSType(n.getFirstChild()).dereference()
12#TRANSVAR3=n.getLastChild().getString()
34#TRANSVAR4=getJSType(n)
36#TRANSVAR5=type.dereference()
46#TRANSVAR6=n.getQualifiedName()
2#Node TRANSVAR0
2#boolean TRANSVAR1
3#TRANSVAR2=getJSType(n)
5#TRANSVAR3=type.dereference()
22#TRANSVAR4=getJSType(n.getFirstChild()).dereference()
24#TRANSVAR5=n.getLastChild().getString()
46#TRANSVAR6=n.getQualifiedName()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
9#TRANSVAR3=child.getString()
10#TRANSVAR4=typeSystem.getType(getScope(),n,name)
12#TRANSVAR5=getProperty(name)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
12#TRANSVAR3=child.getString()
13#TRANSVAR4=typeSystem.getType(getScope(),n,name)
15#TRANSVAR5=getProperty(name)
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#JSModule TRANSVAR0
2#Scope TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
5#TRANSVAR4
6#TRANSVAR5=false
7#TRANSVAR6=Name.Type.OTHER
8#TRANSVAR7=false
43#TRANSVAR8=n.getFirstChild()
55#TRANSVAR9=parent.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
3#TRANSVAR1=getCfg().getOutEdges(cfgNode)
4#DiGraphEdge<Node,Branch> TRANSVAR2
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#TRANSVAR0=getOneAndOnlyAssignment()
9#TRANSVAR1=ref.getBasicBlock()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
56#TRANSVAR11=referenceInfo.references
57#TRANSVAR12=1
58#TRANSVAR13=refs.get(i).getNode()
60#TRANSVAR14=aliasCandidates.get(nameNode)
63#TRANSVAR15
65#TRANSVAR16=aliasInit.getAssignedValue()
3#Var TRANSVAR0
3#ReferenceCollection TRANSVAR1
4#boolean TRANSVAR2
5#TRANSVAR3=referenceInfo.references.size()
6#TRANSVAR4=referenceInfo.references.get(0)
7#TRANSVAR5=referenceInfo.getInitializingReference()
8#TRANSVAR6=(declaration == init) ? 2 : 3
14#TRANSVAR7
19#TRANSVAR8=declaration.getNode()
28#TRANSVAR9=referenceInfo.references.get(firstRefAfterInit - 1)
38#TRANSVAR10=init.getAssignedValue()
58#TRANSVAR11=referenceInfo.references
59#TRANSVAR12=1
60#TRANSVAR13=refs.get(i).getNode()
62#TRANSVAR14=aliasCandidates.get(nameNode)
65#TRANSVAR15
67#TRANSVAR16=aliasInit.getAssignedValue()
2#Comment TRANSVAR0
2#Comment TRANSVAR0
3#TRANSVAR1=Pattern.compile("(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]")
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=Context.OTHER
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Context TRANSVAR1
7#TRANSVAR2=n.getType()
8#TRANSVAR3=NodeUtil.opToStr(type)
9#TRANSVAR4=n.getChildCount()
10#TRANSVAR5=n.getFirstChild()
11#TRANSVAR6=n.getLastChild()
19#TRANSVAR7=NodeUtil.precedence(type)
23#TRANSVAR8=getContextForNoInOperator(context)
57#TRANSVAR9=first.getNext().getFirstChild()
179#TRANSVAR10=NodeUtil.precedence(type)
180#TRANSVAR11=getContextForNoInOperator(context)
195#TRANSVAR12=regexpEscape(first.getString(),outputCharsetEncoder)
211#TRANSVAR13=(context == Context.START_OF_EXPR)
247#TRANSVAR14=n.getString()
248#TRANSVAR15=first
249#TRANSVAR16=fn.getChildAtIndex(1)
250#TRANSVAR17=fn.getLastChild()
261#TRANSVAR18=getSimpleNumber(name)
278#TRANSVAR19=context == Context.PRESERVE_BLOCK
283#TRANSVAR20=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289#TRANSVAR21=first
370#TRANSVAR22=(first.isNumber())
413#TRANSVAR23=type == Token.INC ? "++" : "--"
414#TRANSVAR24=n.getIntProp(Node.INCRDECR_PROP)
451#TRANSVAR25=childCount == 3
452#TRANSVAR26=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538#TRANSVAR27=NodeUtil.precedence(type)
550#TRANSVAR28=first.getNext()
577#TRANSVAR29=(context == Context.START_OF_EXPR)
582#TRANSVAR30=first
591#TRANSVAR31=c.getString()
604#TRANSVAR32=getSimpleNumber(key)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(constructor).restrictByNotNullOrUndefined()
6#TRANSVAR4=type.toMaybeFunctionType()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
38#TRANSVAR9=n.getLastChild()
45#TRANSVAR10=n.getLastChild()
60#Node TRANSVAR11
64#TRANSVAR12=c
65#TRANSVAR13
65#TRANSVAR14
90#TRANSVAR15=n.getLastChild()
2#Node TRANSVAR0
2#int TRANSVAR1
2#String TRANSVAR2
13#TRANSVAR3=n.getFirstChild().getNext()
15#TRANSVAR4=ifBlock.getNext()
24#TRANSVAR5=n.getFirstChild()
26#TRANSVAR6=NodeUtil.getCatchBlock(n)
29#TRANSVAR7=allCatchNodes.getFirstChild()
30#TRANSVAR8=catchNode.getLastChild()
41#TRANSVAR9=n.getLastChild()
56#Node TRANSVAR10
60#TRANSVAR11=c
61#TRANSVAR12
61#TRANSVAR13
86#TRANSVAR14=n.getLastChild()
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
7#TRANSVAR2=0
8#TRANSVAR3=s.charAt(index)
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
7#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
16#TRANSVAR3=c.getNext()
2#Node TRANSVAR0
11#TRANSVAR1=0
13#TRANSVAR2=node.getFirstChild()
15#TRANSVAR3=c.getNext()
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#GlobalNamespace TRANSVAR0
4#TRANSVAR1=new ArrayDeque<Name>(namespace.getNameForest())
6#TRANSVAR2=workList.pop()
17#TRANSVAR3=Lists.newArrayList(name.getRefs())
18#Ref TRANSVAR4
2#String TRANSVAR0
3#TRANSVAR1=s.length()
10#TRANSVAR2=1
2#String TRANSVAR0
3#TRANSVAR1=s.length()
11#TRANSVAR2=1
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
151#TRANSVAR22=thenOp.removeFirstChild()
152#TRANSVAR23=thenOp.removeFirstChild()
153#TRANSVAR24=elseOp.getLastChild()
156#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
157#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
159#TRANSVAR27=NodeUtil.newExpr(assign)
171#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
178#TRANSVAR29=isVarBlock(thenBranch)
179#TRANSVAR30=isVarBlock(elseBranch)
185#TRANSVAR31=getBlockVar(thenBranch)
186#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
188#TRANSVAR33=var.getFirstChild()
189#TRANSVAR34=elseAssign.getFirstChild()
194#TRANSVAR35=name1.removeChildren()
195#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
197#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
210#TRANSVAR38=getBlockVar(elseBranch)
211#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
213#TRANSVAR40=thenAssign.getFirstChild()
214#TRANSVAR41=var.getFirstChild()
219#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
220#TRANSVAR43=name2.removeChildren()
222#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
2#Node TRANSVAR0
4#TRANSVAR1=n.getParent()
6#TRANSVAR2=n.getFirstChild()
15#TRANSVAR3=cond.getNext()
16#TRANSVAR4=thenBranch.getNext()
20#TRANSVAR5=getBlockExpression(thenBranch)
37#TRANSVAR6=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40#TRANSVAR7=NodeUtil.newExpr(or)
59#TRANSVAR8=IR.and(cond,expr.removeFirstChild()).srcref(n)
60#TRANSVAR9=NodeUtil.newExpr(and)
70#TRANSVAR10=thenBranch.getFirstChild()
73#TRANSVAR11=innerIf.getFirstChild()
74#TRANSVAR12=innerCond.getNext()
75#TRANSVAR13=innerThenBranch.getNext()
116#TRANSVAR14=getBlockReturnExpression(thenBranch)
117#TRANSVAR15=getBlockReturnExpression(elseBranch)
125#TRANSVAR16=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133#TRANSVAR17=isFoldableExpressBlock(thenBranch)
134#TRANSVAR18=isFoldableExpressBlock(elseBranch)
137#TRANSVAR19=getBlockExpression(thenBranch).getFirstChild()
138#TRANSVAR20=getBlockExpression(elseBranch).getFirstChild()
142#TRANSVAR21=thenOp.getFirstChild()
153#TRANSVAR22=thenOp.removeFirstChild()
154#TRANSVAR23=thenOp.removeFirstChild()
155#TRANSVAR24=elseOp.getLastChild()
158#TRANSVAR25=IR.hook(cond,thenExpr,elseExpr).srcref(n)
159#TRANSVAR26=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
161#TRANSVAR27=NodeUtil.newExpr(assign)
173#TRANSVAR28=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
180#TRANSVAR29=isVarBlock(thenBranch)
181#TRANSVAR30=isVarBlock(elseBranch)
187#TRANSVAR31=getBlockVar(thenBranch)
188#TRANSVAR32=getBlockExpression(elseBranch).getFirstChild()
190#TRANSVAR33=var.getFirstChild()
191#TRANSVAR34=elseAssign.getFirstChild()
196#TRANSVAR35=name1.removeChildren()
197#TRANSVAR36=elseAssign.getLastChild().detachFromParent()
199#TRANSVAR37=IR.hook(cond,thenExpr,elseExpr).srcref(n)
212#TRANSVAR38=getBlockVar(elseBranch)
213#TRANSVAR39=getBlockExpression(thenBranch).getFirstChild()
215#TRANSVAR40=thenAssign.getFirstChild()
216#TRANSVAR41=var.getFirstChild()
221#TRANSVAR42=thenAssign.getLastChild().detachFromParent()
222#TRANSVAR43=name2.removeChildren()
224#TRANSVAR44=IR.hook(cond,thenExpr,elseExpr).srcref(n)
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#TRANSVAR0=stream.getRemainingJSDocLine()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
3#Node TRANSVAR0
3#Node TRANSVAR1
3#ControlFlowAnalysis TRANSVAR2
22#TRANSVAR3=node.getParent()
76#Node TRANSVAR4
86#TRANSVAR5=node.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR0
4#TRANSVAR1=n.getLastChild()
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
2#JSType TRANSVAR0
5#TRANSVAR1=that.getTypesUnderInequality(this)
12#TRANSVAR2=getNativeType(JSTypeNative.NO_TYPE)
2#Node TRANSVAR0
21#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
24#TRANSVAR1=n.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
13#TRANSVAR2=false
14#TRANSVAR3=ImmutableList.builder()
16#ObjectType TRANSVAR4
17#TRANSVAR5=(ObjectType)iface.resolve(t,scope)
26#TRANSVAR6=0
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
11#TRANSVAR2=safeResolve(typeOfThis,t,scope)
16#TRANSVAR3=false
17#TRANSVAR4=ImmutableList.builder()
19#ObjectType TRANSVAR5
20#TRANSVAR6=(ObjectType)iface.resolve(t,scope)
29#TRANSVAR7=0
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
7#TRANSVAR2=node.getFirstChild()
13#TRANSVAR3=node.getFirstChild()
3#Node TRANSVAR0
3#Set<String> TRANSVAR1
12#TRANSVAR2=node.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38#TRANSVAR2=Lists.newArrayList()
44#TRANSVAR3=new ComposeWarningsGuard(guards)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
14#TRANSVAR4=right.getDouble()
15#TRANSVAR5=(int)index
26#TRANSVAR6=left.getFirstChild()
27#TRANSVAR7=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=0
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
2#JSType TRANSVAR0
7#TRANSVAR1=(ArrowType)other
36#TRANSVAR2=parameters.getFirstChild()
37#TRANSVAR3=that.parameters.getFirstChild()
39#TRANSVAR4=thisParam.getJSType()
40#TRANSVAR5=thatParam.getJSType()
48#TRANSVAR6=thisParam.isVarArgs()
49#TRANSVAR7=thatParam.isVarArgs()
50#TRANSVAR8=thisIsVarArgs || thisParam.isOptionalArg()
51#TRANSVAR9=thatIsVarArgs || thatParam.isOptionalArg()
60#TRANSVAR10=thatIsVarArgs && (thatParamType == null || thatParamType.isUnknownType() || thatParamType.isNoType())
2#JSType TRANSVAR0
2#JSType TRANSVAR0
20#JSType TRANSVAR1
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
27#TRANSVAR3=n.getString()
28#TRANSVAR4=t.getScope()
29#TRANSVAR5=scope.getVar(name)
31#TRANSVAR6=var.getScope()
42#TRANSVAR7=NodeUtil.getRootOfQualifiedName(n).getString()
43#TRANSVAR8=t.getScope()
44#TRANSVAR9=scope.getVar(name)
46#TRANSVAR10=var.getScope()
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
36#TRANSVAR5=rValue.getFirstChild()
37#TRANSVAR6=firstClause.getNext()
38#TRANSVAR7=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
2#String TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#@Nullable Node TRANSVAR3
24#TRANSVAR4=null
26#TRANSVAR5=rValue.getJSDocInfo()
40#TRANSVAR6=rValue.getFirstChild()
41#TRANSVAR7=firstClause.getNext()
42#TRANSVAR8=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
14#TRANSVAR5=true
31#TRANSVAR6=n.getParent()
41#TRANSVAR7=getFunctionAnalysisResults(scope.getRootNode())
3#String TRANSVAR0
3#Node TRANSVAR1
3#JSDocInfo TRANSVAR2
4#Node TRANSVAR3
4#JSType TRANSVAR4
11#TRANSVAR5=qName.substring(0,qName.lastIndexOf(".prototype"))
12#TRANSVAR6=scope.getSlot(className)
13#TRANSVAR7=slot == null ? null : slot.getType()
20#TRANSVAR8=true
37#TRANSVAR9=n.getParent()
47#TRANSVAR10=getFunctionAnalysisResults(scope.getRootNode())
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=left.hasChildren()
27#TRANSVAR7=!isVarDeclaration || var == null || var.isTypeInferred()
47#TRANSVAR8=var.getType()
53#TRANSVAR9=left.getQualifiedName()
3#FlowScope TRANSVAR0
3#Node TRANSVAR1
3#JSType TRANSVAR2
3#JSType TRANSVAR3
7#TRANSVAR4=left.getString()
8#TRANSVAR5=syntacticScope.getVar(varName)
9#TRANSVAR6=var == null ? null : var.getType()
10#TRANSVAR7=left.hasChildren() && varType != null && !var.isTypeInferred()
29#TRANSVAR8=isVarDeclaration && !resultType.isNullType() && !resultType.isVoidType()
51#TRANSVAR9=var.getType()
57#TRANSVAR10=left.getQualifiedName()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
49#TRANSVAR4=false
51#CompilerInput TRANSVAR5
54#String TRANSVAR6
64#CircularDependencyException TRANSVAR7
72#MissingProvideException TRANSVAR8
90#CompilerInput TRANSVAR9
91#TRANSVAR10=input.getAstRoot(this)
108#TRANSVAR11=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#FlowScope TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
9#TRANSVAR3=node.getQualifiedName()
12#TRANSVAR4=node.getJSType()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
11#String TRANSVAR8
12#TRANSVAR9=properties.get(name)
24#ObjectType TRANSVAR10
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
3#HashMap<String,ObjectType> TRANSVAR3
4#HashMap<String,ObjectType> TRANSVAR4
5#ObjectType TRANSVAR5
6#TRANSVAR6=interfaceType.getImplicitPrototype()
7#TRANSVAR7
15#String TRANSVAR8
16#TRANSVAR9=properties.get(name)
28#ObjectType TRANSVAR10
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
15#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#Node TRANSVAR0
4#TRANSVAR1=n.getFirstChild()
13#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
36#Node TRANSVAR5
37#TRANSVAR6=an.getType()
50#TRANSVAR7="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
20#TRANSVAR3=parent.getParent()
30#Node TRANSVAR4
31#TRANSVAR5=an.getType()
48#TRANSVAR6=NodeUtil.isExpressionResultUsed(n)
49#TRANSVAR7=NodeUtil.isSimpleOperatorType(n.getType())
57#TRANSVAR8="This code lacks side-effects. Is there a bug?"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
29#TRANSVAR3=NodeUtil.isExpressionResultUsed(n)
30#TRANSVAR4=NodeUtil.isSimpleOperatorType(n.getType())
33#TRANSVAR5="This code lacks side-effects. Is there a bug?"
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3=n.getParent()
17#TRANSVAR4=right.getDouble()
18#TRANSVAR5=(int)index
29#TRANSVAR6=left.getFirstChild()
30#TRANSVAR7=null
31#TRANSVAR8=0
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#NodeTraversal TRANSVAR0
3#TRANSVAR1=t.getScope()
4#Var TRANSVAR2
5#TRANSVAR3=v.getNode()
6#TRANSVAR4=n.getType()
7#TRANSVAR5=n.getParent()
10#TRANSVAR6=n.getString()
11#TRANSVAR7=scope.getVar(name)
14#TRANSVAR8=aliasVar.getInitialValue().getQualifiedName()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
4#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
26#TRANSVAR6=constructor.getNext()
2#Node TRANSVAR0
2#FlowScope TRANSVAR1
5#TRANSVAR2=n.getFirstChild()
6#TRANSVAR3=constructor.getJSType()
7#TRANSVAR4=null
13#TRANSVAR5=constructorType.toMaybeFunctionType()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#Reference TRANSVAR2
5#TRANSVAR3=ref.getNode()
6#TRANSVAR4=ref.getParent()
7#TRANSVAR5=ref.getGrandparent()
36#TRANSVAR6=ref.getAssignedValue()
55#TRANSVAR7=val.getFirstChild()
64#TRANSVAR8=child.getFirstChild()
68#Reference TRANSVAR9
69#TRANSVAR10=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
29#TRANSVAR7=parent.getLastChild().getString()
45#TRANSVAR8=ref.getAssignedValue()
64#TRANSVAR9=val.getFirstChild()
74#TRANSVAR10=child.getFirstChild()
78#Reference TRANSVAR11
79#TRANSVAR12=t.getParent()
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
53#CompilerInput TRANSVAR5
56#String TRANSVAR6
66#CircularDependencyException TRANSVAR7
74#MissingProvideException TRANSVAR8
85#CompilerInput TRANSVAR9
86#TRANSVAR10=input.getAstRoot(this)
94#TRANSVAR11=n.getJSDocInfo()
119#CompilerInput TRANSVAR12
120#TRANSVAR13=input.getAstRoot(this)
137#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
3#TRANSVAR0=options.devMode != DevMode.OFF
29#TRANSVAR1=newTracer("parseInputs")
33#CompilerInput TRANSVAR2
34#TRANSVAR3=input.getAstRoot(this)
47#TRANSVAR4=false
52#CompilerInput TRANSVAR5
55#String TRANSVAR6
65#CircularDependencyException TRANSVAR7
73#MissingProvideException TRANSVAR8
84#CompilerInput TRANSVAR9
85#TRANSVAR10=input.getAstRoot(this)
93#TRANSVAR11=n.getJSDocInfo()
118#CompilerInput TRANSVAR12
119#TRANSVAR13=input.getAstRoot(this)
136#TRANSVAR14=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
70#TRANSVAR7=builder.toString()
76#TRANSVAR8=stream.getLineno()
77#TRANSVAR9=stream.getCharno()
2#JsDocToken TRANSVAR0
3#WhitespaceOption TRANSVAR1
11#TRANSVAR2=stream.getLineno()
12#TRANSVAR3=stream.getCharno() + 1
15#TRANSVAR4=stream.getRemainingJSDocLine()
20#TRANSVAR5=new StringBuilder()
26#TRANSVAR6=false
31#TRANSVAR7=-1
65#TRANSVAR8=token == JsDocToken.EOC
68#TRANSVAR9=stream.getCharno() - lineStartChar
69#TRANSVAR10=0
85#TRANSVAR11=builder.toString()
91#TRANSVAR12=stream.getLineno()
92#TRANSVAR13=stream.getCharno()
2#ObjectType TRANSVAR0
15#String TRANSVAR1
16#TRANSVAR2=constraintObj.getPropertyType(prop)
18#TRANSVAR3=propType
2#ObjectType TRANSVAR0
18#String TRANSVAR1
19#TRANSVAR2=constraintObj.getPropertyType(prop)
21#TRANSVAR3=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
11#TRANSVAR3=ObjectType.cast(type.restrictByNotNullOrUndefined())
13#String TRANSVAR4
14#TRANSVAR5=constraintObj.getPropertyType(prop)
16#TRANSVAR6=propType
3#JSType TRANSVAR0
3#JSType TRANSVAR1
8#TRANSVAR2=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
3#Reference TRANSVAR0
4#Reference TRANSVAR1
5#Reference TRANSVAR2
36#TRANSVAR3=initialization.getAssignedValue()
45#TRANSVAR4=reference.getParent()
47#TRANSVAR5=compiler.getCodingConvention()
50#TRANSVAR6=convention.getClassesDefinedByCall(callNode)
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
6#TRANSVAR2=isNegativeZero(x)
12#TRANSVAR3=(long)x
13#TRANSVAR4=value
14#TRANSVAR5=0
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#boolean TRANSVAR0
10#TRANSVAR1=Sets.newTreeSet()
11#TRANSVAR2=this
18#TRANSVAR3=new StringBuilder()
21#TRANSVAR4=0
22#String TRANSVAR5
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#ErrorReporter TRANSVAR0
2#StaticScope<JSType> TRANSVAR1
7#TRANSVAR2=resolveViaRegistry(t,enclosing)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,false)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=createNameInformation(t,n,parent)
11#TRANSVAR4=n.getFirstChild()
12#TRANSVAR5=createNameInformation(t,nameNode,n)
14#TRANSVAR6=getName(nameNode.getString(),true)
18#TRANSVAR7=createNameInformation(t,n,parent)
27#TRANSVAR8=n.getFirstChild()
29#TRANSVAR9=createNameInformation(t,nameNode,n)
38#TRANSVAR10=n.getFirstChild()
39#TRANSVAR11=createNameInformation(t,nameNode,n)
41#TRANSVAR12=getName(ns.name,true)
2#ForInLoop TRANSVAR0
2#ForInLoop TRANSVAR0
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#String TRANSVAR0
9#TRANSVAR1=newcode.charAt(0)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
115#TRANSVAR13=getObjectSlot(ownerName)
119#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
134#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
137#TRANSVAR16=ownerType.getTypeOfThis()
138#TRANSVAR17=codingConvention.getDelegateSuperclassName()
139#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#NodeTraversal TRANSVAR0
2#JSDocInfo TRANSVAR1
3#Node TRANSVAR2
3#Node TRANSVAR3
3#Node TRANSVAR4
4#TRANSVAR5=n.getFirstChild()
5#TRANSVAR6=ownerNode.getQualifiedName()
6#TRANSVAR7=n.getQualifiedName()
7#TRANSVAR8=n.getLastChild().getString()
24#TRANSVAR9=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35#TRANSVAR10=scope.getVar(qName)
42#TRANSVAR11=ObjectType.cast(qVar.getType())
97#TRANSVAR12=true
118#TRANSVAR13=getObjectSlot(ownerName)
122#TRANSVAR14=t.getInput() != null && t.getInput().isExtern()
137#TRANSVAR15=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
140#TRANSVAR16=ownerType.getTypeOfThis()
141#TRANSVAR17=codingConvention.getDelegateSuperclassName()
142#TRANSVAR18=delegateName == null ? null : typeRegistry.getType(delegateName)
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
32#TRANSVAR7=parent.getLastChild().getString()
48#TRANSVAR8=ref.getAssignedValue()
67#TRANSVAR9=val.getFirstChild()
77#TRANSVAR10=child.getFirstChild()
81#Reference TRANSVAR11
82#TRANSVAR12=t.getParent()
2#List<Reference> TRANSVAR0
3#TRANSVAR1=false
4#TRANSVAR2=Sets.newHashSet()
5#Reference TRANSVAR3
6#TRANSVAR4=ref.getNode()
7#TRANSVAR5=ref.getParent()
8#TRANSVAR6=ref.getGrandparent()
35#TRANSVAR7=parent.getLastChild().getString()
51#TRANSVAR8=ref.getAssignedValue()
70#TRANSVAR9=val.getFirstChild()
80#TRANSVAR10=child.getFirstChild()
84#Reference TRANSVAR11
85#TRANSVAR12=t.getParent()
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
26#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
27#TRANSVAR6=Lists.newLinkedList()
28#TRANSVAR7=null
29#TRANSVAR8=0
30#TRANSVAR9=null
31#TRANSVAR10=arrayNode.getFirstChild()
67#TRANSVAR11=InlineCostEstimator.getCost(n)
70#TRANSVAR12=Node.newString("")
75#TRANSVAR13=arrayFoldedChildren.remove(0)
83#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
96#TRANSVAR15="[].join()".length()
103#Node TRANSVAR16
2#Node TRANSVAR0
3#TRANSVAR1=n.getFirstChild()
9#TRANSVAR2=callTarget.getNext()
16#TRANSVAR3=callTarget.getFirstChild()
17#TRANSVAR4=arrayNode.getNext()
31#TRANSVAR5=(right == null) ? "," : NodeUtil.getStringValue(right)
32#TRANSVAR6=Lists.newLinkedList()
33#TRANSVAR7=null
34#TRANSVAR8=0
35#TRANSVAR9=null
36#TRANSVAR10=arrayNode.getFirstChild()
72#TRANSVAR11=InlineCostEstimator.getCost(n)
75#TRANSVAR12=Node.newString("")
80#TRANSVAR13=arrayFoldedChildren.remove(0)
88#TRANSVAR14=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
101#TRANSVAR15="[].join()".length()
108#Node TRANSVAR16
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#double TRANSVAR0
5#TRANSVAR1=getLastChar()
11#TRANSVAR2=(long)x
12#TRANSVAR3=value
13#TRANSVAR4=0
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#String TRANSVAR0
3#TRANSVAR1=s.length()
4#TRANSVAR2=0
5#TRANSVAR3=s.charAt(index)
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
39#TRANSVAR11=replacement
40#TRANSVAR12
43#TRANSVAR13=new Node(Token.COMMA)
50#TRANSVAR14=ref.getParent()
2#Var TRANSVAR0
2#Reference TRANSVAR1
3#Map<String,String> TRANSVAR2
5#TRANSVAR3=Lists.newArrayList()
6#TRANSVAR4=ref.getAssignedValue()
9#TRANSVAR5=Sets.newLinkedHashSet(varmap.keySet())
10#TRANSVAR6=val.getFirstChild()
12#TRANSVAR7=key.getString()
13#TRANSVAR8=key.removeFirstChild()
22#String TRANSVAR9
29#TRANSVAR10
42#TRANSVAR11=replacement
43#TRANSVAR12
46#TRANSVAR13=new Node(Token.COMMA)
54#TRANSVAR14=ref.getParent()
2#Node TRANSVAR0
2#Node TRANSVAR0
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#int TRANSVAR0
3#TRANSVAR1=""
9#IOException TRANSVAR2
13#TRANSVAR3=0
14#TRANSVAR4=1
23#TRANSVAR5=startLine
24#TRANSVAR6=js.indexOf('\n',pos)
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#Node TRANSVAR1
3#String TRANSVAR2
4#TRANSVAR3=null
6#TRANSVAR4=node.getFirstChild()
8#TRANSVAR5=callee.getQualifiedName()
10#TRANSVAR6=callee.getNext()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
37#TRANSVAR6=n.getFirstChild()
71#TRANSVAR7=n.getFirstChild()
81#TRANSVAR8=n.getFirstChild()
2#Node TRANSVAR0
2#BitSet TRANSVAR1
2#BitSet TRANSVAR2
3#boolean TRANSVAR3
24#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=lhs.getNext()
41#TRANSVAR6=n.getFirstChild()
75#TRANSVAR7=n.getFirstChild()
85#TRANSVAR8=n.getFirstChild()
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
44#TRANSVAR2=Lists.newArrayList()
50#TRANSVAR3=new ComposeWarningsGuard(guards)
2#CompilerOptions TRANSVAR0
9#TRANSVAR1=new PrintStreamErrorManager(createMessageFormatter(),outStream)
45#TRANSVAR2=Lists.newArrayList()
51#TRANSVAR3=new ComposeWarningsGuard(guards)
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
42#TRANSVAR4=nameNode.getNext()
3#Node TRANSVAR0
3#@Nullable AbstractCompiler TRANSVAR1
13#TRANSVAR2=callNode.getFirstChild()
17#TRANSVAR3=nameNode.getString()
35#TRANSVAR4=nameNode.getFirstChild().getString()
48#TRANSVAR5=nameNode.getNext()
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#JSError TRANSVAR0
2#boolean TRANSVAR1
4#TRANSVAR2=getSource()
5#TRANSVAR3=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10#TRANSVAR4=new StringBuilder()
28#TRANSVAR5=error.getCharno()
35#TRANSVAR6=0
36#TRANSVAR7=sourceExcerpt.charAt(i)
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
149#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
150#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
151#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
169#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
170#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
199#TRANSVAR14="left side of comparison"
272#TRANSVAR15=getJSType(parent.getFirstChild())
273#TRANSVAR16=getJSType(n.getFirstChild())
279#TRANSVAR17=n.getFirstChild()
334#Node TRANSVAR18
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4
4#TRANSVAR5
5#TRANSVAR6
5#TRANSVAR7
7#TRANSVAR8=true
151#TRANSVAR9=leftType.restrictByNotNullOrUndefined()
152#TRANSVAR10=rightType.restrictByNotNullOrUndefined()
153#TRANSVAR11=leftTypeRestricted.testForEquality(rightTypeRestricted)
171#TRANSVAR12=leftType.restrictByNotNullOrUndefined()
172#TRANSVAR13=rightType.restrictByNotNullOrUndefined()
201#TRANSVAR14="left side of comparison"
274#TRANSVAR15=getJSType(parent.getFirstChild())
275#TRANSVAR16=getJSType(n.getFirstChild())
281#TRANSVAR17=n.getFirstChild()
336#Node TRANSVAR18
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#Node TRANSVAR0
3#TRANSVAR1=assign.getFirstChild()
8#TRANSVAR2=n.getFirstChild().getType() == Token.GETPROP
12#TRANSVAR3=n.getFirstChild().getFirstChild().getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#TRANSVAR2=n.getFirstChild()
4#TRANSVAR3=getJSType(child).restrictByNotNullOrUndefined()
15#TRANSVAR4=(FunctionType)childType
17#TRANSVAR5=false
18#TRANSVAR6=functionType.getJSDocInfo()
20#TRANSVAR7=functionJSDocInfo.getSourceName()
21#TRANSVAR8=compiler.getInput(sourceName)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#ObjectType TRANSVAR0
4#TRANSVAR1=getNativeType(U2U_CONSTRUCTOR_TYPE)
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#Node TRANSVAR0
3#TRANSVAR1=functionNode.getFirstChild().getNext()
4#TRANSVAR2=astParameters.getNext()
5#TRANSVAR3=(FunctionType)functionNode.getJSType()
7#TRANSVAR4=functionType.getParametersNode()
9#TRANSVAR5=jsDocParameters.getFirstChild()
10#Node TRANSVAR6
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#NodeTraversal TRANSVAR0
3#Node TRANSVAR1
3#Node TRANSVAR2
4#TRANSVAR3=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6#TRANSVAR4=getprop.getLastChild().getString()
11#TRANSVAR5=parent.getJSDocInfo() != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20#TRANSVAR6=null
35#TRANSVAR7=t.getInput().getName().equals(docInfo.getSourceName())
37#TRANSVAR8=docInfo.getVisibility()
38#TRANSVAR9=normalizeClassType(objectType)
42#TRANSVAR10=parent.getJSDocInfo()
43#TRANSVAR11=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
29#TRANSVAR9="/script"
32#TRANSVAR10="!--"
2#String TRANSVAR0
2#char TRANSVAR1
3#String TRANSVAR2
4#String TRANSVAR3
5#String TRANSVAR4
6#CharsetEncoder TRANSVAR5
7#TRANSVAR6=new StringBuilder(s.length() + 2)
9#TRANSVAR7=0
10#TRANSVAR8=s.charAt(i)
30#TRANSVAR9="/script"
33#TRANSVAR10="!--"
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
73#TRANSVAR8=Node.newNumber(result)
2#int TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
11#TRANSVAR3
16#TRANSVAR4=NodeUtil.getNumberValue(left)
20#TRANSVAR5=NodeUtil.getNumberValue(right)
25#TRANSVAR6=lValObj
26#TRANSVAR7=rValObj
71#TRANSVAR8=Node.newNumber(result)
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
10#TRANSVAR3=newNode(Token.FUNCTION)
11#TRANSVAR4=transform(name)
19#TRANSVAR5=functionNode.getAbsolutePosition() + functionNode.getLp()
25#TRANSVAR6=newNode(Token.LP)
32#TRANSVAR7=functionNode.getFunctionName()
38#TRANSVAR8=functionNode.getLp() + functionNode.getAbsolutePosition()
42#AstNode TRANSVAR9
47#TRANSVAR10=transform(functionNode.getBody())
2#FunctionNode TRANSVAR0
3#TRANSVAR1=functionNode.getFunctionName()
4#TRANSVAR2=false
6#TRANSVAR3=functionNode.getFunctionType()
17#TRANSVAR4=newNode(Token.FUNCTION)
18#TRANSVAR5=transform(name)
26#TRANSVAR6=functionNode.getAbsolutePosition() + functionNode.getLp()
32#TRANSVAR7=newNode(Token.LP)
39#TRANSVAR8=functionNode.getFunctionName()
45#TRANSVAR9=functionNode.getLp() + functionNode.getAbsolutePosition()
49#AstNode TRANSVAR10
54#TRANSVAR11=transform(functionNode.getBody())
2#Parameters TRANSVAR0
3#TRANSVAR1=params.getParameter(0)
9#TRANSVAR2=param.toLowerCase()
2#Parameters TRANSVAR0
3#TRANSVAR1=null
6#CmdLineException TRANSVAR2
12#TRANSVAR3=param.toLowerCase()
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
2#Predicate<Node> TRANSVAR1
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
2#Node TRANSVAR0
5#TRANSVAR1=n.getFirstChild()
14#TRANSVAR2=maybeExpr.getFirstChild().getFirstChild()
3#Node TRANSVAR0
3#String TRANSVAR1
16#TRANSVAR2=n.getFirstChild()
19#TRANSVAR3=isVariableReadBeforeKill(child,variable)
3#Node TRANSVAR0
3#String TRANSVAR1
10#TRANSVAR2=n.getNext()
11#TRANSVAR3=isVariableReadBeforeKill(rhs,variable)
22#TRANSVAR4=n.getFirstChild()
25#TRANSVAR5=isVariableReadBeforeKill(child,variable)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
38#TRANSVAR5=parent.getFirstChild()
39#TRANSVAR6=lhs.getNext()
56#TRANSVAR7=lhs.getFirstChild()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
22#TRANSVAR4=parent.getType()
35#TRANSVAR5=parent.getParent()
37#TRANSVAR6=gramps.getJSDocInfo()
47#TRANSVAR7=parent.getFirstChild()
48#TRANSVAR8=lhs.getNext()
65#TRANSVAR9=lhs.getFirstChild()
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.indexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
19#TRANSVAR0=candidateDefinition.getFirstChild()
20#TRANSVAR1=assignNode.getFirstChild()
23#TRANSVAR2=nameNode.getNext()
27#TRANSVAR3=new Node(Token.VAR,nameNode)
44#TRANSVAR4=namespace.lastIndexOf('.')
51#TRANSVAR5=providedNames.get(namespace.substring(0,indexOfDot))
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Set<String> TRANSVAR1
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
35#TRANSVAR7=scopeToDeclareIn.getVar(variableName)
42#TRANSVAR8=compiler.getInput(sourceName)
46#TRANSVAR9=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
48#TRANSVAR10=input.isExtern()
63#TRANSVAR11=(FunctionType)type
65#TRANSVAR12=fnType.getSuperClassConstructor()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#JSType TRANSVAR2
2#boolean TRANSVAR3
6#TRANSVAR4=false
22#TRANSVAR5=n.getQualifiedName()
28#TRANSVAR6=scope
31#TRANSVAR7=scope.getGlobalScope()
42#TRANSVAR8=scopeToDeclareIn.getVar(variableName)
49#TRANSVAR9=compiler.getInput(sourceName)
53#TRANSVAR10=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
55#TRANSVAR11=input.isExtern()
70#TRANSVAR12=(FunctionType)type
72#TRANSVAR13=fnType.getSuperClassConstructor()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
23#TRANSVAR8=call.getChildCount() - 1
24#TRANSVAR9=functionType.getMinArguments()
25#TRANSVAR10=functionType.getMaxArguments()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
3#FunctionType TRANSVAR2
4#TRANSVAR3=call.children().iterator()
7#TRANSVAR4=functionType.getParameters().iterator()
8#TRANSVAR5=0
9#TRANSVAR6=null
10#TRANSVAR7=null
26#TRANSVAR8=call.getChildCount() - 1
27#TRANSVAR9=functionType.getMinArguments()
28#TRANSVAR10=functionType.getMaxArguments()
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
55#TRANSVAR8=Node.newNumber(result)
2#Node TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
6#TRANSVAR3
7#TRANSVAR4=left.getDouble()
8#TRANSVAR5=right.getDouble()
25#TRANSVAR6=(int)lval
31#TRANSVAR7=(int)rval
48#TRANSVAR8=lvalInt & 0xffffffffL
56#TRANSVAR9=Node.newNumber(result)
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
20#TRANSVAR4=parent.getType()
30#TRANSVAR5=parent.getFirstChild()
31#TRANSVAR6=lhs.getNext()
2#NodeTraversal TRANSVAR0
2#Node TRANSVAR1
2#Node TRANSVAR2
7#TRANSVAR3=getFunctionJsDocInfo(n)
21#TRANSVAR4=parent.getType()
31#TRANSVAR5=parent.getFirstChild()
32#TRANSVAR6=lhs.getNext()
49#TRANSVAR7=lhs.getFirstChild()
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=str.charAt(index - 1)
9#TRANSVAR4=str.charAt(index - 2)
10#TRANSVAR5=this.map(preHWChar)
2#final String TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=this.map(str.charAt(index))
7#TRANSVAR3=index - 1
8#TRANSVAR4=str.charAt(i)
2#final byte[] TRANSVAR0
2#final byte[] TRANSVAR0
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#final CharSequence TRANSVAR0
2#final CharSequence TRANSVAR1
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
39#TRANSVAR3=0
44#TRANSVAR4=in[inPos++]
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#String TRANSVAR0
3#DoubleMetaphoneResult TRANSVAR1
4#int TRANSVAR2
5#boolean TRANSVAR3
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
9#TRANSVAR3=0
13#TRANSVAR4=in[inPos++]
20#TRANSVAR5=DECODE_TABLE[b]
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
29#TRANSVAR3=new byte[doEncode ? 4096 : 8192]
30#TRANSVAR4=in.read(buf)
2#byte TRANSVAR0[]
2#int TRANSVAR1
2#int TRANSVAR2
12#TRANSVAR3=0
31#TRANSVAR4=new byte[doEncode ? 4096 : 8192]
32#TRANSVAR5=in.read(buf)
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,MIME_CHUNK_SIZE,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#byte[] TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
2#int TRANSVAR3
7#TRANSVAR4=getEncodeLength(binaryData,isChunked ? MIME_CHUNK_SIZE : 0,CHUNK_SEPARATOR)
15#TRANSVAR5=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#ZipArchiveEntry TRANSVAR1
10#TRANSVAR2=entries.get(ze)
11#TRANSVAR3=offsetEntry.headerOffset
13#TRANSVAR4=new byte[SHORT]
15#TRANSVAR5=ZipShort.getValue(b)
17#TRANSVAR6=ZipShort.getValue(b)
18#TRANSVAR7=fileNameLen
20#TRANSVAR8=archive.skipBytes(lenToSkip)
27#TRANSVAR9=new byte[extraFieldLen]
34#TRANSVAR10=ze.getName()
35#TRANSVAR11=entriesWithoutUTF8Flag.get(ze)
2#Map<ZipArchiveEntry,NameAndComment> TRANSVAR0
9#TRANSVAR1=new LinkedHashMap<ZipArchiveEntry,OffsetEntry>(entries)
12#ZipArchiveEntry TRANSVAR2
13#TRANSVAR3=origMap.get(ze)
14#TRANSVAR4=offsetEntry.headerOffset
16#TRANSVAR5=new byte[SHORT]
18#TRANSVAR6=ZipShort.getValue(b)
20#TRANSVAR7=ZipShort.getValue(b)
21#TRANSVAR8=fileNameLen
23#TRANSVAR9=archive.skipBytes(lenToSkip)
30#TRANSVAR10=new byte[extraFieldLen]
37#TRANSVAR11=ze.getName()
38#TRANSVAR12=entriesWithoutUTF8Flag.get(ze)
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
46#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
49#Exception TRANSVAR6
54#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
50#Exception TRANSVAR6
56#IOException TRANSVAR7
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
34#TRANSVAR3=new StringBuffer()
35#TRANSVAR4=new byte[SMALL_BUFFER_SIZE]
36#TRANSVAR5=0
8#TRANSVAR0=entrySize - entryOffset
11#TRANSVAR1=skip(numToSkip)
21#TRANSVAR2=getRecord()
30#IllegalArgumentException TRANSVAR3
31#TRANSVAR4=new IOException("Error detected parsing the header")
40#TRANSVAR5=new StringBuffer()
41#TRANSVAR6=new byte[SMALL_BUFFER_SIZE]
42#TRANSVAR7=0
2#String TRANSVAR0
2#String TRANSVAR0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#Object TRANSVAR0
9#TRANSVAR1=(ZipArchiveEntry)obj
10#TRANSVAR2=getName()
11#TRANSVAR3=other.getName()
19#TRANSVAR4=getComment()
20#TRANSVAR5=other.getComment()
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
51#Exception TRANSVAR6
58#IOException TRANSVAR7
2#final InputStream TRANSVAR0
12#TRANSVAR1=new byte[12]
15#TRANSVAR2=in.read(signature)
28#TRANSVAR3=new byte[32]
37#TRANSVAR4=new byte[512]
47#TRANSVAR5=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
52#Exception TRANSVAR6
59#IOException TRANSVAR7
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
40#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
25#TRANSVAR6
41#TRANSVAR7=buffer[start]
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
10#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
13#TRANSVAR4=new StringWriter()
14#Map.Entry<String,String> TRANSVAR5
15#TRANSVAR6=h.getKey()
16#TRANSVAR7=h.getValue()
17#TRANSVAR8=key.length() + value.length() + 3+ 2
20#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
21#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
34#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#String TRANSVAR0
3#Map<String,String> TRANSVAR1
4#TRANSVAR2="./PaxHeaders.X/" + stripTo7Bits(entryName)
13#TRANSVAR3=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
16#TRANSVAR4=new StringWriter()
17#Map.Entry<String,String> TRANSVAR5
18#TRANSVAR6=h.getKey()
19#TRANSVAR7=h.getValue()
20#TRANSVAR8=key.length() + value.length() + 3+ 2
23#TRANSVAR9=len + " " + key+ "="+ value+ "\n"
24#TRANSVAR10=line.getBytes(CharsetNames.UTF_8).length
37#TRANSVAR11=w.toString().getBytes(CharsetNames.UTF_8)
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#boolean TRANSVAR0
3#boolean TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
8#TRANSVAR4=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final DataOutput TRANSVAR0
2#final BitSet TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=7
5#TRANSVAR5=0
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final InputStream TRANSVAR0
2#final Coder TRANSVAR1
3#byte[] TRANSVAR2
4#TRANSVAR3=coder.properties[0]
5#TRANSVAR4=coder.properties[1]
6#TRANSVAR5=1
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
42#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
3#String TRANSVAR1
4#boolean TRANSVAR2
5#boolean TRANSVAR3
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
2#InputStream TRANSVAR0
2#long TRANSVAR1
3#TRANSVAR2=numToSkip
5#TRANSVAR3=input.skip(numToSkip)
13#TRANSVAR4=new byte[SKIP_BUF_SIZE]
15#TRANSVAR5=readFully(input,skipBuf,0,(int)Math.min(numToSkip,SKIP_BUF_SIZE))
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
39#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=0
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
18#TRANSVAR3=offs + len
19#TRANSVAR4=offs
20#TRANSVAR5
26#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
21#TRANSVAR3=offs + len
22#TRANSVAR4=offs
23#TRANSVAR5
29#TRANSVAR6=(destOffs == offs) ? -1 : (destOffs - offs)
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
28#TRANSVAR6=buffer[end - 1]
35#TRANSVAR7=buffer[start]
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#Map<String,String> TRANSVAR0
14#Entry<String,String> TRANSVAR1
15#TRANSVAR2=ent.getKey()
16#TRANSVAR3=ent.getValue()
2#byte[] TRANSVAR0
3#TRANSVAR1=0
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=parseOctal(header,CHKSUM_OFFSET,CHKSUMLEN)
4#TRANSVAR2=0
5#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=0
9#TRANSVAR6=header[i]
11#TRANSVAR0=deferredBlockStreams.remove(0)
14#TRANSVAR0=deferredBlockStreams.remove(0)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
14#TRANSVAR5=new ByteArrayOutputStream()
18#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
20#TRANSVAR7=len - read
24#TRANSVAR8=new byte[restLen]
25#TRANSVAR9=IOUtils.readFully(i,rest)
34#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final InputStream TRANSVAR0
4#TRANSVAR1=new HashMap<String,String>(globalPaxHeaders)
7#TRANSVAR2
8#TRANSVAR3=0
9#TRANSVAR4=0
16#TRANSVAR5=new ByteArrayOutputStream()
20#TRANSVAR6=coll.toString(CharsetNames.UTF_8)
22#TRANSVAR7=len - read
26#TRANSVAR8=new byte[restLen]
27#TRANSVAR9=IOUtils.readFully(i,rest)
36#TRANSVAR10=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
21#TRANSVAR2
2#final int TRANSVAR0
7#TRANSVAR1=in.read()
19#TRANSVAR2=0
20#TRANSVAR3=0l
23#TRANSVAR4=count - bitsCachedSize
25#TRANSVAR5=in.read()
30#TRANSVAR6=nextByte & MASKS[bitsToAddCount]
35#TRANSVAR7=(nextByte >>> (overflowBits)) & MASKS[bitsToAddCount]
42#TRANSVAR8
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
35#TRANSVAR3=WORD
38#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
42#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
43#TRANSVAR6=gpFlag.usesUTF8ForNames()
44#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
53#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
57#TRANSVAR9=null
57#TRANSVAR10=null
71#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
75#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
78#TRANSVAR13=new byte[fileNameLen]
82#TRANSVAR14=new byte[extraLen]
3#TRANSVAR0=true
22#final EOFException TRANSVAR1
26#TRANSVAR2=new ZipLong(LFH_BUF)
36#TRANSVAR3=WORD
39#TRANSVAR4=ZipShort.getValue(LFH_BUF,off)
43#TRANSVAR5=GeneralPurposeBit.parse(LFH_BUF,off)
44#TRANSVAR6=gpFlag.usesUTF8ForNames()
45#TRANSVAR7=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
54#TRANSVAR8=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
58#TRANSVAR9=null
58#TRANSVAR10=null
72#TRANSVAR11=ZipShort.getValue(LFH_BUF,off)
76#TRANSVAR12=ZipShort.getValue(LFH_BUF,off)
79#TRANSVAR13=new byte[fileNameLen]
83#TRANSVAR14=new byte[extraLen]
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
2#final Checksum TRANSVAR0
2#final InputStream TRANSVAR1
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
3#final long TRANSVAR0
3#final byte[] TRANSVAR1
3#final int TRANSVAR2
3#final int TRANSVAR3
6#TRANSVAR4=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8#TRANSVAR5=value < 0
2#long TRANSVAR0
3#TRANSVAR1=0x100000000L
2#long TRANSVAR0
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
14#TRANSVAR3=(int)current.getSize()
26#TRANSVAR4=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44#TRANSVAR5=0
47#DataFormatException TRANSVAR6
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
2#byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=new StringBuffer(length)
4#TRANSVAR4=offset + length
6#TRANSVAR5=offset
7#TRANSVAR6=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=true
5#TRANSVAR5=offset + length
6#TRANSVAR6=offset
8#TRANSVAR7=start
9#TRANSVAR8=buffer[i]
2#final byte[] TRANSVAR0
2#final int TRANSVAR1
2#final int TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=offset + length
5#TRANSVAR5=offset
11#TRANSVAR6=true
12#TRANSVAR7=start
32#TRANSVAR8
47#TRANSVAR9=buffer[start]
3#TRANSVAR0=super.read()
3#TRANSVAR0=super.read()
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
2#final Appendable TRANSVAR0
2#final CSVFormat TRANSVAR1
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header.trim().isEmpty()
3#TRANSVAR0=null
4#TRANSVAR1=this.format.getHeader()
8#TRANSVAR2=null
11#TRANSVAR3=this.nextRecord()
24#TRANSVAR4=0
25#TRANSVAR5=headerRecord[i]
26#TRANSVAR6=hdrMap.containsKey(header)
27#TRANSVAR7=header == null || header.trim().isEmpty()
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
37#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
91#TRANSVAR14=value.charAt(pos)
2#final Object TRANSVAR0
2#final CharSequence TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
3#final Appendable TRANSVAR4
3#final boolean TRANSVAR5
4#TRANSVAR6=false
5#TRANSVAR7=offset
6#TRANSVAR8=offset
7#TRANSVAR9=offset + len
9#TRANSVAR10=getDelimiter()
10#TRANSVAR11=getQuoteCharacter().charValue()
12#TRANSVAR12=getQuoteMode()
38#TRANSVAR13=value.charAt(pos)
89#TRANSVAR14=value.charAt(pos)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
2#final String TRANSVAR0
7#TRANSVAR1=mapping.get(name)
10#ArrayIndexOutOfBoundsException TRANSVAR2
4#TRANSVAR0=in.read()
4#TRANSVAR0=in.read()
3#TRANSVAR0=format.getRecordSeparator()
3#TRANSVAR0=format.getRecordSeparator()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
3#final Entry<String,Integer> TRANSVAR1
4#TRANSVAR2=entry.getValue().intValue()
2#final M TRANSVAR0
6#final Entry<String,Integer> TRANSVAR1
7#TRANSVAR2=entry.getValue().intValue()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
2#JsonReader TRANSVAR0
3#TRANSVAR1=in.peek()
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
4#TRANSVAR0=this.buffer
5#TRANSVAR1=pos
6#TRANSVAR2=limit
8#TRANSVAR3=0
9#TRANSVAR4=false
10#TRANSVAR5=true
11#TRANSVAR6=NUMBER_CHAR_NONE
13#TRANSVAR7=0
30#TRANSVAR8=buffer[p + i]
79#TRANSVAR9=value * 10 - (c - '0')
2#double TRANSVAR0
2#double TRANSVAR0
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
15#TRANSVAR5=(Class<?>)toResolve
16#TRANSVAR6=original.getComponentType()
17#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
23#TRANSVAR8=(GenericArrayType)toResolve
24#TRANSVAR9=original.getGenericComponentType()
25#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
31#TRANSVAR11=(ParameterizedType)toResolve
32#TRANSVAR12=original.getOwnerType()
33#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
34#TRANSVAR14=newOwnerType != ownerType
36#TRANSVAR15=original.getActualTypeArguments()
37#TRANSVAR16=0
37#TRANSVAR17=args.length
38#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
53#TRANSVAR19=(WildcardType)toResolve
54#TRANSVAR20=original.getLowerBounds()
55#TRANSVAR21=original.getUpperBounds()
58#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
63#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Type TRANSVAR2
3#Collection<TypeVariable> TRANSVAR3
7#TRANSVAR4=(TypeVariable<?>)toResolve
20#TRANSVAR5=(Class<?>)toResolve
21#TRANSVAR6=original.getComponentType()
22#TRANSVAR7=resolve(context,contextRawType,componentType,visitedTypeVariables)
28#TRANSVAR8=(GenericArrayType)toResolve
29#TRANSVAR9=original.getGenericComponentType()
30#TRANSVAR10=resolve(context,contextRawType,componentType,visitedTypeVariables)
36#TRANSVAR11=(ParameterizedType)toResolve
37#TRANSVAR12=original.getOwnerType()
38#TRANSVAR13=resolve(context,contextRawType,ownerType,visitedTypeVariables)
39#TRANSVAR14=newOwnerType != ownerType
41#TRANSVAR15=original.getActualTypeArguments()
42#TRANSVAR16=0
42#TRANSVAR17=args.length
43#TRANSVAR18=resolve(context,contextRawType,args[t],visitedTypeVariables)
58#TRANSVAR19=(WildcardType)toResolve
59#TRANSVAR20=original.getLowerBounds()
60#TRANSVAR21=original.getUpperBounds()
63#TRANSVAR22=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
68#TRANSVAR23=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
2#JsonReader TRANSVAR0
6#TRANSVAR1=deserializeToDate(in.nextString())
2#JsonReader TRANSVAR0
7#TRANSVAR1=deserializeToDate(in.nextString())
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#Type TRANSVAR0
2#Class<?> TRANSVAR1
2#Class<?> TRANSVAR2
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
103#TRANSVAR20="GMT" + timezoneOffset
108#TRANSVAR21=timezone.getID()
115#TRANSVAR22=act.replace(":","")
126#TRANSVAR23=new GregorianCalendar(timezone)
140#IndexOutOfBoundsException TRANSVAR24
142#NumberFormatException TRANSVAR25
144#IllegalArgumentException TRANSVAR26
147#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
148#TRANSVAR28=fail.getMessage()
152#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=null
5#TRANSVAR3=pos.getIndex()
8#TRANSVAR4=parseInt(date,offset,offset+=4)
14#TRANSVAR5=parseInt(date,offset,offset+=2)
20#TRANSVAR6=parseInt(date,offset,offset+=2)
22#TRANSVAR7=0
23#TRANSVAR8=0
24#TRANSVAR9=0
25#TRANSVAR10=0
28#TRANSVAR11=checkOffset(date,offset,'T')
31#TRANSVAR12=new GregorianCalendar(year,month - 1,day)
51#TRANSVAR13=date.charAt(offset)
58#TRANSVAR14=indexOfNonDigit(date,offset + 1)
59#TRANSVAR15=Math.min(endOffset,offset + 3)
60#TRANSVAR16=parseInt(date,offset,parseEndOffset)
83#TRANSVAR17=null
84#TRANSVAR18=date.charAt(offset)
90#TRANSVAR19=date.substring(offset)
104#TRANSVAR20="GMT" + timezoneOffset
109#TRANSVAR21=timezone.getID()
116#TRANSVAR22=act.replace(":","")
127#TRANSVAR23=new GregorianCalendar(timezone)
141#IndexOutOfBoundsException TRANSVAR24
143#NumberFormatException TRANSVAR25
145#IllegalArgumentException TRANSVAR26
148#TRANSVAR27=(date == null) ? null : ('"' + date + "'")
149#TRANSVAR28=fail.getMessage()
153#TRANSVAR29=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
2#ConstructorConstructor TRANSVAR0
2#Gson TRANSVAR1
3#TypeToken<?> TRANSVAR2
3#JsonAdapter TRANSVAR3
4#TRANSVAR4=annotation.value()
5#TRANSVAR5
7#TRANSVAR6=(Class<TypeAdapter<?>>)value
10#TRANSVAR7=(Class<TypeAdapterFactory>)value
11#TRANSVAR0=_exposedContext
15#TRANSVAR1=ctxt.nextTokenToRead()
52#TRANSVAR2=delegate.nextToken()
59#TRANSVAR3
138#TRANSVAR4=_headContext.isStartHandled()
153#TRANSVAR5=delegate.getCurrentName()
20#TRANSVAR0=_exposedContext
24#TRANSVAR1=ctxt.nextTokenToRead()
61#TRANSVAR2=delegate.nextToken()
68#TRANSVAR3
147#TRANSVAR4=_headContext.isStartHandled()
162#TRANSVAR5=delegate.getCurrentName()
2#Object TRANSVAR0
2#Object TRANSVAR0
26#TRANSVAR0=_exposedContext
30#TRANSVAR1=ctxt.nextTokenToRead()
67#TRANSVAR2=delegate.nextToken()
75#TRANSVAR3
154#TRANSVAR4=_headContext.isStartHandled()
169#TRANSVAR5=delegate.getCurrentName()
28#TRANSVAR0=_exposedContext
32#TRANSVAR1=ctxt.nextTokenToRead()
69#TRANSVAR2=delegate.nextToken()
77#TRANSVAR3
156#TRANSVAR4=_headContext.isStartHandled()
171#TRANSVAR5=delegate.getCurrentName()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#int TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
5#TRANSVAR3=_textBuffer.getCurrentSegment()
6#TRANSVAR4=_textBuffer.getCurrentSegmentSize()
7#TRANSVAR5=codes.length
15#TRANSVAR6=_inputBuffer[_inputPtr]
16#TRANSVAR7=(int)c
37#TRANSVAR8=_textBuffer
38#TRANSVAR9=tb.getTextBuffer()
39#TRANSVAR10=tb.getTextOffset()
40#TRANSVAR11=tb.size()
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
2#IOContext TRANSVAR0
2#int TRANSVAR1
2#InputStream TRANSVAR2
3#ObjectCodec TRANSVAR3
3#BytesToNameCanonicalizer TRANSVAR4
4#byte[] TRANSVAR5
4#int TRANSVAR6
4#int TRANSVAR7
5#boolean TRANSVAR8
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
8#TRANSVAR2=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1))
4#TRANSVAR0=_currentSegment
6#TRANSVAR1=curr.length
7#TRANSVAR2=len + (len >> 1)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i++)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
9#TRANSVAR2=0
10#TRANSVAR3=str.charAt(i)
16#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=0
11#TRANSVAR3=str.charAt(i)
17#TRANSVAR4=NumberInput.parseLong(str)
2#String TRANSVAR0
3#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
17#TRANSVAR3=1
24#TRANSVAR4=NumberInput.parseLong(str)
12#TRANSVAR0=_index
15#TRANSVAR0=_index
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
14#TRANSVAR4=_serializer
16#TRANSVAR5=value.getClass()
17#TRANSVAR6=_dynamicSerializers
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
5#TRANSVAR3=get(bean)
15#TRANSVAR4=_serializer
17#TRANSVAR5=value.getClass()
18#TRANSVAR6=_dynamicSerializers
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
10#TRANSVAR2=n.binaryValue()
15#TRANSVAR3=((POJONode)n).getPojo()
2#Base64Variant TRANSVAR0
6#TRANSVAR1=currentNode()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
60#TRANSVAR10=_beanProperties.find(propName)
80#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
86#Exception TRANSVAR12
94#TRANSVAR13
97#Exception TRANSVAR14
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
9#TRANSVAR2=_propertyBasedCreator
10#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
12#TRANSVAR4=new TokenBuffer(p,ctxt)
15#TRANSVAR5=p.getCurrentToken()
17#TRANSVAR6=p.getCurrentName()
20#TRANSVAR7=creator.findCreatorProperty(propName)
26#TRANSVAR8
29#Exception TRANSVAR9
64#TRANSVAR10=_beanProperties.find(propName)
84#TRANSVAR11=TokenBuffer.asCopyOfValue(p)
90#Exception TRANSVAR12
98#TRANSVAR13
101#Exception TRANSVAR14
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
10#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
15#TRANSVAR3=format.getShape()
23#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
26#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
27#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
34#TRANSVAR7=format.hasLocale()
35#TRANSVAR8=format.hasTimeZone()
36#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
42#TRANSVAR10=serializers.getConfig().getDateFormat()
45#TRANSVAR11=(StdDateFormat)df0
63#TRANSVAR12=(SimpleDateFormat)df0
70#TRANSVAR13=format.getTimeZone()
71#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
7#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
12#TRANSVAR3=format.getShape()
20#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
24#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
31#TRANSVAR7=format.hasLocale()
32#TRANSVAR8=format.hasTimeZone()
33#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
39#TRANSVAR10=serializers.getConfig().getDateFormat()
42#TRANSVAR11=(StdDateFormat)df0
60#TRANSVAR12=(SimpleDateFormat)df0
67#TRANSVAR13=format.getTimeZone()
68#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId)
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name)
26#TRANSVAR4=type.getBounds()
2#TypeVariable<?> TRANSVAR0
2#TypeBindings TRANSVAR1
4#TRANSVAR2=type.getName()
15#TRANSVAR3=context.findType(name,false)
26#TRANSVAR4=type.getBounds()
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getDelegateType(ctxt.getConfig())
15#TRANSVAR5=_valueDeserializer
16#TRANSVAR6=_containerType.getContentType()
29#TRANSVAR7=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
31#TRANSVAR8=findContentNullProvider(ctxt,property,valueDeser)
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getArrayDelegateCreator()
11#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
14#TRANSVAR5=_valueInstantiator.getDelegateType(ctxt.getConfig())
18#TRANSVAR6=_valueDeserializer
19#TRANSVAR7=_containerType.getContentType()
32#TRANSVAR8=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
34#TRANSVAR9=findContentNullProvider(ctxt,property,valueDeser)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#Annotation TRANSVAR0
6#TRANSVAR1=_annotations.put(ann.annotationType(),ann)
2#JavaType TRANSVAR0
2#JavaType TRANSVAR0
2#Class<?> TRANSVAR0
5#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#Class<?> TRANSVAR0
8#TRANSVAR1=findTypeParameters(rawClass,Map.class)
2#DateFormat TRANSVAR0
6#TRANSVAR1=(df == null) ? _timeZone : df.getTimeZone()
2#DateFormat TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=_externalTypeIdHandler.start()
6#TRANSVAR3=_propertyBasedCreator
7#TRANSVAR4=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR5=new TokenBuffer(p)
12#TRANSVAR6=p.getCurrentToken()
14#TRANSVAR7=p.getCurrentName()
17#TRANSVAR8=creator.findCreatorProperty(propName)
28#TRANSVAR9
31#Exception TRANSVAR10
56#TRANSVAR11=_beanProperties.find(propName)
81#Exception TRANSVAR12
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#Annotated TRANSVAR0
4#TRANSVAR1=null
6#TRANSVAR2=_findAnnotation(a,JsonGetter.class)
10#TRANSVAR3=_findAnnotation(a,JsonProperty.class)
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonFormatVisitorWrapper TRANSVAR0
2#JavaType TRANSVAR1
7#TRANSVAR2=handledType()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
21#TRANSVAR3=p.getText()
22#TRANSVAR4=_findDeserializer(ctxt,typeId)
28#TRANSVAR5=new TokenBuffer(null,false)
36#TRANSVAR6=deser.deserialize(p,ctxt)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
6#TRANSVAR2=p.getTypeId()
12#TRANSVAR3=p.getCurrentToken()
23#TRANSVAR4=p.getText()
24#TRANSVAR5=_findDeserializer(ctxt,typeId)
30#TRANSVAR6=new TokenBuffer(null,false)
38#TRANSVAR7=deser.deserialize(p,ctxt)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
8#TRANSVAR2=p.nextToken()
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
20#TRANSVAR1=subclass.getSuperclass()
26#TRANSVAR2=_narrow(next)
31#TRANSVAR3=subclass.getInterfaces()
32#Class<?> TRANSVAR4
38#TRANSVAR5=_narrow(iface)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
16#TRANSVAR4=format.getTimeZone()
17#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
20#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10#TRANSVAR3=format.getShape()
17#TRANSVAR4=format.getTimeZone()
18#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
21#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#StringBuilder TRANSVAR0
2#StringBuilder TRANSVAR0
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
27#IllegalArgumentException TRANSVAR6
39#TRANSVAR7=type.getKeyType()
40#TRANSVAR8=findSerializationKeyType(a,keyType)
45#TRANSVAR9=keyType.getRawClass()
59#IllegalArgumentException TRANSVAR10
70#TRANSVAR11=type.getContentType()
73#TRANSVAR12=findSerializationContentType(a,contentType)
81#TRANSVAR13=contentType.getRawClass()
92#IllegalArgumentException TRANSVAR14
2#final MapperConfig<?> TRANSVAR0
3#final Annotated TRANSVAR1
3#final JavaType TRANSVAR2
5#TRANSVAR3=baseType
6#TRANSVAR4=config.getTypeFactory()
16#TRANSVAR5=findSerializationType(a)
23#TRANSVAR6=type.getRawClass()
36#IllegalArgumentException TRANSVAR7
48#TRANSVAR8=type.getKeyType()
49#TRANSVAR9=findSerializationKeyType(a,keyType)
54#TRANSVAR10=keyType.getRawClass()
68#IllegalArgumentException TRANSVAR11
79#TRANSVAR12=type.getContentType()
82#TRANSVAR13=findSerializationContentType(a,contentType)
90#TRANSVAR14=contentType.getRawClass()
101#IllegalArgumentException TRANSVAR15
2#Object TRANSVAR0
2#Object TRANSVAR0
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#Class<?> TRANSVAR0
2#AnnotatedMethodMap TRANSVAR1
3#Class<?> TRANSVAR2
3#AnnotatedMethodMap TRANSVAR3
5#TRANSVAR4=new ArrayList<Class<?>>()
8#Class<?> TRANSVAR5
9#Method TRANSVAR6
13#TRANSVAR7=methods.find(m)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#DeserializationContext TRANSVAR0
3#String TRANSVAR1
5#TRANSVAR2=_deserializers.get(typeId)
12#TRANSVAR3=_idResolver.typeFromId(ctxt,typeId)
18#TRANSVAR4=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8=findSerializationType(am,defaultUseStaticTyping,declaredType)
21#TRANSVAR9=serializationType.getContentType()
31#TRANSVAR10=null
32#TRANSVAR11=false
34#TRANSVAR12=_defaultInclusion.withOverrides(propDef.findInclusion())
35#TRANSVAR13=inclV.getValueInclusion()
41#TRANSVAR14=(serializationType == null) ? declaredType : serializationType
90#TRANSVAR15=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95#TRANSVAR16=_annotationIntrospector.findNullSerializer(am)
100#TRANSVAR17=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#byte[] TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
17#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
20#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
27#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
29#TRANSVAR8=type.getTypeHandler()
30#TRANSVAR9
42#TRANSVAR10=propDef.findReferenceType()
46#TRANSVAR11=propDef.findObjectIdInfo()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanPropertyDefinition TRANSVAR2
4#JavaType TRANSVAR3
8#TRANSVAR4=propDef.getNonConstructorMutator()
22#TRANSVAR5=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
25#TRANSVAR6=resolveType(ctxt,beanDesc,propType0,mutator)
32#TRANSVAR7=findDeserializerFromAnnotation(ctxt,mutator)
34#TRANSVAR8=type.getTypeHandler()
35#TRANSVAR9
47#TRANSVAR10=propDef.findReferenceType()
51#TRANSVAR11=propDef.findObjectIdInfo()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
51#TRANSVAR7=new StringBuilder(dateStr)
61#TRANSVAR8=new StringBuilder(dateStr)
63#TRANSVAR9=len - dateStr.lastIndexOf('T') - 1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
12#TRANSVAR2=dateStr.length()
13#TRANSVAR3=dateStr.charAt(len - 1)
14#TRANSVAR4
29#TRANSVAR5=new StringBuilder(dateStr)
39#TRANSVAR6=new StringBuilder(dateStr)
49#TRANSVAR7=len - dateStr.lastIndexOf('T') - 6
51#TRANSVAR8=len - 5
52#TRANSVAR9=new StringBuilder(dateStr)
77#TRANSVAR10=new StringBuilder(dateStr)
79#TRANSVAR11=len - dateStr.lastIndexOf('T') - 1
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
21#TRANSVAR4=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
24#TRANSVAR5=_valueDeserializer
28#TRANSVAR6=_collectionType.getContentType()
35#TRANSVAR7=_valueTypeDeserializer
2#DeserializationContext TRANSVAR0
3#BeanProperty TRANSVAR1
6#TRANSVAR2=null
9#TRANSVAR3=_valueInstantiator.getDelegateType(ctxt.getConfig())
17#TRANSVAR4=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
29#TRANSVAR5=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
32#TRANSVAR6=_valueDeserializer
36#TRANSVAR7=_collectionType.getContentType()
43#TRANSVAR8=_valueTypeDeserializer
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
113#TRANSVAR16=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
118#TRANSVAR17=_annotationIntrospector.findNullSerializer(am)
123#TRANSVAR18=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#SerializerProvider TRANSVAR0
3#BeanPropertyDefinition TRANSVAR1
3#JavaType TRANSVAR2
3#JsonSerializer<?> TRANSVAR3
4#TypeSerializer TRANSVAR4
4#TypeSerializer TRANSVAR5
5#AnnotatedMember TRANSVAR6
5#boolean TRANSVAR7
9#TRANSVAR8
12#JsonMappingException TRANSVAR9
26#TRANSVAR10=serializationType.getContentType()
36#TRANSVAR11=null
37#TRANSVAR12=false
40#TRANSVAR13=(serializationType == null) ? declaredType : serializationType
45#TRANSVAR14=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51#TRANSVAR15=inclV.getValueInclusion()
64#TRANSVAR16
77#Exception TRANSVAR17
118#TRANSVAR18=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
123#TRANSVAR19=_annotationIntrospector.findNullSerializer(am)
128#TRANSVAR20=_annotationIntrospector.findUnwrappingNameTransformer(am)
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
27#BeanDeserializerModifier TRANSVAR6
2#DeserializationContext TRANSVAR0
3#JavaType TRANSVAR1
6#TRANSVAR2=ctxt.getConfig()
7#TRANSVAR3=null
9#TRANSVAR4=config.introspectClassAnnotations(type.getRawClass())
10#KeyDeserializers TRANSVAR5
28#BeanDeserializerModifier TRANSVAR6
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
12#TRANSVAR2
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#SettableBeanProperty TRANSVAR0
4#TRANSVAR1=new ArrayList<SettableBeanProperty>(_size)
5#TRANSVAR2=getPropertyName(propToRm)
6#TRANSVAR3=false
8#TRANSVAR4=1
8#TRANSVAR5=_hashArea.length
9#TRANSVAR6=(SettableBeanProperty)_hashArea[i]
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#Class<?> TRANSVAR0
4#TRANSVAR1
39#TRANSVAR2=FromStringDeserializer.findDeserializer(Locale.class)
42#TRANSVAR3=FromStringDeserializer.findDeserializer(Currency.class)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#TokenBuffer TRANSVAR2
6#TRANSVAR3=_findDefaultImplDeserializer(ctxt)
17#TRANSVAR4=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
26#TRANSVAR5=p.getText().trim()
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
21#TRANSVAR8
24#Exception TRANSVAR9
47#TRANSVAR10=_beanProperties.find(propName)
65#TRANSVAR11
69#Exception TRANSVAR12
2#JsonParser TRANSVAR0
3#DeserializationContext TRANSVAR1
6#TRANSVAR2=_propertyBasedCreator
7#TRANSVAR3=creator.startBuilding(p,ctxt,_objectIdReader)
9#TRANSVAR4=new TokenBuffer(p,ctxt)
12#TRANSVAR5=p.getCurrentToken()
14#TRANSVAR6=p.getCurrentName()
17#TRANSVAR7=creator.findCreatorProperty(propName)
27#TRANSVAR8=_beanProperties.find(propName)
45#TRANSVAR9
49#Exception TRANSVAR10
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
2#AnnotatedWithParams TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
4#TRANSVAR3=(1 << typeIndex)
6#TRANSVAR4=_creators[typeIndex]
9#TRANSVAR5
26#TRANSVAR6=oldOne.getRawParameterType(0)
27#TRANSVAR7=newOne.getRawParameterType(0)
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#BeanDeserializerBuilder TRANSVAR2
6#TRANSVAR3=!beanDesc.getType().isAbstract()
7#TRANSVAR4=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10#TRANSVAR5=(creatorProps != null)
16#TRANSVAR6=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19#TRANSVAR7
22#TRANSVAR8=ignorals.getIgnoreUnknown()
26#String TRANSVAR9
34#TRANSVAR10=beanDesc.findAnySetter()
35#TRANSVAR11=null
48#TRANSVAR12=beanDesc.getIgnoredPropertyNames()
50#String TRANSVAR13
57#TRANSVAR14=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61#TRANSVAR15=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66#BeanDeserializerModifier TRANSVAR16
72#BeanPropertyDefinition TRANSVAR17
73#TRANSVAR18=null
79#TRANSVAR19=propDef.getSetter().getParameterType(0)
82#TRANSVAR20=propDef.getField().getType()
88#TRANSVAR21=propDef.getGetter()
90#TRANSVAR22=getter.getRawType()
104#TRANSVAR23=propDef.getName()
105#TRANSVAR24=null
107#SettableBeanProperty TRANSVAR25
115#TRANSVAR26=new ArrayList<>()
116#SettableBeanProperty TRANSVAR27
133#TRANSVAR28=propDef.findViews()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
19#IllegalArgumentException TRANSVAR4
21#MalformedURLException TRANSVAR5
24#TRANSVAR6="not a valid textual representation"
26#TRANSVAR7=cause.getMessage()
32#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
39#TRANSVAR9=p.getCurrentToken()
46#TRANSVAR10=p.getEmbeddedObject()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
5#TRANSVAR2=p.getValueAsString()
11#TRANSVAR3=null
17#IllegalArgumentException TRANSVAR4
19#MalformedURLException TRANSVAR5
22#TRANSVAR6="not a valid textual representation"
24#TRANSVAR7=cause.getMessage()
30#TRANSVAR8=ctxt.weirdStringException(text,_valueClass,msg)
37#TRANSVAR9=p.getCurrentToken()
44#TRANSVAR10=p.getEmbeddedObject()
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
22#TRANSVAR4=format.getTimeZone()
23#TRANSVAR5=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
26#TRANSVAR6=format.hasLocale() ? format.getLocale() : serializers.getLocale()
29#TRANSVAR7=new SimpleDateFormat(pattern,loc)
2#SerializerProvider TRANSVAR0
3#BeanProperty TRANSVAR1
8#TRANSVAR2=findFormatOverrides(serializers,property,handledType())
13#TRANSVAR3=format.getShape()
21#TRANSVAR4=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24#TRANSVAR5=new SimpleDateFormat(format.getPattern(),loc)
25#TRANSVAR6=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
32#TRANSVAR7=format.hasLocale()
33#TRANSVAR8=format.hasTimeZone()
34#TRANSVAR9=(shape == JsonFormat.Shape.STRING)
40#TRANSVAR10=serializers.getConfig().getDateFormat()
43#TRANSVAR11=(StdDateFormat)df0
62#TRANSVAR12=(SimpleDateFormat)df0
69#TRANSVAR13=format.getTimeZone()
70#TRANSVAR14=(newTz != null) && !newTz.equals(df.getTimeZone())
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
18#TRANSVAR4
21#ClassNotFoundException TRANSVAR5
25#TRANSVAR6=(DeserializationContext)ctxt
31#Exception TRANSVAR7
2#String TRANSVAR0
2#DatabindContext TRANSVAR1
8#TRANSVAR2=ctxt.getTypeFactory()
14#TRANSVAR3=tf.constructFromCanonical(id)
22#TRANSVAR4
25#ClassNotFoundException TRANSVAR5
29#TRANSVAR6=(DeserializationContext)ctxt
35#Exception TRANSVAR7
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
2#Object TRANSVAR0
2#JsonGenerator TRANSVAR1
2#SerializerProvider TRANSVAR2
3#TRANSVAR3
4#TRANSVAR4=value.getClass()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
2#JavaType TRANSVAR0
5#TRANSVAR1=t.getContentType()
13#TRANSVAR2=t.getKeyType()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
2#JavaType TRANSVAR1
6#TRANSVAR2=type.getRawClass()
7#TRANSVAR3=raw.getName()
19#TRANSVAR4=raw
20#TRANSVAR5=cls.getSimpleName()
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#DeserializationContext TRANSVAR0
3#BeanDescription TRANSVAR1
3#CreatorCollector TRANSVAR2
4#CreatorCandidate TRANSVAR3
11#TRANSVAR4=candidate.findOnlyParamWithoutInjection()
22#TRANSVAR5=candidate.parameter(0)
23#TRANSVAR6=candidate.injection(0)
24#TRANSVAR7=candidate.explicitParamName(0)
25#TRANSVAR8=candidate.propertyDef(0)
28#TRANSVAR9=(paramName != null) || (injectId != null)
40#TRANSVAR10=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonGenerator TRANSVAR0
2#SerializerProvider TRANSVAR1
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
49#TRANSVAR12=creator.build(ctxt,buffer)
51#TRANSVAR13=0
52#TRANSVAR14=_properties[i].getProperty()
2#JsonParser TRANSVAR0
2#DeserializationContext TRANSVAR1
3#PropertyValueBuffer TRANSVAR2
3#PropertyBasedCreator TRANSVAR3
7#TRANSVAR4=_properties.length
8#TRANSVAR5=new Object[len]
9#TRANSVAR6=0
10#TRANSVAR7=_typeIds[i]
11#TRANSVAR8=_properties[i]
27#TRANSVAR9=extProp.getProperty()
34#TRANSVAR10=extProp.getProperty()
40#TRANSVAR11=extProp.getTypeProperty()
45#TRANSVAR12
49#TRANSVAR13=new TokenBuffer(p,ctxt)
58#TRANSVAR14=creator.build(ctxt,buffer)
60#TRANSVAR15=0
61#TRANSVAR16=_properties[i].getProperty()
4#TRANSVAR0=new StringBuilder()
4#TRANSVAR0=new StringBuilder()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
29#TRANSVAR1=_xmlTokens.next()
48#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
6#TRANSVAR0=_nextToken
18#TRANSVAR1=_xmlTokens.next()
33#TRANSVAR2=_xmlTokens.getLocalName()
2#JsonGenerator TRANSVAR0
2#JsonGenerator TRANSVAR0
6#TRANSVAR1=_rootNameFromConfig()
2#XmlSerializerProvider TRANSVAR0
2#XmlSerializerProvider TRANSVAR0
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#Element TRANSVAR0
3#TRANSVAR1=new ArrayList<Node>()
4#Node TRANSVAR2
6#TRANSVAR3=(TextNode)node
12#Node TRANSVAR4
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
19#TRANSVAR5=new URL(base,relUrl)
21#MalformedURLException TRANSVAR6
2#String TRANSVAR0
5#TRANSVAR1=attr(attributeKey)
9#TRANSVAR2
13#MalformedURLException TRANSVAR3
15#TRANSVAR4=new URL(relUrl)
21#TRANSVAR5=new URL(base,relUrl)
23#MalformedURLException TRANSVAR6
2#String TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=attributeKey.substring("abs:".length())
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Token TRANSVAR0
2#TreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.insert(startTag)
109#TRANSVAR13=tb.getStack()
110#TRANSVAR14=stack.size() - 1
111#TRANSVAR15=stack.get(i)
125#TRANSVAR16=tb.getStack()
126#TRANSVAR17=stack.size() - 1
127#TRANSVAR18=stack.get(i)
162#TRANSVAR19=tb.getFromStack("a")
169#TRANSVAR20=tb.insert(startTag)
174#TRANSVAR21=tb.insert(startTag)
183#TRANSVAR22=tb.insert(startTag)
203#TRANSVAR23=tb.insertEmpty(startTag)
227#TRANSVAR24=tb.getFormElement()
233#TRANSVAR25=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR26=new Attributes()
241#Attribute TRANSVAR27
275#TRANSVAR28=tb.state()
315#TRANSVAR29=t.asEndTag()
326#TRANSVAR30=tb.process(new Token.EndTag("body"))
345#TRANSVAR31=tb.getFormElement()
405#TRANSVAR32=0
406#TRANSVAR33=tb.getActiveFormattingElement(name)
419#TRANSVAR34=null
420#TRANSVAR35=null
421#TRANSVAR36=false
422#TRANSVAR37=tb.getStack()
423#TRANSVAR38=0
424#TRANSVAR39=stack.get(si)
441#TRANSVAR40=furthestBlock
442#TRANSVAR41=furthestBlock
444#TRANSVAR42=0
453#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479#TRANSVAR44=new Element(Tag.valueOf(name),tb.getBaseUri())
480#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481#Node TRANSVAR46
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
9#Protocol TRANSVAR4
10#TRANSVAR5=protocol.toString() + ":"
2#Element TRANSVAR0
2#Attribute TRANSVAR1
2#Set<Protocol> TRANSVAR2
5#TRANSVAR3=el.absUrl(attr.getKey())
11#Protocol TRANSVAR4
12#TRANSVAR5=protocol.toString() + ":"
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
35#TRANSVAR7
45#TRANSVAR8=child.absUrl("href")
4#TRANSVAR0=tq.consumeWord()
12#TRANSVAR1=new Attributes()
14#TRANSVAR2=parseAttribute()
19#TRANSVAR3=Tag.valueOf(tagName)
20#TRANSVAR4=new Element(tag,baseUri,attributes)
22#TRANSVAR5=tag.isEmpty()
32#TRANSVAR6=tq.chompTo("</" + tagName)
36#TRANSVAR7
46#TRANSVAR8=child.absUrl("href")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
12#TRANSVAR3=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
4#TRANSVAR2=r.consumeLetterSequence()
11#TRANSVAR3=r.consume()
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#Document TRANSVAR0
5#TRANSVAR1=Document.createShell(dirtyDocument.baseUri())
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
2#String TRANSVAR0
4#TRANSVAR1=charsetPattern.matcher(contentType)
6#TRANSVAR2=m.group(1).trim()
3#TRANSVAR0=(Element)super.clone()
3#TRANSVAR0=(Element)super.clone()
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
12#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#Token.StartTag TRANSVAR0
6#TRANSVAR1=insertEmpty(startTag)
13#TRANSVAR2=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#CharSequence TRANSVAR0
4#TRANSVAR1=seq.charAt(0)
5#TRANSVAR2=pos
9#TRANSVAR3=offset + 1
10#TRANSVAR4=i + seq.length() - 1
12#TRANSVAR5=1
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
481#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
482#Node TRANSVAR45
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
108#TRANSVAR12=tb.getStack()
109#TRANSVAR13=stack.size() - 1
110#TRANSVAR14=stack.get(i)
124#TRANSVAR15=tb.getStack()
125#TRANSVAR16=stack.size() - 1
126#TRANSVAR17=stack.get(i)
161#TRANSVAR18=tb.getFromStack("a")
168#TRANSVAR19=tb.insert(startTag)
173#TRANSVAR20=tb.insert(startTag)
182#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
314#TRANSVAR28=t.asEndTag()
325#TRANSVAR29=tb.process(new Token.EndTag("body"))
344#TRANSVAR30=tb.getFormElement()
404#TRANSVAR31=0
405#TRANSVAR32=tb.getActiveFormattingElement(name)
418#TRANSVAR33=null
419#TRANSVAR34=null
420#TRANSVAR35=false
421#TRANSVAR36=tb.getStack()
424#TRANSVAR37=0
425#TRANSVAR38=stack.get(si)
442#TRANSVAR39=furthestBlock
443#TRANSVAR40=furthestBlock
445#TRANSVAR41=0
454#TRANSVAR42=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480#TRANSVAR43=new Element(formatEl.tag(),tb.getBaseUri())
482#TRANSVAR44=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
483#Node TRANSVAR45
3#TRANSVAR0=new StringBuilder()
3#TRANSVAR0=new StringBuilder()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
220#TRANSVAR23=tb.getFormElement()
226#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
233#TRANSVAR25=new Attributes()
234#Attribute TRANSVAR26
268#TRANSVAR27=tb.state()
307#TRANSVAR28=t.asEndTag()
318#TRANSVAR29=tb.process(new Token.EndTag("body"))
333#TRANSVAR30=tb.getFormElement()
392#TRANSVAR31=0
393#TRANSVAR32=tb.getActiveFormattingElement(name)
406#TRANSVAR33=null
407#TRANSVAR34=null
408#TRANSVAR35=false
409#TRANSVAR36=tb.getStack()
412#TRANSVAR37=stack.size()
413#TRANSVAR38=0
414#TRANSVAR39=stack.get(si)
431#TRANSVAR40=furthestBlock
432#TRANSVAR41=furthestBlock
434#TRANSVAR42=0
443#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
469#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
471#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
472#Node TRANSVAR46
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
30#TRANSVAR4=startTag.name()
34#TRANSVAR5=tb.getStack().getFirst()
35#Attribute TRANSVAR6
43#TRANSVAR7=tb.getStack()
49#TRANSVAR8=stack.get(1)
50#Attribute TRANSVAR9
57#TRANSVAR10=tb.getStack()
64#TRANSVAR11=stack.get(1)
105#TRANSVAR12=tb.getStack()
106#TRANSVAR13=stack.size() - 1
107#TRANSVAR14=stack.get(i)
121#TRANSVAR15=tb.getStack()
122#TRANSVAR16=stack.size() - 1
123#TRANSVAR17=stack.get(i)
158#TRANSVAR18=tb.getFromStack("a")
165#TRANSVAR19=tb.insert(startTag)
169#TRANSVAR20=tb.insert(startTag)
178#TRANSVAR21=tb.insert(startTag)
198#TRANSVAR22=tb.insertEmpty(startTag)
223#TRANSVAR23=tb.getFormElement()
229#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
236#TRANSVAR25=new Attributes()
237#Attribute TRANSVAR26
271#TRANSVAR27=tb.state()
310#TRANSVAR28=t.asEndTag()
321#TRANSVAR29=tb.process(new Token.EndTag("body"))
336#TRANSVAR30=tb.getFormElement()
395#TRANSVAR31=0
396#TRANSVAR32=tb.getActiveFormattingElement(name)
409#TRANSVAR33=null
410#TRANSVAR34=null
411#TRANSVAR35=false
412#TRANSVAR36=tb.getStack()
415#TRANSVAR37=stack.size()
416#TRANSVAR38=0
417#TRANSVAR39=stack.get(si)
434#TRANSVAR40=furthestBlock
435#TRANSVAR41=furthestBlock
437#TRANSVAR42=0
446#TRANSVAR43=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
472#TRANSVAR44=new Element(formatEl.tag(),tb.getBaseUri())
474#TRANSVAR45=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
475#Node TRANSVAR46
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
9#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11#TRANSVAR7
19#IllegalCharsetNameException TRANSVAR8
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#String TRANSVAR3
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
2#Object TRANSVAR0
7#TRANSVAR1=(Element)o
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
8#TRANSVAR2=el.attr("name")
10#TRANSVAR3=el.attr("type")
13#TRANSVAR4=el.select("option[selected]")
14#TRANSVAR5=false
15#Element TRANSVAR6
20#TRANSVAR7=el.select("option").first()
27#TRANSVAR8=el.val()
3#TRANSVAR0=new ArrayList<Connection.KeyVal>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
14#TRANSVAR4=el.select("option[selected]")
15#TRANSVAR5=false
16#Element TRANSVAR6
21#TRANSVAR7=el.select("option").first()
28#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
2#Element TRANSVAR0
2#List<E> TRANSVAR1
6#TRANSVAR2=0
7#TRANSVAR3=elements.get(i)
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
3#TRANSVAR0=false
4#TRANSVAR1=stack.size() - 1
5#TRANSVAR2=stack.get(pos)
10#TRANSVAR3=node.nodeName()
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
70#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#Document.OutputSettings TRANSVAR2
3#boolean TRANSVAR3
3#boolean TRANSVAR4
3#boolean TRANSVAR5
5#TRANSVAR6=false
6#TRANSVAR7=false
7#TRANSVAR8=out.escapeMode()
8#TRANSVAR9=out.encoder()
9#TRANSVAR10=CoreCharset.byName(encoder.charset().name())
10#TRANSVAR11=escapeMode.getMap()
11#TRANSVAR12=string.length()
13#TRANSVAR13
14#TRANSVAR14=0
31#TRANSVAR15=(char)codePoint
71#TRANSVAR16=new String(Character.toChars(codePoint))
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
2#Map<String,List<String>> TRANSVAR0
3#Map.Entry<String,List<String>> TRANSVAR1
4#TRANSVAR2=entry.getKey()
8#TRANSVAR3=entry.getValue()
10#String TRANSVAR4
13#TRANSVAR5=new TokenQueue(value)
14#TRANSVAR6=cd.chompTo("=").trim()
15#TRANSVAR7=cd.consumeTo(";").trim()
25#TRANSVAR8=new StringBuilder()
26#TRANSVAR9=0
27#TRANSVAR10=values.get(i)
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
2#int TRANSVAR0
2#Node... TRANSVAR1
5#TRANSVAR2=children.length - 1
6#TRANSVAR3=children[i]
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
4#TRANSVAR0=tq.consumeAttributeKey()
5#TRANSVAR1=""
15#TRANSVAR2=new StringBuilder()
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
12#TRANSVAR6=doc.select("meta[http-equiv=content-type], meta[charset]").first()
14#TRANSVAR7=null
23#IllegalCharsetNameException TRANSVAR8
2#ByteBuffer TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
3#TRANSVAR4
4#TRANSVAR5=null
8#TRANSVAR6=new byte[4]
26#TRANSVAR7=doc.select("meta[http-equiv=content-type], meta[charset]").first()
28#TRANSVAR8=null
37#IllegalCharsetNameException TRANSVAR9
5#TRANSVAR0=input[pos]
5#TRANSVAR0=input[pos]
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
10#TRANSVAR6=consume()
2#char TRANSVAR0
2#char TRANSVAR1
3#TRANSVAR2=-1
4#TRANSVAR3=-1
5#TRANSVAR4=0
6#TRANSVAR5=0
7#TRANSVAR6=false
11#TRANSVAR7=consume()
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#org.jsoup.nodes.Node TRANSVAR0
2#Element TRANSVAR1
3#Attribute TRANSVAR2
5#TRANSVAR3=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#Tokeniser TRANSVAR0
2#CharacterReader TRANSVAR1
3#TRANSVAR2=r.consume()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
2#String TRANSVAR0
6#TRANSVAR1=attributes.keySet().iterator()
7#TRANSVAR2=it.next()
9#TRANSVAR0
10#TRANSVAR0
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
6#TRANSVAR1=unescapePattern.matcher(string)
7#TRANSVAR2=new StringBuffer(string.length())
11#TRANSVAR3=-1
12#TRANSVAR4=m.group(3)
15#TRANSVAR5=m.group(2) != null ? 16 : 10
17#NumberFormatException TRANSVAR6
20#TRANSVAR7=m.group(1)
26#TRANSVAR8=Character.toString((char)charval)
2#String TRANSVAR0
3#TRANSVAR1=attributes.get("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#String TRANSVAR0
3#TRANSVAR1=attributes.getIgnoreCase("class")
4#TRANSVAR2=classAttr.length()
5#TRANSVAR3=className.length()
17#TRANSVAR4=false
18#TRANSVAR5=0
19#TRANSVAR6=0
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().normalName()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
3#TRANSVAR2=t.asEndTag().name()
4#TRANSVAR3=tb.getStack()
5#TRANSVAR4=stack.size() - 1
6#TRANSVAR5=stack.get(pos)
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#Token.StartTag TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
8#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
11#TRANSVAR5=bottom
12#TRANSVAR6=stack.get(pos).nodeName()
2#String[] TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
4#TRANSVAR3=stack.size() - 1
5#TRANSVAR4=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
8#TRANSVAR5=bottom
9#TRANSVAR6=stack.get(pos).nodeName()
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
2#Node TRANSVAR0
5#TRANSVAR1=(Element)node
6#TRANSVAR2=0
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
8#TRANSVAR4=0
9#TRANSVAR5=start
10#TRANSVAR6=0
15#TRANSVAR7=hash & stringCache.length - 1
16#TRANSVAR8=stringCache[index]
2#final char[] TRANSVAR0
2#final String[] TRANSVAR1
2#final int TRANSVAR2
2#final int TRANSVAR3
10#TRANSVAR4=0
11#TRANSVAR5=start
12#TRANSVAR6=0
17#TRANSVAR7=hash & stringCache.length - 1
18#TRANSVAR8=stringCache[index]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#final Appendable TRANSVAR0
2#final Document.OutputSettings TRANSVAR1
3#TRANSVAR2=size
4#TRANSVAR3=0
6#TRANSVAR4=keys[i]
7#TRANSVAR5=vals[i]
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
144#TRANSVAR17=tb.getStack()
145#TRANSVAR18=stack.size() - 1
146#TRANSVAR19=stack.get(i)
177#TRANSVAR20=tb.insert(startTag)
186#TRANSVAR21=tb.insert(startTag)
202#TRANSVAR22=tb.insertEmpty(startTag)
226#TRANSVAR23=tb.getFormElement()
232#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239#TRANSVAR25=new Attributes()
240#Attribute TRANSVAR26
274#TRANSVAR27=tb.state()
311#TRANSVAR28=t.asEndTag()
315#TRANSVAR29=0
316#TRANSVAR30=tb.getActiveFormattingElement(name)
329#TRANSVAR31=null
330#TRANSVAR32=null
331#TRANSVAR33=false
332#TRANSVAR34=tb.getStack()
335#TRANSVAR35=stack.size()
336#TRANSVAR36=0
337#TRANSVAR37=stack.get(si)
354#TRANSVAR38=furthestBlock
355#TRANSVAR39=furthestBlock
356#TRANSVAR40=0
365#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
392#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
394#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
395#Node TRANSVAR44
437#TRANSVAR45=tb.processEndTag("body")
441#TRANSVAR46=tb.getFormElement()
2#Token TRANSVAR0
2#HtmlTreeBuilder TRANSVAR1
5#TRANSVAR2=t.asCharacter()
29#TRANSVAR3=t.asStartTag()
31#TRANSVAR4=startTag.normalName()
38#TRANSVAR5=tb.getFromStack("a")
45#TRANSVAR6=tb.insert(startTag)
62#TRANSVAR7=tb.getStack()
63#TRANSVAR8=stack.size() - 1
64#TRANSVAR9=stack.get(i)
79#TRANSVAR10=tb.getStack().get(0)
80#Attribute TRANSVAR11
88#TRANSVAR12=tb.getStack()
94#TRANSVAR13=stack.get(1)
95#Attribute TRANSVAR14
102#TRANSVAR15=tb.getStack()
109#TRANSVAR16=stack.get(1)
145#TRANSVAR17=tb.getStack()
146#TRANSVAR18=stack.size() - 1
147#TRANSVAR19=stack.get(i)
178#TRANSVAR20=tb.insert(startTag)
187#TRANSVAR21=tb.insert(startTag)
203#TRANSVAR22=tb.insertEmpty(startTag)
227#TRANSVAR23=tb.getFormElement()
233#TRANSVAR24=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240#TRANSVAR25=new Attributes()
241#Attribute TRANSVAR26
275#TRANSVAR27=tb.state()
312#TRANSVAR28=t.asEndTag()
316#TRANSVAR29=0
317#TRANSVAR30=tb.getActiveFormattingElement(name)
330#TRANSVAR31=null
331#TRANSVAR32=null
332#TRANSVAR33=false
333#TRANSVAR34=tb.getStack()
336#TRANSVAR35=stack.size()
337#TRANSVAR36=0
338#TRANSVAR37=stack.get(si)
355#TRANSVAR38=furthestBlock
356#TRANSVAR39=furthestBlock
357#TRANSVAR40=0
366#TRANSVAR41=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
393#TRANSVAR42=new Element(formatEl.tag(),tb.getBaseUri())
395#TRANSVAR43=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
396#Node TRANSVAR44
438#TRANSVAR45=tb.processEndTag("body")
442#TRANSVAR46=tb.getFormElement()
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.name()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.EndTag TRANSVAR0
3#TRANSVAR1=endTag.normalName()
4#TRANSVAR2=null
6#TRANSVAR3=stack.size() - 1
7#TRANSVAR4=stack.get(pos)
16#TRANSVAR5=stack.size() - 1
17#TRANSVAR6=stack.get(pos)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
10#TRANSVAR5=doc.child(0)
2#Token.Comment TRANSVAR0
3#TRANSVAR1=new Comment(commentToken.getData())
4#TRANSVAR2=comment
7#TRANSVAR3=comment.getData()
9#TRANSVAR4=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
11#TRANSVAR5=doc.child(0)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#InputStream TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR2
2#Parser TRANSVAR3
7#TRANSVAR4=null
8#TRANSVAR5=false
12#TRANSVAR6=readToByteBuffer(input,firstReadBufferSize - 1)
17#TRANSVAR7=detectCharsetFromBom(firstBytes)
22#TRANSVAR8=Charset.forName(defaultCharset).decode(firstBytes).toString()
26#TRANSVAR9=doc.select("meta[http-equiv=content-type], meta[charset]")
27#TRANSVAR10=null
28#Element TRANSVAR11
39#TRANSVAR12=doc.childNode(0)
40#TRANSVAR13=null
44#TRANSVAR14=(Comment)first
67#TRANSVAR15=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72#UncheckedIOException TRANSVAR16
76#TRANSVAR17=Charset.forName(charsetName)
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=doc.createElementNS(namespace,tagName)
21#TRANSVAR7=(org.jsoup.nodes.TextNode)source
22#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
25#TRANSVAR9=(org.jsoup.nodes.Comment)source
26#TRANSVAR10=doc.createComment(sourceComment.getData())
29#TRANSVAR11=(org.jsoup.nodes.DataNode)source
30#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#org.jsoup.nodes.Node TRANSVAR0
2#int TRANSVAR1
5#TRANSVAR2=(org.jsoup.nodes.Element)source
7#TRANSVAR3=updateNamespaces(sourceEl)
8#TRANSVAR4=namespacesStack.peek().get(prefix)
9#TRANSVAR5=sourceEl.tagName()
11#TRANSVAR6=namespace == null && tagName.contains(":") ? doc.createElementNS("",tagName) : doc.createElementNS(namespace,tagName)
22#TRANSVAR7=(org.jsoup.nodes.TextNode)source
23#TRANSVAR8=doc.createTextNode(sourceText.getWholeText())
26#TRANSVAR9=(org.jsoup.nodes.Comment)source
27#TRANSVAR10=doc.createComment(sourceComment.getData())
30#TRANSVAR11=(org.jsoup.nodes.DataNode)source
31#TRANSVAR12=doc.createTextNode(sourceData.getWholeData())
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
2#String TRANSVAR0
2#String TRANSVAR1
2#Attributes TRANSVAR2
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
3#TRANSVAR0=getData()
4#TRANSVAR1=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5#TRANSVAR2=null
7#TRANSVAR3=doc.child(0)
2#String TRANSVAR0
3#TRANSVAR1=parent.get(this.key)
5#TRANSVAR2=parent.indexOfKey(this.key)
2#String TRANSVAR0
3#TRANSVAR1=this.val
6#TRANSVAR2=parent.indexOfKey(this.key)
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
2#byte[] TRANSVAR0
3#TRANSVAR1=0
10#TRANSVAR2
11#TRANSVAR3=input.length
12#TRANSVAR4=input[i]
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
15#TRANSVAR4=el.select("option[selected]")
16#TRANSVAR5=false
17#Element TRANSVAR6
22#TRANSVAR7=el.select("option").first()
29#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
3#TRANSVAR0=new ArrayList<>()
6#Element TRANSVAR1
9#TRANSVAR2=el.attr("name")
11#TRANSVAR3=el.attr("type")
16#TRANSVAR4=el.select("option[selected]")
17#TRANSVAR5=false
18#Element TRANSVAR6
23#TRANSVAR7=el.select("option").first()
30#TRANSVAR8=el.val().length() > 0 ? el.val() : "on"
2#EvalContext TRANSVAR0
2#EvalContext TRANSVAR0
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
28#TRANSVAR8=node.getNodeType()
45#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
46#TRANSVAR10=((ProcessingInstruction)node).getTarget()
2#Node TRANSVAR0
2#NodeTest TRANSVAR1
11#TRANSVAR2=(NodeNameTest)test
12#TRANSVAR3=nodeNameTest.getNodeName()
13#TRANSVAR4=nodeNameTest.getNamespaceURI()
14#TRANSVAR5=nodeNameTest.isWildcard()
15#TRANSVAR6=testName.getPrefix()
22#TRANSVAR7=DOMNodePointer.getNamespaceURI(node)
29#TRANSVAR8=node.getNodeType()
46#TRANSVAR9=((ProcessingInstructionTest)test).getTarget()
47#TRANSVAR10=((ProcessingInstruction)node).getTarget()
3#TRANSVAR0=getBaseValue()
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
2#Node TRANSVAR0
7#TRANSVAR1=(Element)node
9#TRANSVAR2=element.getNamespaceURI()
11#TRANSVAR3=getPrefix(node)
12#TRANSVAR4=prefix == null ? "xmlns" : "xmlns:" + prefix
14#TRANSVAR5=node
17#TRANSVAR6=((Element)aNode).getAttributeNode(qname)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
29#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#NodePointer TRANSVAR0
4#int TRANSVAR1
5#NodePointer TRANSVAR2
6#int TRANSVAR3
9#TRANSVAR4=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13#TRANSVAR5=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
27#TRANSVAR6=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
3#EvalContext TRANSVAR0
4#Expression TRANSVAR1
5#Expression TRANSVAR2
7#TRANSVAR3=left.compute(context)
8#TRANSVAR4=right.compute(context)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
22#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#Object TRANSVAR0
2#Object TRANSVAR1
21#TRANSVAR2=InfoSetUtil.doubleValue(left)
25#TRANSVAR3=InfoSetUtil.doubleValue(right)
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=0
20#TRANSVAR5=pfxLen
28#TRANSVAR6=str.length() - pfxLen
37#TRANSVAR7=str.charAt(str.length() - 1)
38#TRANSVAR8
39#TRANSVAR9
40#TRANSVAR10
41#TRANSVAR11=str.indexOf('.')
42#TRANSVAR12=str.indexOf('e') + str.indexOf('E') + 1
46#TRANSVAR13=0
77#TRANSVAR14=str.substring(0,str.length() - 1)
78#TRANSVAR15=isAllZeros(mant) && isAllZeros(exp)
87#final NumberFormatException TRANSVAR16
97#TRANSVAR17=NumberUtils.createFloat(numeric)
104#final NumberFormatException TRANSVAR18
111#TRANSVAR19=NumberUtils.createDouble(numeric)
115#final NumberFormatException TRANSVAR20
120#final NumberFormatException TRANSVAR21
140#final NumberFormatException TRANSVAR22
145#final NumberFormatException TRANSVAR23
152#TRANSVAR24=isAllZeros(mant) && isAllZeros(exp)
155#TRANSVAR25=createFloat(str)
160#final NumberFormatException TRANSVAR26
165#TRANSVAR27=createDouble(str)
170#final NumberFormatException TRANSVAR28
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=false
4#TRANSVAR4=0
5#TRANSVAR5=value.charAt(i)
2#StringBuilder TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
3#TRANSVAR3=0
4#TRANSVAR4=value.charAt(i)
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
30#TRANSVAR7=new char[count]
31#TRANSVAR8=end - start
34#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
19#TRANSVAR7=new char[count]
20#TRANSVAR8=end - start
23#TRANSVAR9
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#boolean TRANSVAR3
2#boolean TRANSVAR4
3#char[] TRANSVAR5
3#Random TRANSVAR6
26#TRANSVAR7=new char[count]
27#TRANSVAR8=end - start
30#TRANSVAR9
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#CharSequence TRANSVAR0
2#CharSequence TRANSVAR1
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=Character.codePointCount(input,0,input.length())
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
20#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
3#TRANSVAR0=new DateFormatSymbols(mLocale)
4#TRANSVAR1=new ArrayList<Rule>()
6#TRANSVAR2=symbols.getEras()
7#TRANSVAR3=symbols.getMonths()
8#TRANSVAR4=symbols.getShortMonths()
9#TRANSVAR5=symbols.getWeekdays()
10#TRANSVAR6=symbols.getShortWeekdays()
11#TRANSVAR7=symbols.getAmPmStrings()
13#TRANSVAR8=mPattern.length()
14#TRANSVAR9=new int[1]
16#TRANSVAR10=0
18#TRANSVAR11=parseToken(mPattern,indexRef)
21#TRANSVAR12=token.length()
26#TRANSVAR13
27#TRANSVAR14=token.charAt(0)
108#TRANSVAR15=token.substring(1)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
17#TRANSVAR7=start
24#TRANSVAR8
31#NumberFormatException TRANSVAR9
37#TRANSVAR10=Character.toChars(entityValue)
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
3#TRANSVAR3=input.length()
6#TRANSVAR4=index + 2
7#TRANSVAR5=false
9#TRANSVAR6=input.charAt(start)
20#TRANSVAR7=start
29#TRANSVAR8
36#NumberFormatException TRANSVAR9
42#TRANSVAR10=Character.toChars(entityValue)
49#TRANSVAR11=(end != seqEnd) && (input.charAt(end) == ';')
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#Calendar TRANSVAR0
2#Calendar TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
24#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
21#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#String TRANSVAR0
6#TRANSVAR1=str.toCharArray()
7#TRANSVAR2=chars.length
8#TRANSVAR3=false
9#TRANSVAR4=false
10#TRANSVAR5=false
11#TRANSVAR6=false
13#TRANSVAR7=(chars[0] == '-') ? 1 : 0
16#TRANSVAR8=start + 2
33#TRANSVAR9=start
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone)
2#Date TRANSVAR0
3#TRANSVAR1=new GregorianCalendar(mTimeZone,mLocale)
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
55#TRANSVAR7=str.substring(0,str.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(str)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(str)
144#NumberFormatException TRANSVAR21
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
2#CharSequence TRANSVAR0
2#int TRANSVAR1
2#Writer TRANSVAR2
5#TRANSVAR3=index + 2
6#TRANSVAR4=false
8#TRANSVAR5=input.charAt(start)
14#TRANSVAR6=start
19#TRANSVAR7
26#NumberFormatException TRANSVAR8
31#TRANSVAR9=Character.toChars(entityValue)
2#String TRANSVAR0
2#String TRANSVAR0
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
145#TRANSVAR23=createFloat(str)
149#final NumberFormatException TRANSVAR24
153#TRANSVAR25=createDouble(str)
157#final NumberFormatException TRANSVAR26
2#final String TRANSVAR0
10#TRANSVAR1={"0x","0X","-0x","-0X","#","-#"}
11#TRANSVAR2=0
12#final String TRANSVAR3
19#TRANSVAR4=str.length() - pfxLen
28#TRANSVAR5=str.charAt(str.length() - 1)
29#TRANSVAR6
30#TRANSVAR7
31#TRANSVAR8
32#TRANSVAR9=str.indexOf('.')
33#TRANSVAR10=str.indexOf('e') + str.indexOf('E') + 1
37#TRANSVAR11=0
68#TRANSVAR12=str.substring(0,str.length() - 1)
69#TRANSVAR13=isAllZeros(mant) && isAllZeros(exp)
78#final NumberFormatException TRANSVAR14
88#TRANSVAR15=NumberUtils.createFloat(numeric)
95#final NumberFormatException TRANSVAR16
102#TRANSVAR17=NumberUtils.createDouble(numeric)
106#final NumberFormatException TRANSVAR18
111#final NumberFormatException TRANSVAR19
131#final NumberFormatException TRANSVAR20
136#final NumberFormatException TRANSVAR21
143#TRANSVAR22=isAllZeros(mant) && isAllZeros(exp)
146#TRANSVAR23=createFloat(str)
151#final NumberFormatException TRANSVAR24
156#TRANSVAR25=createDouble(str)
161#final NumberFormatException TRANSVAR26
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=0
9#TRANSVAR5=cs.charAt(i)
10#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#char[] TRANSVAR1
6#TRANSVAR2=cs.length()
7#TRANSVAR3=searchChars.length
8#TRANSVAR4=csLength - 1
9#TRANSVAR5=searchLength - 1
10#TRANSVAR6=0
11#TRANSVAR7=cs.charAt(i)
12#TRANSVAR8=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#Object[] TRANSVAR0
8#TRANSVAR1=new Class[array.length]
9#TRANSVAR2=0
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
2#T[] TRANSVAR0
2#T... TRANSVAR1
8#TRANSVAR2=array1.getClass().getComponentType()
9#TRANSVAR3=(T[])Array.newInstance(type1,array1.length + array2.length)
13#ArrayStoreException TRANSVAR4
15#TRANSVAR5=array2.getClass().getComponentType()
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#Calendar TRANSVAR0
2#StringBuffer TRANSVAR1
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
73#TRANSVAR15=replacementList[i].length() - searchList[i].length()
81#TRANSVAR16=new StringBuilder(text.length() + increase)
85#TRANSVAR17=start
97#TRANSVAR18=0
118#TRANSVAR19=text.length()
119#TRANSVAR20=start
122#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String[] TRANSVAR1
2#String[] TRANSVAR2
3#boolean TRANSVAR3
3#int TRANSVAR4
20#TRANSVAR5=searchList.length
21#TRANSVAR6=replacementList.length
32#TRANSVAR7=new boolean[searchLength]
35#TRANSVAR8=-1
36#TRANSVAR9=-1
37#TRANSVAR10=-1
41#TRANSVAR11=0
66#TRANSVAR12=0
69#TRANSVAR13=0
72#TRANSVAR14=0
76#TRANSVAR15=replacementList[i].length() - searchList[i].length()
84#TRANSVAR16=new StringBuilder(text.length() + increase)
88#TRANSVAR17=start
100#TRANSVAR18=0
121#TRANSVAR19=text.length()
122#TRANSVAR20=start
125#TRANSVAR21=buf.toString()
2#String TRANSVAR0
2#String TRANSVAR1
2#String TRANSVAR0
2#String TRANSVAR1
6#TRANSVAR2=searchStr.length()
7#TRANSVAR3=str.length() - len
8#TRANSVAR4=0
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=str.charAt(i)
6#TRANSVAR5=this.entityName(c)
2#Writer TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=str.length()
4#TRANSVAR3=0
5#TRANSVAR4=Character.codePointAt(str,i)
6#TRANSVAR5=this.entityName(c)
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
9#TRANSVAR6=start
10#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#StringBuffer TRANSVAR2
3#boolean TRANSVAR3
4#TRANSVAR4=pos.getIndex()
5#TRANSVAR5=pattern.toCharArray()
10#TRANSVAR6=start
11#TRANSVAR7=pos.getIndex()
2#String TRANSVAR0
19#TRANSVAR1=val.charAt(val.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=val.indexOf('.')
24#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
52#TRANSVAR7=val.substring(0,val.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(val)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(val)
141#NumberFormatException TRANSVAR21
2#String TRANSVAR0
22#TRANSVAR1=val.charAt(val.length() - 1)
23#TRANSVAR2
24#TRANSVAR3
25#TRANSVAR4
26#TRANSVAR5=val.indexOf('.')
27#TRANSVAR6=val.indexOf('e') + val.indexOf('E') + 1
55#TRANSVAR7=val.substring(0,val.length() - 1)
56#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
65#NumberFormatException TRANSVAR9
75#TRANSVAR10=NumberUtils.createFloat(numeric)
82#NumberFormatException TRANSVAR11
89#TRANSVAR12=NumberUtils.createDouble(numeric)
93#NumberFormatException TRANSVAR13
98#NumberFormatException TRANSVAR14
118#NumberFormatException TRANSVAR15
123#NumberFormatException TRANSVAR16
130#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
132#TRANSVAR18=createFloat(val)
136#NumberFormatException TRANSVAR19
140#TRANSVAR20=createDouble(val)
144#NumberFormatException TRANSVAR21
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
23#TRANSVAR4=new StringBuffer()
24#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#String TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
2#String TRANSVAR3
26#TRANSVAR4=new StringBuffer()
27#TRANSVAR5=StringUtils.indexOf(str," ",lower)
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
2#Object TRANSVAR0
2#Object TRANSVAR1
13#TRANSVAR2=lhs.getClass()
3#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
6#TRANSVAR0=greatestCommonDivisor(Math.abs(numerator),denominator)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
24#TRANSVAR4=str.charAt(3)
28#TRANSVAR5=str.charAt(4)
2#final String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
15#TRANSVAR3=str.charAt(1)
16#TRANSVAR4=str.charAt(2)
31#TRANSVAR5=str.charAt(1)
44#TRANSVAR6=str.charAt(3)
48#TRANSVAR7=str.charAt(4)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
37#TRANSVAR4=str.charAt(0)
2#String TRANSVAR0
17#TRANSVAR1=str.charAt(0)
18#TRANSVAR2=str.charAt(1)
24#TRANSVAR3=str.charAt(0)
38#TRANSVAR4=str.charAt(0)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Writer TRANSVAR0
2#String TRANSVAR1
2#boolean TRANSVAR2
9#TRANSVAR3
11#TRANSVAR4=0
12#TRANSVAR5=str.charAt(i)
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
22#TRANSVAR5=str.charAt(4)
2#String TRANSVAR0
6#TRANSVAR1=str.length()
10#TRANSVAR2=str.charAt(0)
11#TRANSVAR3=str.charAt(1)
21#TRANSVAR4=str.charAt(3)
25#TRANSVAR5=str.charAt(4)
2#Locale TRANSVAR0
2#Locale TRANSVAR0
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
63#NumberFormatException TRANSVAR9
73#TRANSVAR10=NumberUtils.createFloat(numeric)
80#NumberFormatException TRANSVAR11
87#TRANSVAR12=NumberUtils.createDouble(numeric)
91#NumberFormatException TRANSVAR13
96#NumberFormatException TRANSVAR14
116#NumberFormatException TRANSVAR15
121#NumberFormatException TRANSVAR16
128#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
130#TRANSVAR18=createFloat(str)
134#NumberFormatException TRANSVAR19
138#TRANSVAR20=createDouble(str)
142#NumberFormatException TRANSVAR21
2#String TRANSVAR0
19#TRANSVAR1=str.charAt(str.length() - 1)
20#TRANSVAR2
21#TRANSVAR3
22#TRANSVAR4
23#TRANSVAR5=str.indexOf('.')
24#TRANSVAR6=str.indexOf('e') + str.indexOf('E') + 1
52#TRANSVAR7=str.substring(0,str.length() - 1)
53#TRANSVAR8=isAllZeros(mant) && isAllZeros(exp)
62#NumberFormatException TRANSVAR9
72#TRANSVAR10=NumberUtils.createFloat(numeric)
79#NumberFormatException TRANSVAR11
86#TRANSVAR12=NumberUtils.createDouble(numeric)
90#NumberFormatException TRANSVAR13
95#NumberFormatException TRANSVAR14
115#NumberFormatException TRANSVAR15
120#NumberFormatException TRANSVAR16
127#TRANSVAR17=isAllZeros(mant) && isAllZeros(exp)
129#TRANSVAR18=createFloat(str)
133#NumberFormatException TRANSVAR19
137#TRANSVAR20=createDouble(str)
141#NumberFormatException TRANSVAR21
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#Object TRANSVAR0
2#int TRANSVAR1
2#char TRANSVAR2
5#TRANSVAR3=(obj == null ? getNullText() : obj.toString())
6#TRANSVAR4=str.length()
10#TRANSVAR5=width - strLen
12#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#CharSequence TRANSVAR0
2#Writer TRANSVAR1
9#TRANSVAR2=0
10#TRANSVAR3=input.length()
12#TRANSVAR4=translate(input,pos,out)
14#TRANSVAR5=Character.toChars(Character.codePointAt(input,pos))
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=thisBuf.length - strLen
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#String TRANSVAR0
2#int TRANSVAR1
7#TRANSVAR2=str.length()
17#TRANSVAR3=buffer
18#TRANSVAR4=size - strLen + 1
20#TRANSVAR5=startIndex
21#TRANSVAR6=0
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
24#TRANSVAR3=false
25#TRANSVAR4=0
26#TRANSVAR5=0
50#TRANSVAR6=0
51#TRANSVAR7=false
84#TRANSVAR8=val.getActualMinimum(fields[i][0])
85#TRANSVAR9=val.getActualMaximum(fields[i][0])
2#Calendar TRANSVAR0
2#int TRANSVAR1
2#boolean TRANSVAR2
17#TRANSVAR3=val.getTime()
18#TRANSVAR4=date.getTime()
19#TRANSVAR5=false
22#TRANSVAR6=val.get(Calendar.MILLISECOND)
31#TRANSVAR7=val.get(Calendar.SECOND)
40#TRANSVAR8=val.get(Calendar.MINUTE)
52#TRANSVAR9=false
53#TRANSVAR10=0
54#TRANSVAR11=0
78#TRANSVAR12=0
79#TRANSVAR13=false
112#TRANSVAR14=val.getActualMinimum(fields[i][0])
113#TRANSVAR15=val.getActualMaximum(fields[i][0])
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
7#TRANSVAR0=new StringBuilder()
8#TRANSVAR1=new ArrayList<Strategy>()
10#TRANSVAR2=formatPattern.matcher(pattern)
16#TRANSVAR3=getStrategy(currentFormatField)
23#TRANSVAR4=patternMatcher.group()
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#final double[] TRANSVAR0
2#final int TRANSVAR1
3#final double[] TRANSVAR2
3#final int TRANSVAR3
4#final double[] TRANSVAR4
4#final int TRANSVAR5
7#TRANSVAR6=new double[getSize()]
9#TRANSVAR7=new double[getSize()]
20#TRANSVAR8=0
32#TRANSVAR9=1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
3#TRANSVAR2=pos.getIndex()
9#TRANSVAR3=parseNumber(source,getRealFormat(),pos)
19#TRANSVAR4=pos.getIndex()
20#TRANSVAR5=parseNextCharacter(source,pos)
21#TRANSVAR6=0
46#TRANSVAR7=parseNumber(source,getRealFormat(),pos)
56#TRANSVAR8=getImaginaryCharacter().length()
58#TRANSVAR9=startIndex + n
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0.0d
13#TRANSVAR3=0.0d
14#TRANSVAR4=0
2#double[] TRANSVAR0
2#long[] TRANSVAR1
12#TRANSVAR2=0d
13#TRANSVAR3=0d
14#TRANSVAR4=0
18#TRANSVAR5=1.0d
19#TRANSVAR6=false
24#TRANSVAR7=0.0d
25#TRANSVAR8=0.0d
26#TRANSVAR9=0
2#double TRANSVAR0
2#double TRANSVAR0
6#MaxIterationsExceededException TRANSVAR1
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
40#TRANSVAR6=pos.getIndex()
41#TRANSVAR7=parseNextCharacter(source,pos)
63#TRANSVAR8=getDenominatorFormat().parse(source,pos)
74#TRANSVAR9=whole.intValue()
75#TRANSVAR10=num.intValue()
76#TRANSVAR11=den.intValue()
2#String TRANSVAR0
2#ParsePosition TRANSVAR1
4#TRANSVAR2=super.parse(source,pos)
9#TRANSVAR3=pos.getIndex()
15#TRANSVAR4=getWholeFormat().parse(source,pos)
28#TRANSVAR5=getNumeratorFormat().parse(source,pos)
44#TRANSVAR6=pos.getIndex()
45#TRANSVAR7=parseNextCharacter(source,pos)
67#TRANSVAR8=getDenominatorFormat().parse(source,pos)
82#TRANSVAR9=whole.intValue()
83#TRANSVAR10=num.intValue()
84#TRANSVAR11=den.intValue()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#final double[] TRANSVAR0
3#TRANSVAR1=getDimension()
2#RealMatrix TRANSVAR0
3#TRANSVAR1=new EigenDecomposition(m)
2#RealMatrix TRANSVAR0
4#TRANSVAR1=m.getRowDimension()
5#TRANSVAR2=new DiagonalMatrix(dim)
6#TRANSVAR3=0
11#TRANSVAR4=new EigenDecomposition(m)
2#final int TRANSVAR0
2#final int TRANSVAR0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
48#TRANSVAR7=0
3#TRANSVAR0=getStartPoint()
4#TRANSVAR1=getLowerBound()
5#TRANSVAR2=getUpperBound()
8#TRANSVAR3=false
9#TRANSVAR4=0
17#TRANSVAR5=false
19#TRANSVAR6=0
38#TRANSVAR7=0
40#TRANSVAR8=Double.MAX_VALUE + boundaries[0][i]
41#TRANSVAR9=new NumberIsTooLargeException(boundaries[1][i],max,true)
61#TRANSVAR10=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=new int[order]
11#TRANSVAR7=0
15#TRANSVAR8=0
16#TRANSVAR9=true
20#TRANSVAR10=r + 1
21#TRANSVAR11=index[i]
22#TRANSVAR12=index[swap[i]]
31#TRANSVAR13=index[r]
37#TRANSVAR14=index[r]
45#TRANSVAR15=r
61#TRANSVAR16=FastMath.sqrt(c[ir][ir])
63#TRANSVAR17=1 / sqrt
64#TRANSVAR18=r + 1
65#TRANSVAR19=index[i]
66#TRANSVAR20=inverse * c[ii][ir]
69#TRANSVAR21=r + 1
70#TRANSVAR22=index[j]
71#TRANSVAR23=c[ii][ij] - e * b[j][r]
85#TRANSVAR24=0
86#TRANSVAR25=0
2#RealMatrix TRANSVAR0
2#double TRANSVAR1
5#TRANSVAR2=matrix.getRowDimension()
6#TRANSVAR3=matrix.getData()
7#TRANSVAR4=new double[order][order]
9#TRANSVAR5=new int[order]
10#TRANSVAR6=0
14#TRANSVAR7=0
15#TRANSVAR8=true
18#TRANSVAR9=r
19#TRANSVAR10=r + 1
20#TRANSVAR11=index[i]
21#TRANSVAR12=index[swapR]
30#TRANSVAR13=index[r]
33#TRANSVAR14=b[r]
39#TRANSVAR15=index[r]
47#TRANSVAR16=r
63#TRANSVAR17=FastMath.sqrt(c[ir][ir])
65#TRANSVAR18=1 / sqrt
66#TRANSVAR19=1 / c[ir][ir]
67#TRANSVAR20=r + 1
68#TRANSVAR21=index[i]
69#TRANSVAR22=inverse * c[ii][ir]
72#TRANSVAR23=r + 1
73#TRANSVAR24=index[j]
74#TRANSVAR25=c[ii][ij] - e * b[j][r]
88#TRANSVAR26=0
89#TRANSVAR27=0
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
39#TRANSVAR17=0
41#TRANSVAR18=0.5 * (a + b)
42#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
43#TRANSVAR20=2 * tol1
46#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
48#TRANSVAR22=0
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
113#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=current
40#TRANSVAR18=0
42#TRANSVAR19=0.5 * (a + b)
43#TRANSVAR20=relativeThreshold * FastMath.abs(x) + absoluteThreshold
44#TRANSVAR21=2 * tol1
47#TRANSVAR22=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
49#TRANSVAR23=0
50#TRANSVAR24=0
51#TRANSVAR25=0
52#TRANSVAR26=0
114#TRANSVAR27=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
3#TRANSVAR0=getGoalType() == GoalType.MINIMIZE
4#TRANSVAR1=getMin()
5#TRANSVAR2=getStartValue()
6#TRANSVAR3=getMax()
9#TRANSVAR4=getConvergenceChecker()
12#TRANSVAR5
13#TRANSVAR6
22#TRANSVAR7=mid
23#TRANSVAR8=x
24#TRANSVAR9=x
25#TRANSVAR10=0
26#TRANSVAR11=0
27#TRANSVAR12=computeObjectiveValue(x)
31#TRANSVAR13=fx
32#TRANSVAR14=fx
34#TRANSVAR15=null
35#TRANSVAR16=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38#TRANSVAR17=0
40#TRANSVAR18=0.5 * (a + b)
41#TRANSVAR19=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42#TRANSVAR20=2 * tol1
45#TRANSVAR21=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47#TRANSVAR22=0
48#TRANSVAR23=0
49#TRANSVAR24=0
50#TRANSVAR25=0
112#TRANSVAR26=computeObjectiveValue(u)
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
4#TRANSVAR0=0
5#TRANSVAR1=0
6#TRANSVAR2=0
7#TRANSVAR3=0
8#TRANSVAR4=0
10#TRANSVAR5=observations[0].getX()
11#TRANSVAR6=observations[0].getY()
12#TRANSVAR7=0
13#TRANSVAR8=0
14#TRANSVAR9=currentX
15#TRANSVAR10=1
17#TRANSVAR11=currentX
18#TRANSVAR12=currentY
24#TRANSVAR13=currentX - previousX
25#TRANSVAR14=currentY - previousY
26#TRANSVAR15=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28#TRANSVAR16=dy * dy / dx
30#TRANSVAR17=currentX - startX
42#TRANSVAR18=sy2 * sxz - sxy * syz
43#TRANSVAR19=sxy * sxz - sx2 * syz
44#TRANSVAR20=sx2 * sy2 - sxy * sxy
46#TRANSVAR21=observations.length - 1
49#TRANSVAR22=observations[last].getX() - observations[0].getX()
55#TRANSVAR23=Double.POSITIVE_INFINITY
56#TRANSVAR24=Double.NEGATIVE_INFINITY
57#TRANSVAR25=1
58#TRANSVAR26=observations[i].getY()
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
2#int TRANSVAR3
5#TRANSVAR4=Integer.MAX_VALUE
6#TRANSVAR5=value
7#TRANSVAR6=(long)FastMath.floor(r0)
20#TRANSVAR7=1
21#TRANSVAR8=0
22#TRANSVAR9=a0
23#TRANSVAR10=1
25#TRANSVAR11=0
26#TRANSVAR12=1
28#TRANSVAR13=0
29#TRANSVAR14=false
32#TRANSVAR15=1.0 / (r0 - a0)
33#TRANSVAR16=(long)FastMath.floor(r1)
40#TRANSVAR17=(double)p2 / (double)q2
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
31#Integer TRANSVAR9
32#TRANSVAR10=0
33#TRANSVAR11=i + tableau.getArtificialVariableOffset()
34#TRANSVAR12=tableau.getEntry(row,column)
50#TRANSVAR13=null
51#TRANSVAR14=tableau.getWidth()
52#Integer TRANSVAR15
53#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#SimplexTableau TRANSVAR0
2#final int TRANSVAR1
4#TRANSVAR2=new ArrayList<Integer>()
5#TRANSVAR3=Double.MAX_VALUE
6#TRANSVAR4=tableau.getNumObjectiveFunctions()
7#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
8#TRANSVAR6=tableau.getEntry(i,col)
11#TRANSVAR7=rhs / entry
14#TRANSVAR8=Double.compare(ratio,minRatio)
32#Integer TRANSVAR9
33#TRANSVAR10=0
34#TRANSVAR11=i + tableau.getArtificialVariableOffset()
35#TRANSVAR12=tableau.getEntry(row,column)
53#TRANSVAR13=null
54#TRANSVAR14=tableau.getWidth()
55#Integer TRANSVAR15
56#TRANSVAR16=tableau.getNumObjectiveFunctions()
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
11#TRANSVAR3=new double[len]
12#TRANSVAR4=0
14#TRANSVAR5=0
15#TRANSVAR6=a[i]
16#TRANSVAR7=SPLIT_FACTOR * ai
17#TRANSVAR8=ca - (ca - ai)
18#TRANSVAR9=ai - aHigh
20#TRANSVAR10=b[i]
21#TRANSVAR11=SPLIT_FACTOR * bi
22#TRANSVAR12=cb - (cb - bi)
23#TRANSVAR13=bi - bHigh
25#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
33#TRANSVAR15=prodHigh[0]
34#TRANSVAR16=prodHigh[1]
35#TRANSVAR17=prodHighCur + prodHighNext
36#TRANSVAR18=sHighPrev - prodHighNext
37#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
39#TRANSVAR20=len - 1
40#TRANSVAR21=1
42#TRANSVAR22=sHighPrev + prodHighNext
48#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
54#TRANSVAR24=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
4#TRANSVAR2=a.length
14#TRANSVAR3=new double[len]
15#TRANSVAR4=0
17#TRANSVAR5=0
18#TRANSVAR6=a[i]
19#TRANSVAR7=SPLIT_FACTOR * ai
20#TRANSVAR8=ca - (ca - ai)
21#TRANSVAR9=ai - aHigh
23#TRANSVAR10=b[i]
24#TRANSVAR11=SPLIT_FACTOR * bi
25#TRANSVAR12=cb - (cb - bi)
26#TRANSVAR13=bi - bHigh
28#TRANSVAR14=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
36#TRANSVAR15=prodHigh[0]
37#TRANSVAR16=prodHigh[1]
38#TRANSVAR17=prodHighCur + prodHighNext
39#TRANSVAR18=sHighPrev - prodHighNext
40#TRANSVAR19=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
42#TRANSVAR20=len - 1
43#TRANSVAR21=1
45#TRANSVAR22=sHighPrev + prodHighNext
51#TRANSVAR23=sHighPrev + (prodLowSum + sLowSum)
57#TRANSVAR24=0
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#final double TRANSVAR0
3#final int TRANSVAR1
4#final int TRANSVAR2
7#TRANSVAR3=n1 * n2
10#TRANSVAR4=n1n2prod / 2.0
11#TRANSVAR5=n1n2prod * (n1 + n2 + 1) / 12.0
13#TRANSVAR6=(Umin - EU) / FastMath.sqrt(VarU)
15#TRANSVAR7=new NormalDistribution(0,1)
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=1.0
14#TRANSVAR8=1.0
15#TRANSVAR9=hPrev
16#TRANSVAR10=hPrev
19#TRANSVAR11=getA(n,x)
20#TRANSVAR12=getB(n,x)
22#TRANSVAR13=a * hPrev + b * p0
23#TRANSVAR14=a * q1 + b * dPrev
25#TRANSVAR15=1d
26#TRANSVAR16=1d
27#TRANSVAR17=5
28#TRANSVAR18=FastMath.max(a,b)
32#TRANSVAR19=0
48#TRANSVAR20=cN / q2 / cPrev
2#double TRANSVAR0
2#double TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=1e-50
4#TRANSVAR4=getA(0,x)
11#TRANSVAR5=1
12#TRANSVAR6=0.0
13#TRANSVAR7=hPrev
14#TRANSVAR8=hPrev
17#TRANSVAR9=getA(n,x)
18#TRANSVAR10=getB(n,x)
20#TRANSVAR11=a + b * dPrev
24#TRANSVAR12=a + b / cPrev
30#TRANSVAR13=cN * dN
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
4#TRANSVAR0=getVertices()
7#TRANSVAR1=getTree(false)
23#TRANSVAR2=0
24#TRANSVAR3=0
25#TRANSVAR4=0
27#Vector2D[] TRANSVAR5
28#TRANSVAR6=loop[loop.length - 1].getX()
29#TRANSVAR7=loop[loop.length - 1].getY()
30#final Vector2D TRANSVAR8
31#TRANSVAR9=x1
32#TRANSVAR10=y1
35#TRANSVAR11=x0 * y1 - y0 * x1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
7#TRANSVAR0=new ArrayList<Integer>()
11#TRANSVAR1=getNumObjectiveFunctions()
12#TRANSVAR2=tableau.getEntry(0,i)
19#TRANSVAR3=0
20#TRANSVAR4=i + getArtificialVariableOffset()
26#TRANSVAR5=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27#TRANSVAR6=1
28#TRANSVAR7=0
29#TRANSVAR8=0
36#TRANSVAR9=columnsToDrop.size() - 1
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt
83#TRANSVAR28=jpt
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#double[] TRANSVAR0
3#double[] TRANSVAR1
6#TRANSVAR2=currentBest.getDimension()
7#TRANSVAR3=numberOfInterpolationPoints
8#TRANSVAR4=bMatrix.getRowDimension()
10#TRANSVAR5=initialTrustRegionRadius * initialTrustRegionRadius
11#TRANSVAR6=1d / rhosq
12#TRANSVAR7=n + 1
17#TRANSVAR8=0
19#TRANSVAR9=0
22#TRANSVAR10=0
26#TRANSVAR11=0
26#TRANSVAR12=n * np / 2
29#TRANSVAR13=0
31#TRANSVAR14=0
31#TRANSVAR15=npt - np
40#TRANSVAR16=0
41#TRANSVAR17=0
42#TRANSVAR18=Double.NaN
44#TRANSVAR19=getEvaluations()
45#TRANSVAR20=nfm - n
46#TRANSVAR21=nfm - 1
47#TRANSVAR22=nfx - 1
48#TRANSVAR23=0
49#TRANSVAR24=0
73#TRANSVAR25=(nfm - np) / n
77#TRANSVAR26=jpt
82#TRANSVAR27=ipt - 1
83#TRANSVAR28=jpt - 1
91#TRANSVAR29=0
103#TRANSVAR30=computeObjectiveValue(currentBest.toArray())
104#TRANSVAR31=isMinimize ? objectiveValue : -objectiveValue
105#TRANSVAR32=getEvaluations()
126#TRANSVAR33=ONE / stepa
133#TRANSVAR34=nfx * (nfx + 1) / 2 - 1
134#TRANSVAR35=(f - fbeg) / stepb
135#TRANSVAR36=stepb - stepa
169#TRANSVAR37=ipt * (ipt - 1) / 2 + jpt - 1
170#TRANSVAR38=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
63#TRANSVAR16=1
65#TRANSVAR17=0
66#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
67#TRANSVAR19=1
78#TRANSVAR20=0
79#TRANSVAR21=b[0] * yDotK[0][j]
80#TRANSVAR22=1
90#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
116#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
118#TRANSVAR25=stepSize * factor
119#TRANSVAR26=stepStart + scaledH
120#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
123#TRANSVAR28=stepStart + hNew
124#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
2#final ExpandableStatefulODE TRANSVAR0
2#final double TRANSVAR1
7#TRANSVAR2=t > equations.getTime()
10#TRANSVAR3=equations.getCompleteState()
11#TRANSVAR4=y0.clone()
12#TRANSVAR5=c.length + 1
13#TRANSVAR6=new double[stages][y.length]
14#TRANSVAR7=y0.clone()
15#TRANSVAR8=new double[y.length]
18#TRANSVAR9=(RungeKuttaStepInterpolator)prototype.copy()
25#TRANSVAR10=0
26#TRANSVAR11=true
36#TRANSVAR12=10
45#TRANSVAR13=new double[mainSetDimension]
47#TRANSVAR14=0
51#TRANSVAR15=0
72#TRANSVAR16=1
74#TRANSVAR17=0
75#TRANSVAR18=a[k - 1][0] * yDotK[0][j]
76#TRANSVAR19=1
87#TRANSVAR20=0
88#TRANSVAR21=b[0] * yDotK[0][j]
89#TRANSVAR22=1
99#TRANSVAR23=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
125#TRANSVAR24=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
127#TRANSVAR25=stepSize * factor
128#TRANSVAR26=stepStart + scaledH
129#TRANSVAR27=forward ? (nextT >= t) : (nextT <= t)
132#TRANSVAR28=stepStart + hNew
133#TRANSVAR29=forward ? (filteredNextT >= t) : (filteredNextT <= t)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
104#TRANSVAR15
105#TRANSVAR16=0
106#TRANSVAR17=nbPoints
142#TRANSVAR18=computeObjectiveValue(nextX)
5#TRANSVAR0=new double[maximalOrder + 1]
6#TRANSVAR1=new double[maximalOrder + 1]
26#TRANSVAR2
27#TRANSVAR3
54#TRANSVAR4=new double[x.length]
57#TRANSVAR5=x[signChangeIndex - 1]
58#TRANSVAR6=y[signChangeIndex - 1]
59#TRANSVAR7=FastMath.abs(yA)
60#TRANSVAR8=0
61#TRANSVAR9=x[signChangeIndex]
62#TRANSVAR10=y[signChangeIndex]
63#TRANSVAR11=FastMath.abs(yB)
64#TRANSVAR12=0
70#TRANSVAR13=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91#TRANSVAR14
94#TRANSVAR15=agingA - MAXIMAL_AGING
95#TRANSVAR16=(1 << p) - 1
96#TRANSVAR17=p + 1
100#TRANSVAR18=agingB - MAXIMAL_AGING
101#TRANSVAR19=p + 1
102#TRANSVAR20=(1 << p) - 1
110#TRANSVAR21
111#TRANSVAR22=0
112#TRANSVAR23=nbPoints
148#TRANSVAR24=computeObjectiveValue(nextX)
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=0
2#final double[] TRANSVAR0
2#final double[] TRANSVAR1
3#final double TRANSVAR2
3#final int TRANSVAR3
3#final int TRANSVAR4
5#TRANSVAR5=Double.NaN
11#TRANSVAR6=0.0
12#TRANSVAR7=0.0
13#TRANSVAR8=0.0
14#TRANSVAR9=begin
20#TRANSVAR10=0
21#TRANSVAR11=begin
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
3#TRANSVAR0=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4#TRANSVAR1=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5#TRANSVAR2=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=new double[getOriginalNumDecisionVariables()]
9#TRANSVAR5=0
10#TRANSVAR6=columnLabels.indexOf("x" + i)
15#TRANSVAR7=getBasicRow(colIndex)
2#double TRANSVAR0
2#double TRANSVAR0
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
12#EventState TRANSVAR6
19#TRANSVAR7=interpolator.isForward() ? +1 : -1
20#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
23#EventState TRANSVAR9
23#EventState TRANSVAR10
29#final EventState TRANSVAR11
39#TRANSVAR12=occuringEvents.iterator()
40#TRANSVAR13=iterator.next()
44#TRANSVAR14=currentEvent.getEventTime()
50#TRANSVAR15=interpolator.getInterpolatedState()
55#final StepHandler TRANSVAR16
88#TRANSVAR17=interpolator.getInterpolatedState()
89#final EventState TRANSVAR18
96#StepHandler TRANSVAR19
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState()
54#final StepHandler TRANSVAR16
61#final EventState TRANSVAR17
73#final EventState TRANSVAR18
93#TRANSVAR19=interpolator.getInterpolatedState()
94#final EventState TRANSVAR20
101#StepHandler TRANSVAR21
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR0
2#int TRANSVAR1
4#TRANSVAR2=(long)rowDimension
5#TRANSVAR3=(long)columnDimension
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
16#TRANSVAR0=real / imaginary
17#TRANSVAR1=1. / (real * q + imaginary)
20#TRANSVAR2=imaginary / real
21#TRANSVAR3=1. / (imaginary * q + real)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
4#TRANSVAR0=getMin()
5#TRANSVAR1=getMax()
6#TRANSVAR2=computeObjectiveValue(x0)
7#TRANSVAR3=computeObjectiveValue(x1)
23#TRANSVAR4=getFunctionValueAccuracy()
24#TRANSVAR5=getAbsoluteAccuracy()
25#TRANSVAR6=getRelativeAccuracy()
29#TRANSVAR7=false
34#TRANSVAR8=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35#TRANSVAR9=computeObjectiveValue(x)
61#TRANSVAR10=FastMath.max(rtol * FastMath.abs(x1),atol)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
36#TRANSVAR21=Vector3D.crossProduct(v1,v2)
37#TRANSVAR22=v3.subtract(u3)
39#TRANSVAR23=u1.crossProduct(u3)
68#TRANSVAR24=1.0 / (c + c)
2#Vector3D TRANSVAR0
2#Vector3D TRANSVAR1
2#Vector3D TRANSVAR2
2#Vector3D TRANSVAR3
5#TRANSVAR4=u1.getNormSq()
6#TRANSVAR5=u2.getNormSq()
7#TRANSVAR6=v1.getNormSq()
8#TRANSVAR7=v2.getNormSq()
17#TRANSVAR8=u1.dotProduct(u2)
18#TRANSVAR9=v1.dotProduct(v2)
19#TRANSVAR10=u1u2 / u1u1
20#TRANSVAR11=v1v2 / u1u1
21#TRANSVAR12=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22#TRANSVAR13=coeffU - beta * coeffV
26#TRANSVAR14=u1
27#TRANSVAR15=v1
28#TRANSVAR16=v1.subtract(u1)
29#TRANSVAR17=v2.subtract(u2)
30#TRANSVAR18=v1Su1.crossProduct(v2Su2)
31#TRANSVAR19=u1.crossProduct(u2)
32#TRANSVAR20=k.dotProduct(u3)
33#TRANSVAR21=0.001
37#TRANSVAR22=Vector3D.crossProduct(v1,v2)
38#TRANSVAR23=v3.subtract(u3)
40#TRANSVAR24=u1.crossProduct(u3)
69#TRANSVAR25=1.0 / (c + c)
2#Complex TRANSVAR0
2#Complex TRANSVAR0
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
2#final Vector3D TRANSVAR0
2#final Vector3D TRANSVAR1
4#TRANSVAR2=v1.getNormSq()
5#TRANSVAR3=v2.getNormSq()
12#TRANSVAR4=(FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4
13#TRANSVAR5=FastMath.scalb(v1.x,-deltaExp)
14#TRANSVAR6=FastMath.scalb(v1.y,-deltaExp)
15#TRANSVAR7=FastMath.scalb(v1.z,-deltaExp)
16#TRANSVAR8=FastMath.scalb(v2.x,deltaExp)
17#TRANSVAR9=FastMath.scalb(v2.y,deltaExp)
18#TRANSVAR10=FastMath.scalb(v2.z,deltaExp)
27#TRANSVAR11=(x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2,2 * deltaExp)
28#TRANSVAR12=FastMath.rint(256 * ratio) / 256
30#TRANSVAR13=x1 - rho * x2
31#TRANSVAR14=y1 - rho * y2
32#TRANSVAR15=z1 - rho * z2
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
23#TRANSVAR6=1
2#int TRANSVAR0
8#TRANSVAR1=new int[dimension]
10#TRANSVAR2=0
11#TRANSVAR3=0
12#TRANSVAR4=0
13#TRANSVAR5=uniCounterOffset[i]
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#final Collection<T> TRANSVAR0
3#final int TRANSVAR1
3#final Random TRANSVAR2
5#TRANSVAR3=new ArrayList<T>(points)
6#TRANSVAR4=new ArrayList<Cluster<T>>()
9#TRANSVAR5=pointSet.remove(random.nextInt(pointSet.size()))
12#TRANSVAR6=new double[pointSet.size()]
16#TRANSVAR7=0
17#TRANSVAR8=0
18#TRANSVAR9=pointSet.get(i)
19#TRANSVAR10=getNearestCluster(resultSet,p)
20#TRANSVAR11=p.distanceFrom(nearest.getCenter())
27#TRANSVAR12=random.nextDouble() * sum
28#TRANSVAR13=0
30#TRANSVAR14=pointSet.remove(i)
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
3#TRANSVAR0=(new ParameterGuesser(getObservations())).guess()
2#final float TRANSVAR0
2#final float TRANSVAR1
2#final float TRANSVAR0
2#final float TRANSVAR1
2#double TRANSVAR0
3#TRANSVAR1=x - mean
7#MaxIterationsExceededException TRANSVAR2
2#double TRANSVAR0
3#TRANSVAR1=x - mean
2#double TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR0
2#double TRANSVAR1
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[cols]
20#TRANSVAR6=new double[cols]
21#TRANSVAR7=new double[cols]
28#TRANSVAR8=true
29#TRANSVAR9=new VectorialPointValuePair(point,objective)
34#TRANSVAR10=current
42#TRANSVAR11=0
43#TRANSVAR12=permutation[k]
52#TRANSVAR13=0
53#TRANSVAR14=jacNorm[k]
57#TRANSVAR15=dk * point[k]
69#TRANSVAR16=0
71#TRANSVAR17=0
72#TRANSVAR18=permutation[j]
73#TRANSVAR19=jacNorm[pj]
75#TRANSVAR20=0
76#TRANSVAR21=0
89#TRANSVAR22=0
94#TRANSVAR23=0
97#TRANSVAR24=0
98#TRANSVAR25=permutation[j]
101#TRANSVAR26=cost
102#TRANSVAR27=residuals
110#TRANSVAR28=0
111#TRANSVAR29=0
112#TRANSVAR30=permutation[j]
115#TRANSVAR31=diag[pj] * lmDir[pj]
129#TRANSVAR32=-1.0
131#TRANSVAR33=cost / previousCost
137#TRANSVAR34=0
138#TRANSVAR35=permutation[j]
139#TRANSVAR36=lmDir[pj]
141#TRANSVAR37=0
145#TRANSVAR38=0
146#TRANSVAR39=0
149#TRANSVAR40=previousCost * previousCost
151#TRANSVAR41=lmPar * lmNorm * lmNorm / pc2
152#TRANSVAR42=coeff1 + 2 * coeff2
153#TRANSVAR43=-(coeff1 + coeff2)
160#TRANSVAR44=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
177#TRANSVAR45=0
178#TRANSVAR46=diag[k] * point[k]
188#TRANSVAR47=0
189#TRANSVAR48=permutation[j]
14#TRANSVAR0=0
15#TRANSVAR1=0
16#TRANSVAR2=new double[cols]
17#TRANSVAR3=new double[cols]
18#TRANSVAR4=new double[rows]
19#TRANSVAR5=new double[rows]
20#TRANSVAR6=new double[rows]
21#TRANSVAR7=new double[cols]
22#TRANSVAR8=new double[cols]
23#TRANSVAR9=new double[cols]
30#TRANSVAR10=true
31#TRANSVAR11=new VectorialPointValuePair(point,objective)
33#TRANSVAR12=0
39#TRANSVAR13=current
47#TRANSVAR14=0
48#TRANSVAR15=permutation[k]
57#TRANSVAR16=0
58#TRANSVAR17=jacNorm[k]
62#TRANSVAR18=dk * point[k]
74#TRANSVAR19=0
76#TRANSVAR20=0
77#TRANSVAR21=permutation[j]
78#TRANSVAR22=jacNorm[pj]
80#TRANSVAR23=0
81#TRANSVAR24=0
96#TRANSVAR25=0
101#TRANSVAR26=0
104#TRANSVAR27=0
105#TRANSVAR28=permutation[j]
108#TRANSVAR29=cost
109#TRANSVAR30=residuals
120#TRANSVAR31=0
121#TRANSVAR32=0
122#TRANSVAR33=permutation[j]
125#TRANSVAR34=diag[pj] * lmDir[pj]
138#TRANSVAR35=-1.0
140#TRANSVAR36=cost / previousCost
146#TRANSVAR37=0
147#TRANSVAR38=permutation[j]
148#TRANSVAR39=lmDir[pj]
150#TRANSVAR40=0
154#TRANSVAR41=0
155#TRANSVAR42=0
158#TRANSVAR43=previousCost * previousCost
160#TRANSVAR44=lmPar * lmNorm * lmNorm / pc2
161#TRANSVAR45=coeff1 + 2 * coeff2
162#TRANSVAR46=-(coeff1 + coeff2)
169#TRANSVAR47=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
186#TRANSVAR48=0
187#TRANSVAR49=diag[k] * point[k]
203#TRANSVAR50=0
204#TRANSVAR51=permutation[j]
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
3#TRANSVAR0=new TDistributionImpl(nObs - 2)
4#TRANSVAR1=correlationMatrix.getColumnDimension()
5#TRANSVAR2=new double[nVars][nVars]
6#TRANSVAR3=0
7#TRANSVAR4=0
11#TRANSVAR5=correlationMatrix.getEntry(i,j)
12#TRANSVAR6=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
56#final StepHandler TRANSVAR16
63#final EventState TRANSVAR17
69#TRANSVAR18=currentEvent.reset(eventT,eventY)
76#final EventState TRANSVAR19
97#TRANSVAR20=interpolator.getInterpolatedState()
98#final EventState TRANSVAR21
105#StepHandler TRANSVAR22
2#final AbstractStepInterpolator TRANSVAR0
3#final double[] TRANSVAR1
3#final double[] TRANSVAR2
3#final double TRANSVAR3
6#TRANSVAR4=interpolator.getGlobalPreviousTime()
7#TRANSVAR5=interpolator.getGlobalCurrentTime()
11#EventState TRANSVAR6
18#TRANSVAR7=interpolator.isForward() ? +1 : -1
19#TRANSVAR8=new TreeSet<EventState>(new Comparator<EventState>(){
  /** 
 * {@inheritDoc} 
 */
  public int compare(  EventState es0,  EventState es1){
    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());
  }
}
)
22#EventState TRANSVAR9
22#EventState TRANSVAR10
28#final EventState TRANSVAR11
38#TRANSVAR12=occuringEvents.iterator()
39#TRANSVAR13=iterator.next()
43#TRANSVAR14=currentEvent.getEventTime()
49#TRANSVAR15=interpolator.getInterpolatedState().clone()
52#final EventState TRANSVAR16
58#final StepHandler TRANSVAR17
68#TRANSVAR18=false
69#final EventState TRANSVAR19
96#TRANSVAR20=interpolator.getInterpolatedState()
97#final EventState TRANSVAR21
104#StepHandler TRANSVAR22
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
2#double TRANSVAR1
2#double TRANSVAR2
2#double TRANSVAR3
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final UnivariateRealFunction TRANSVAR0
3#final double TRANSVAR1
3#final double TRANSVAR2
3#final double TRANSVAR3
10#TRANSVAR4=f.value(initial)
17#TRANSVAR5=f.value(min)
29#TRANSVAR6=f.value(max)
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18
70#TRANSVAR19=1
72#TRANSVAR20=0
73#TRANSVAR21=a[k - 1][0] * yDotK[0][j]
74#TRANSVAR22=1
85#TRANSVAR23=0
86#TRANSVAR24=b[0] * yDotK[0][j]
87#TRANSVAR25=1
100#TRANSVAR26=manager.getEventTime() - stepStart
115#TRANSVAR27=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
124#TRANSVAR28=stepStart + stepSize
131#StepHandler TRANSVAR29
154#TRANSVAR30=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
157#TRANSVAR31=stepSize * factor
158#TRANSVAR32=stepStart + scaledH
159#TRANSVAR33=forward ? (nextT >= t) : (nextT <= t)
165#TRANSVAR34=stepStart
2#final FirstOrderDifferentialEquations TRANSVAR0
3#final double TRANSVAR1
3#final double[] TRANSVAR2
4#final double TRANSVAR3
4#final double[] TRANSVAR4
10#TRANSVAR5=t > t0
13#TRANSVAR6=c.length + 1
17#TRANSVAR7=new double[stages][y0.length]
18#TRANSVAR8=new double[y0.length]
21#TRANSVAR9
23#TRANSVAR10=(RungeKuttaStepInterpolator)prototype.copy()
33#TRANSVAR11=0
34#TRANSVAR12=true
35#StepHandler TRANSVAR13
38#TRANSVAR14=addEndTimeChecker(t0,t,eventsHandlersManager)
39#TRANSVAR15=false
46#TRANSVAR16=0
47#TRANSVAR17=true
55#TRANSVAR18=new double[y0.length]
57#TRANSVAR19=0
61#TRANSVAR20=0
73#TRANSVAR21=1
75#TRANSVAR22=0
76#TRANSVAR23=a[k - 1][0] * yDotK[0][j]
77#TRANSVAR24=1
88#TRANSVAR25=0
89#TRANSVAR26=b[0] * yDotK[0][j]
90#TRANSVAR27=1
103#TRANSVAR28=manager.getEventTime() - stepStart
118#TRANSVAR29=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
127#TRANSVAR30=stepStart + stepSize
134#StepHandler TRANSVAR31
157#TRANSVAR32=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
160#TRANSVAR33=stepSize * factor
161#TRANSVAR34=stepStart + scaledH
162#TRANSVAR35=forward ? (nextT >= t) : (nextT <= t)
168#TRANSVAR36=stepStart
2#Object TRANSVAR0
2#Object TRANSVAR0
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
38#TRANSVAR9=new UnivariateRealFunction(){
  public double value(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

39#final double TRANSVAR10
43#DerivativeException TRANSVAR11
45#EventException TRANSVAR12
50#TRANSVAR13=new BrentSolver()
53#TRANSVAR14=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
88#FunctionEvaluationException TRANSVAR15
89#TRANSVAR16=e.getCause()
2#final StepInterpolator TRANSVAR0
8#TRANSVAR1=interpolator.getCurrentTime()
9#TRANSVAR2=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10#TRANSVAR3=(t1 - t0) / n
12#TRANSVAR4=t0
13#TRANSVAR5=g0
14#TRANSVAR6=t0 + (interpolator.isForward() ? convergence : -convergence)
15#TRANSVAR7=0
20#TRANSVAR8=handler.g(tb,interpolator.getInterpolatedState())
34#TRANSVAR9=(forward ? 0.25 : -0.25) * convergence
35#TRANSVAR10=0
49#TRANSVAR11=new UnivariateRealFunction(){
  public double value(  final double t) throws FunctionEvaluationException {
    try {
      interpolator.setInterpolatedTime(t);
      return handler.g(t,interpolator.getInterpolatedState());
    }
 catch (    DerivativeException e) {
      throw new FunctionEvaluationException(e,t);
    }
catch (    EventException e) {
      throw new FunctionEvaluationException(e,t);
    }
  }
}

50#final double TRANSVAR12
54#DerivativeException TRANSVAR13
56#EventException TRANSVAR14
61#TRANSVAR15=new BrentSolver()
64#TRANSVAR16=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
99#FunctionEvaluationException TRANSVAR17
100#TRANSVAR18=e.getCause()
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int[] TRANSVAR0
2#int[] TRANSVAR1
3#TRANSVAR2=0
4#TRANSVAR3=0
5#TRANSVAR4=p1[i] - p2[i]
2#int TRANSVAR0
8#TRANSVAR1=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize)
10#TRANSVAR2=0
2#int TRANSVAR0
8#TRANSVAR1=new Object[sampleSize]
10#TRANSVAR2=0
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * n - 1
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final int TRANSVAR1
5#TRANSVAR2=4 * (n - 1)
6#TRANSVAR3=0
7#TRANSVAR4=0
8#TRANSVAR5=work[i + k]
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final int TRANSVAR0
2#final SimplexTableau TRANSVAR1
3#TRANSVAR2=Double.MAX_VALUE
4#TRANSVAR3=null
5#TRANSVAR4=tableau.getNumObjectiveFunctions()
6#TRANSVAR5=tableau.getEntry(i,tableau.getWidth() - 1)
7#TRANSVAR6=tableau.getEntry(i,col)
9#TRANSVAR7=rhs / entry
2#final Comparator<RealPointValuePair> TRANSVAR0
10#TRANSVAR1=simplex
11#TRANSVAR2=original[0]
14#TRANSVAR3=evaluateNewSimplex(original,1.0,comparator)
18#TRANSVAR4=simplex
19#TRANSVAR5=evaluateNewSimplex(original,khi,comparator)
30#TRANSVAR6=evaluateNewSimplex(original,gamma,comparator)
2#final Comparator<RealPointValuePair> TRANSVAR0
5#TRANSVAR1=getConvergenceChecker()
11#TRANSVAR2=simplex
12#TRANSVAR3=original[0]
15#TRANSVAR4=evaluateNewSimplex(original,1.0,comparator)
19#TRANSVAR5=simplex
20#TRANSVAR6=evaluateNewSimplex(original,khi,comparator)
31#TRANSVAR7=evaluateNewSimplex(original,gamma,comparator)
38#TRANSVAR8=getIterations()
39#TRANSVAR9=true
40#TRANSVAR10=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#UnivariateRealFunction TRANSVAR0
3#double TRANSVAR1
3#double TRANSVAR2
3#double TRANSVAR3
4#int TRANSVAR4
19#TRANSVAR5=initial
20#TRANSVAR6=initial
21#TRANSVAR7
22#TRANSVAR8
23#TRANSVAR9=0
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
27#TRANSVAR6=i + 1
28#TRANSVAR7=lTData[j]
29#TRANSVAR8=lI[j]
30#TRANSVAR9=lJ[i]
31#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
41#TRANSVAR11=0
43#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final RealMatrix TRANSVAR0
3#final double TRANSVAR1
4#final double TRANSVAR2
13#TRANSVAR3=matrix.getRowDimension()
19#TRANSVAR4=0
21#TRANSVAR5=lTData[i]
24#TRANSVAR6=i + 1
25#TRANSVAR7=lTData[j]
26#TRANSVAR8=lI[j]
27#TRANSVAR9=lJ[i]
28#TRANSVAR10=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
38#TRANSVAR11=0
40#TRANSVAR12=lTData[i]
48#TRANSVAR13=1.0 / ltI[i]
50#TRANSVAR14=order - 1
52#TRANSVAR15=lTData[q]
53#TRANSVAR16=q
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
2#final int TRANSVAR0
3#TRANSVAR1=null
4#TRANSVAR2=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=0
15#TRANSVAR4=getNumObjectiveFunctions()
3#TRANSVAR0=new double[getOriginalNumDecisionVariables()]
4#TRANSVAR1=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6#TRANSVAR2=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7#TRANSVAR3=new HashSet<Integer>()
8#TRANSVAR4=0
2#Object TRANSVAR0
2#Object TRANSVAR0
3#TRANSVAR0=new Line(zero,zero.subtract(direction))
3#TRANSVAR0=new Line(this)
2#Object TRANSVAR0
14#TRANSVAR1=v
19#TRANSVAR2=(Long)freqTable.get(obj)
25#ClassCastException TRANSVAR3
2#Object TRANSVAR0
2#Fraction TRANSVAR0
3#TRANSVAR1=doubleValue()
4#TRANSVAR2=object.doubleValue()
2#Fraction TRANSVAR0
3#TRANSVAR1=((long)numerator) * object.denominator
4#TRANSVAR2=((long)denominator) * object.numerator
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#int TRANSVAR0
2#int TRANSVAR1
18#TRANSVAR2=0
30#TRANSVAR3=((u & 1) == 1) ? v : -(u / 2)
2#double TRANSVAR0
3#TRANSVAR1
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#double TRANSVAR0
3#TRANSVAR1=1.0
4#TRANSVAR2=getDenominatorDegreesOfFreedom()
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#Object TRANSVAR0
3#TRANSVAR1
11#TRANSVAR2=(Complex)other
17#ClassCastException TRANSVAR3
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#double TRANSVAR0
2#double TRANSVAR1
8#TRANSVAR2=Double.NaN
10#TRANSVAR3=f.value(min)
11#TRANSVAR4=f.value(max)
14#TRANSVAR5=yMin * yMax
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
8#TRANSVAR2=0
9#TRANSVAR3=matchers.get(position)
2#Invocation TRANSVAR0
4#TRANSVAR1=invocation.getRawArguments().length - 1
5#TRANSVAR2=0
6#TRANSVAR3=matchers.get(position)
11#TRANSVAR4=indexOfVararg
12#TRANSVAR5=matchers.get(position)
19#TRANSVAR6=0
20#TRANSVAR7=matchers.get(position)
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Field TRANSVAR0
3#TRANSVAR1=field.getGenericType()
5#TRANSVAR2=((ParameterizedType)generic).getActualTypeArguments()[0]
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
31#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
34#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
40#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Invocation TRANSVAR0
5#TRANSVAR1=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10#TRANSVAR2=mockingProgress.pullVerificationMode()
12#TRANSVAR3=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22#TRANSVAR4=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
33#TRANSVAR5=new OngoingStubbingImpl<T>(invocationContainerImpl)
36#TRANSVAR6=invocationContainerImpl.findAnswerFor(invocation)
42#TRANSVAR7=mockSettings.getDefaultAnswer().answer(invocation)
2#Class<?> TRANSVAR0
2#Class<?> TRANSVAR0
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=null
13#TRANSVAR4=(MockMethodInterceptor.MockAccess)mockInstance
17#ClassCastException TRANSVAR5
28#org.mockito.internal.creation.instance.InstantiationException TRANSVAR6
2#MockCreationSettings<T> TRANSVAR0
2#MockHandler TRANSVAR1
6#TRANSVAR2=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10#TRANSVAR3=new InstantiatorProvider().getInstantiator(settings)
11#TRANSVAR4=null
14#TRANSVAR5=(MockMethodInterceptor.MockAccess)mockInstance
18#ClassCastException TRANSVAR6
29#org.mockito.internal.creation.instance.InstantiationException TRANSVAR7
2#Object TRANSVAR0
2#Object TRANSVAR1
2#Object TRANSVAR0
2#Object TRANSVAR1
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#InvocationOnMock TRANSVAR0
4#TRANSVAR1=invocation.getMock()
5#TRANSVAR2=mockUtil.getMockName(mock)
18#TRANSVAR3=invocation.getMethod().getReturnType()
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=new MockHandler<T>(oldMockHandler)
5#TRANSVAR3=new MethodInterceptorFilter(newMockHandler,(MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS))
2#T TRANSVAR0
3#TRANSVAR1=getMockHandler(mock)
4#TRANSVAR2=newMethodInterceptorFilter(oldMockHandler.getMockSettings())
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
2#Class<?> TRANSVAR0
2#Set<Object> TRANSVAR1
2#Object TRANSVAR2
3#Field TRANSVAR3
4#TRANSVAR4=mockCandidateFilter.filterCandidate(mocks,field,fieldInstance).thenInject()
2#Description TRANSVAR0
2#Description TRANSVAR0
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
2#Invocation TRANSVAR0
5#TRANSVAR1=invocation.getMethod()
6#TRANSVAR2=candidate.getMethod()
10#TRANSVAR3=m1.getParameterTypes()
11#TRANSVAR4=m2.getParameterTypes()
13#TRANSVAR5=0
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Invocation TRANSVAR0
3#TRANSVAR1=0
4#Matcher TRANSVAR2
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#Matcher TRANSVAR0
2#Object TRANSVAR1
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#org.mockito.exceptions.verification.junit.ArgumentsAreDifferent TRANSVAR3
2#VerificationData TRANSVAR0
3#TRANSVAR1=null
15#MockitoAssertionError TRANSVAR2
18#AssertionError TRANSVAR3
3#Type TRANSVAR0
3#Type TRANSVAR0
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#Type TRANSVAR0
6#TRANSVAR1=(ParameterizedType)classType
7#TRANSVAR2=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8#TRANSVAR3=parameterizedType.getActualTypeArguments()
9#TRANSVAR4=0
10#TRANSVAR5=typeParameters[i]
11#TRANSVAR6=actualTypeArguments[i]
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=0L
11#TRANSVAR5=0
11#TRANSVAR6=partial.size()
2#ReadablePartial TRANSVAR0
2#int TRANSVAR1
2#int[] TRANSVAR2
2#int TRANSVAR3
10#TRANSVAR4=partial.getValue(0) - 1
11#TRANSVAR5=((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1
15#TRANSVAR6=0L
16#TRANSVAR7=0
16#TRANSVAR8=partial.size()
2#long TRANSVAR0
2#int TRANSVAR1
11#TRANSVAR2=val1 * val2
2#long TRANSVAR0
2#int TRANSVAR1
14#TRANSVAR2=val1 * val2
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,iDefaultYear)
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
13#TRANSVAR7=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,chrono.year().get(instantLocal))
15#TRANSVAR8=parser.parseInto(bucket,text,position)
18#TRANSVAR9=bucket.getOffsetInteger()
19#TRANSVAR10=DateTimeZone.forOffsetMillis(parsedOffset)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR)
7#TRANSVAR3=convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR)
13#TRANSVAR4=convertUTCToLocal(instant)
2#long TRANSVAR0
2#boolean TRANSVAR1
6#TRANSVAR2=instant - 3 * DateTimeConstants.MILLIS_PER_HOUR
7#TRANSVAR3=instant + 3 * DateTimeConstants.MILLIS_PER_HOUR
8#TRANSVAR4=getOffset(instantBefore)
9#TRANSVAR5=getOffset(instantAfter)
15#TRANSVAR6=offsetBefore - offsetAfter
16#TRANSVAR7=nextTransition(instantBefore)
17#TRANSVAR8=transition - diff
18#TRANSVAR9=transition + diff
24#TRANSVAR10=instant - overlapStart
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
2#int TRANSVAR0
2#int TRANSVAR1
2#int TRANSVAR2
3#int TRANSVAR3
3#int TRANSVAR4
4#int TRANSVAR5
4#int TRANSVAR6
7#TRANSVAR7
15#TRANSVAR8
20#IllegalFieldValueException TRANSVAR9
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#String TRANSVAR4
2#DateTimeParserBucket TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=text.substring(position)
4#TRANSVAR4=null
5#String TRANSVAR5
2#long TRANSVAR0
2#long TRANSVAR0
6#TRANSVAR1=ISOChronology.getInstanceUTC().get(this,duration)
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#String TRANSVAR0
3#TRANSVAR1=cZoneIdConversion
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
26#IllegalFieldValueException TRANSVAR9
36#TRANSVAR10=iZone.getOffsetFromLocal(millis)
39#TRANSVAR11="Illegal instant due to time zone offset transition (" + iZone + ')'
2#boolean TRANSVAR0
2#String TRANSVAR1
3#TRANSVAR2=iSavedFields
4#TRANSVAR3=iSavedFieldsCount
12#TRANSVAR4=DurationFieldType.months().getField(iChrono)
13#TRANSVAR5=DurationFieldType.days().getField(iChrono)
14#TRANSVAR6=savedFields[0].iField.getDurationField()
21#TRANSVAR7=iMillis
23#TRANSVAR8=0
27#TRANSVAR9=0
31#IllegalFieldValueException TRANSVAR10
41#TRANSVAR11=iZone.getOffsetFromLocal(millis)
44#TRANSVAR12="Illegal instant due to time zone offset transition (" + iZone + ')'
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
2#long TRANSVAR0
4#TRANSVAR1=getOffset(instantLocal)
6#TRANSVAR2=instantLocal - offsetLocal
7#TRANSVAR3=getOffset(instantAdjusted)
16#TRANSVAR4=nextTransition(instantAdjusted)
17#TRANSVAR5=nextTransition(instantLocal - offsetAdjusted)
23#TRANSVAR6=previousTransition(instantAdjusted)
25#TRANSVAR7=getOffset(prev)
26#TRANSVAR8=offsetPrev - offsetLocal
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
9#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
13#TRANSVAR6=createComposite(elementPairs)
2#List<Object> TRANSVAR0
2#boolean TRANSVAR1
2#boolean TRANSVAR2
6#TRANSVAR3=elementPairs.size()
8#TRANSVAR4=(Separator)elementPairs.get(0)
10#TRANSVAR5=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
15#TRANSVAR6=createComposite(elementPairs)
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(iChronology,newTypes,newValues)
47#TRANSVAR13=getValues()
2#DateTimeFieldType TRANSVAR0
2#int TRANSVAR1
6#TRANSVAR2=indexOf(fieldType)
8#TRANSVAR3=new DateTimeFieldType[iTypes.length + 1]
9#TRANSVAR4=new int[newTypes.length]
12#TRANSVAR5=0
13#TRANSVAR6=fieldType.getDurationType().getField(iChronology)
16#TRANSVAR7=iTypes[i]
17#TRANSVAR8=loopType.getDurationType().getField(iChronology)
19#TRANSVAR9=unitField.compareTo(loopUnitField)
23#TRANSVAR10=fieldType.getRangeDurationType().getField(iChronology)
24#TRANSVAR11=loopType.getRangeDurationType().getField(iChronology)
40#TRANSVAR12=new Partial(newTypes,newValues,iChronology)
47#TRANSVAR13=getValues()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
2#PeriodType TRANSVAR0
4#TRANSVAR1=getMillis()
10#TRANSVAR2=new Period(millis,type,ISOChronology.getInstanceUTC())
11#TRANSVAR3=getYears()
12#TRANSVAR4=getMonths()
14#TRANSVAR5=years * 12L + months
16#TRANSVAR6=FieldUtils.safeToInt(totalMonths / 12)
21#TRANSVAR7=FieldUtils.safeToInt(totalMonths)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=instantMillis + chrono.getZone().getOffset(instantMillis)
12#TRANSVAR7=chrono.year().get(instantLocal)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#ReadWritableInstant TRANSVAR0
2#String TRANSVAR1
2#int TRANSVAR2
3#TRANSVAR3=requireParser()
8#TRANSVAR4=instant.getMillis()
9#TRANSVAR5=instant.getChronology()
10#TRANSVAR6=DateTimeUtils.getChronology(chrono).year().get(instantMillis)
11#TRANSVAR7=instantMillis + chrono.getZone().getOffset(instantMillis)
14#TRANSVAR8=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16#TRANSVAR9=parser.parseInto(bucket,text,position)
19#TRANSVAR10=bucket.getOffsetInteger()
20#TRANSVAR11=DateTimeZone.forOffsetMillis(parsedOffset)
2#int TRANSVAR0
2#int TRANSVAR1
12#TRANSVAR2=0
14#TRANSVAR3=hoursOffset * 60
21#ArithmeticException TRANSVAR4
2#int TRANSVAR0
2#int TRANSVAR1
15#TRANSVAR2=0
17#TRANSVAR3=hoursOffset * 60
24#ArithmeticException TRANSVAR4

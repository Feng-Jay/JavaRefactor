Chart-1_buggy
3$result$LegendItemCollection result=new LegendItemCollection()
7$index$int index=this.plot.getIndexOf(this)
8$dataset$CategoryDataset dataset=this.plot.getDataset(index)
12$seriesCount$int seriesCount=dataset.getRowCount()
14$i$int i=0
16$item$LegendItem item=getLegendItem(index,i)
24$i$int i=seriesCount - 1
26$item$LegendItem item=getLegendItem(index,i)
Chart-1_fix
3$result$LegendItemCollection result=new LegendItemCollection()
7$index$int index=this.plot.getIndexOf(this)
8$dataset$CategoryDataset dataset=this.plot.getDataset(index)
12$seriesCount$int seriesCount=dataset.getRowCount()
14$i$int i=0
16$item$LegendItem item=getLegendItem(index,i)
24$i$int i=seriesCount - 1
26$item$LegendItem item=getLegendItem(index,i)
Chart-10_buggy
2$toolTipText$String toolTipText
Chart-10_fix
2$toolTipText$String toolTipText
Chart-11_buggy
2$p1$GeneralPath p1
2$p2$GeneralPath p2
12$iterator1$PathIterator iterator1=p1.getPathIterator(null)
13$iterator2$PathIterator iterator2=p1.getPathIterator(null)
14$d1$double[] d1=new double[6]
15$d2$double[] d2=new double[6]
16$done$boolean done=iterator1.isDone() && iterator2.isDone()
21$seg1$int seg1=iterator1.currentSegment(d1)
22$seg2$int seg2=iterator2.currentSegment(d2)
Chart-11_fix
2$p1$GeneralPath p1
2$p2$GeneralPath p2
12$iterator1$PathIterator iterator1=p1.getPathIterator(null)
13$iterator2$PathIterator iterator2=p2.getPathIterator(null)
14$d1$double[] d1=new double[6]
15$d2$double[] d2=new double[6]
16$done$boolean done=iterator1.isDone() && iterator2.isDone()
21$seg1$int seg1=iterator1.currentSegment(d1)
22$seg2$int seg2=iterator2.currentSegment(d2)
Chart-12_buggy
2$dataset$CategoryDataset dataset
5$piePlot$PiePlot piePlot=new PiePlot(null)
10$seriesTitle$TextTitle seriesTitle=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
Chart-12_fix
2$dataset$CategoryDataset dataset
5$piePlot$PiePlot piePlot=new PiePlot(null)
10$seriesTitle$TextTitle seriesTitle=new TextTitle("Series Title",new Font("SansSerif",Font.BOLD,12))
Chart-13_buggy
2$container$BlockContainer container
2$g2$Graphics2D g2
3$constraint$RectangleConstraint constraint
4$w$double[] w=new double[5]
5$h$double[] h=new double[5]
8$c1$RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12$size$Size2D size=this.topBlock.arrange(g2,c1)
17$c2$RectangleConstraint c2=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20$size$Size2D size=this.bottomBlock.arrange(g2,c2)
25$c3$RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29$size$Size2D size=this.leftBlock.arrange(g2,c3)
34$c4$RectangleConstraint c4=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth() - w[2]),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38$size$Size2D size=this.rightBlock.arrange(g2,c4)
43$c5$RectangleConstraint c5=new RectangleConstraint(w[4],h[4])
Chart-13_fix
2$container$BlockContainer container
2$g2$Graphics2D g2
3$constraint$RectangleConstraint constraint
4$w$double[] w=new double[5]
5$h$double[] h=new double[5]
8$c1$RectangleConstraint c1=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight()),LengthConstraintType.RANGE)
12$size$Size2D size=this.topBlock.arrange(g2,c1)
17$c2$RectangleConstraint c2=new RectangleConstraint(w[0],null,LengthConstraintType.FIXED,0.0,new Range(0.0,constraint.getHeight() - h[0]),LengthConstraintType.RANGE)
20$size$Size2D size=this.bottomBlock.arrange(g2,c2)
25$c3$RectangleConstraint c3=new RectangleConstraint(0.0,new Range(0.0,constraint.getWidth()),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
29$size$Size2D size=this.leftBlock.arrange(g2,c3)
34$c4$RectangleConstraint c4=new RectangleConstraint(0.0,new Range(0.0,Math.max(constraint.getWidth() - w[2],0.0)),LengthConstraintType.RANGE,h[2],null,LengthConstraintType.FIXED)
38$size$Size2D size=this.rightBlock.arrange(g2,c4)
43$c5$RectangleConstraint c5=new RectangleConstraint(w[4],h[4])
Chart-17_buggy
3$clone$Object clone=createCopy(0,getItemCount() - 1)
Chart-17_fix
3$clone$TimeSeries clone=(TimeSeries)super.clone()
Chart-20_buggy
2$value$double value
2$paint$Paint paint
2$stroke$Stroke stroke
3$outlinePaint$Paint outlinePaint
3$outlineStroke$Stroke outlineStroke
3$alpha$float alpha
Chart-20_fix
2$value$double value
2$paint$Paint paint
2$stroke$Stroke stroke
3$outlinePaint$Paint outlinePaint
3$outlineStroke$Stroke outlineStroke
3$alpha$float alpha
Chart-24_buggy
2$value$double value
3$v$double v=Math.max(value,this.lowerBound)
5$g$int g=(int)((value - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
Chart-24_fix
2$value$double value
3$v$double v=Math.max(value,this.lowerBound)
5$g$int g=(int)((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0)
Chart-26_buggy
2$label$String label
2$g2$Graphics2D g2
3$plotArea$Rectangle2D plotArea
3$dataArea$Rectangle2D dataArea
3$edge$RectangleEdge edge
4$state$AxisState state
4$plotState$PlotRenderingInfo plotState
15$font$Font font=getLabelFont()
16$insets$RectangleInsets insets=getLabelInsets()
19$fm$FontMetrics fm=g2.getFontMetrics()
20$labelBounds$Rectangle2D labelBounds=TextUtilities.getTextBounds(label,g2,fm)
21$hotspot$Shape hotspot=null
24$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
29$w$float w=(float)labelBounds.getWidth()
30$h$float h=(float)labelBounds.getHeight()
31$labelx$float labelx=(float)dataArea.getCenterX()
32$labely$float labely=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
47$w$float w=(float)labelBounds.getWidth()
48$h$float h=(float)labelBounds.getHeight()
49$labelx$float labelx=(float)dataArea.getCenterX()
50$labely$float labely=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
65$w$float w=(float)labelBounds.getWidth()
66$h$float h=(float)labelBounds.getHeight()
67$labelx$float labelx=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69$labely$float labely=(float)dataArea.getCenterY()
80$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
85$w$float w=(float)labelBounds.getWidth()
86$h$float h=(float)labelBounds.getHeight()
87$labelx$float labelx=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89$labely$float labely=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101$owner$ChartRenderingInfo owner=plotState.getOwner()
102$entities$EntityCollection entities=owner.getEntityCollection()
Chart-26_fix
2$label$String label
2$g2$Graphics2D g2
3$plotArea$Rectangle2D plotArea
3$dataArea$Rectangle2D dataArea
3$edge$RectangleEdge edge
4$state$AxisState state
4$plotState$PlotRenderingInfo plotState
15$font$Font font=getLabelFont()
16$insets$RectangleInsets insets=getLabelInsets()
19$fm$FontMetrics fm=g2.getFontMetrics()
20$labelBounds$Rectangle2D labelBounds=TextUtilities.getTextBounds(label,g2,fm)
21$hotspot$Shape hotspot=null
24$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
27$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
29$w$float w=(float)labelBounds.getWidth()
30$h$float h=(float)labelBounds.getHeight()
31$labelx$float labelx=(float)dataArea.getCenterX()
32$labely$float labely=(float)(state.getCursor() - insets.getBottom() - h / 2.0)
42$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY())
45$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
47$w$float w=(float)labelBounds.getWidth()
48$h$float h=(float)labelBounds.getHeight()
49$labelx$float labelx=(float)dataArea.getCenterX()
50$labely$float labely=(float)(state.getCursor() + insets.getTop() + h / 2.0)
60$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
63$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
65$w$float w=(float)labelBounds.getWidth()
66$h$float h=(float)labelBounds.getHeight()
67$labelx$float labelx=(float)(state.getCursor() - insets.getRight() - w / 2.0)
69$labely$float labely=(float)dataArea.getCenterY()
80$t$AffineTransform t=AffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY())
83$rotatedLabelBounds$Shape rotatedLabelBounds=t.createTransformedShape(labelBounds)
85$w$float w=(float)labelBounds.getWidth()
86$h$float h=(float)labelBounds.getHeight()
87$labelx$float labelx=(float)(state.getCursor() + insets.getLeft() + w / 2.0)
89$labely$float labely=(float)(dataArea.getY() + dataArea.getHeight() / 2.0)
101$owner$ChartRenderingInfo owner=plotState.getOwner()
103$entities$EntityCollection entities=owner.getEntityCollection()
Chart-3_buggy
2$start$int start
2$end$int end
10$copy$TimeSeries copy=(TimeSeries)super.clone()
13$index$int index=start
14$item$TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index)
16$clone$TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone()
20$e$SeriesException e
Chart-3_fix
2$start$int start
2$end$int end
10$copy$TimeSeries copy=(TimeSeries)super.clone()
15$index$int index=start
16$item$TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index)
18$clone$TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone()
22$e$SeriesException e
Chart-4_buggy
2$axis$ValueAxis axis
4$result$Range result=null
5$mappedDatasets$List mappedDatasets=new ArrayList()
6$includedAnnotations$List includedAnnotations=new ArrayList()
7$isDomainAxis$boolean isDomainAxis=true
10$domainIndex$int domainIndex=getDomainAxisIndex(axis)
17$iterator$Iterator iterator=this.annotations.iterator()
19$annotation$XYAnnotation annotation=(XYAnnotation)iterator.next()
28$rangeIndex$int rangeIndex=getRangeAxisIndex(axis)
34$iterator$Iterator iterator=this.annotations.iterator()
36$annotation$XYAnnotation annotation=(XYAnnotation)iterator.next()
46$iterator$Iterator iterator=mappedDatasets.iterator()
48$d$XYDataset d=(XYDataset)iterator.next()
50$r$XYItemRenderer r=getRendererForDataset(d)
70$c$Collection c=r.getAnnotations()
71$i$Iterator i=c.iterator()
73$a$XYAnnotation a=(XYAnnotation)i.next()
81$it$Iterator it=includedAnnotations.iterator()
83$xyabi$XYAnnotationBoundsInfo xyabi=(XYAnnotationBoundsInfo)it.next()
Chart-4_fix
2$axis$ValueAxis axis
4$result$Range result=null
5$mappedDatasets$List mappedDatasets=new ArrayList()
6$includedAnnotations$List includedAnnotations=new ArrayList()
7$isDomainAxis$boolean isDomainAxis=true
10$domainIndex$int domainIndex=getDomainAxisIndex(axis)
17$iterator$Iterator iterator=this.annotations.iterator()
19$annotation$XYAnnotation annotation=(XYAnnotation)iterator.next()
28$rangeIndex$int rangeIndex=getRangeAxisIndex(axis)
34$iterator$Iterator iterator=this.annotations.iterator()
36$annotation$XYAnnotation annotation=(XYAnnotation)iterator.next()
46$iterator$Iterator iterator=mappedDatasets.iterator()
48$d$XYDataset d=(XYDataset)iterator.next()
50$r$XYItemRenderer r=getRendererForDataset(d)
71$c$Collection c=r.getAnnotations()
72$i$Iterator i=c.iterator()
74$a$XYAnnotation a=(XYAnnotation)i.next()
83$it$Iterator it=includedAnnotations.iterator()
85$xyabi$XYAnnotationBoundsInfo xyabi=(XYAnnotationBoundsInfo)it.next()
Chart-5_buggy
2$x$Number x
2$y$Number y
8$overwritten$XYDataItem overwritten=null
9$index$int index=indexOf(x)
11$existing$XYDataItem existing=(XYDataItem)this.data.get(index)
15$e$CloneNotSupportedException e
Chart-5_fix
2$x$Number x
2$y$Number y
12$overwritten$XYDataItem overwritten=null
13$index$int index=indexOf(x)
15$existing$XYDataItem existing=(XYDataItem)this.data.get(index)
19$e$CloneNotSupportedException e
Chart-6_buggy
2$obj$Object obj
Chart-6_fix
2$obj$Object obj
10$that$ShapeList that=(ShapeList)obj
11$listSize$int listSize=size()
12$i$int i=0
Chart-7_buggy
2$period$TimePeriod period
2$index$int index
4$start$long start=period.getStart().getTime()
5$end$long end=period.getEnd().getTime()
6$middle$long middle=start + ((end - start) / 2)
9$minStart$long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20$maxStart$long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31$s$long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33$e$long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35$minMiddle$long minMiddle=s + (e - s) / 2
45$s$long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
47$e$long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
49$maxMiddle$long maxMiddle=s + (e - s) / 2
59$minEnd$long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70$maxEnd$long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
Chart-7_fix
2$period$TimePeriod period
2$index$int index
4$start$long start=period.getStart().getTime()
5$end$long end=period.getEnd().getTime()
6$middle$long middle=start + ((end - start) / 2)
9$minStart$long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime()
20$maxStart$long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime()
31$s$long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime()
33$e$long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime()
35$minMiddle$long minMiddle=s + (e - s) / 2
45$s$long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime()
47$e$long e=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime()
49$maxMiddle$long maxMiddle=s + (e - s) / 2
59$minEnd$long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime()
70$maxEnd$long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime()
Chart-8_buggy
2$time$Date time
2$zone$TimeZone zone
Chart-8_fix
2$time$Date time
2$zone$TimeZone zone
Chart-9_buggy
2$start$RegularTimePeriod start
2$end$RegularTimePeriod end
15$emptyRange$boolean emptyRange=false
16$startIndex$int startIndex=getIndex(start)
23$endIndex$int endIndex=getIndex(end)
32$copy$TimeSeries copy=(TimeSeries)super.clone()
Chart-9_fix
2$start$RegularTimePeriod start
2$end$RegularTimePeriod end
15$emptyRange$boolean emptyRange=false
16$startIndex$int startIndex=getIndex(start)
23$endIndex$int endIndex=getIndex(end)
32$copy$TimeSeries copy=(TimeSeries)super.clone()
Cli-11_buggy
2$buff$final StringBuffer buff
3$option$final Option option
4$required$final boolean required
Cli-11_fix
2$buff$final StringBuffer buff
3$option$final Option option
4$required$final boolean required
Cli-12_buggy
2$options$Options options
2$arguments$String[] arguments
2$stopAtNonOption$boolean stopAtNonOption
4$tokens$List tokens=new ArrayList()
6$eatTheRest$boolean eatTheRest=false
8$i$int i=0
10$arg$String arg=arguments[i]
23$opt$String opt=Util.stripLeadingHyphens(arg)
Cli-12_fix
2$options$Options options
2$arguments$String[] arguments
2$stopAtNonOption$boolean stopAtNonOption
4$tokens$List tokens=new ArrayList()
6$eatTheRest$boolean eatTheRest=false
8$i$int i=0
10$arg$String arg=arguments[i]
23$opt$String opt=Util.stripLeadingHyphens(arg)
Cli-14_buggy
2$commandLine$final WriteableCommandLine commandLine
5$present$int present=0
8$unexpected$Option unexpected=null
10$i$Iterator i=options.iterator()
11$option$Option option=(Option)i.next()
14$validate$boolean validate=option.isRequired() || option instanceof Group
43$i$Iterator i=anonymous.iterator()
44$option$Option option=(Option)i.next()
Cli-14_fix
2$commandLine$final WriteableCommandLine commandLine
5$present$int present=0
8$unexpected$Option unexpected=null
10$i$Iterator i=options.iterator()
11$option$Option option=(Option)i.next()
14$validate$boolean validate=option.isRequired() || option instanceof Group
43$i$Iterator i=anonymous.iterator()
44$option$Option option=(Option)i.next()
Cli-15_buggy
2$option$final Option option
3$defaultValues$List defaultValues
5$valueList$List valueList=(List)values.get(option)
Cli-15_fix
2$option$final Option option
3$defaultValues$List defaultValues
5$valueList$List valueList=(List)values.get(option)
22$i$int i=valueList.size()
Cli-17_buggy
2$token$String token
2$stopAtNonOption$boolean stopAtNonOption
4$i$int i=1
6$ch$String ch=String.valueOf(token.charAt(i))
Cli-17_fix
2$token$String token
2$stopAtNonOption$boolean stopAtNonOption
4$i$int i=1
6$ch$String ch=String.valueOf(token.charAt(i))
Cli-19_buggy
2$token$String token
2$stopAtNonOption$boolean stopAtNonOption
Cli-19_fix
2$token$String token
2$stopAtNonOption$boolean stopAtNonOption
Cli-20_buggy
2$options$Options options
2$arguments$String[] arguments
2$stopAtNonOption$boolean stopAtNonOption
8$iter$Iterator iter=Arrays.asList(arguments).iterator()
14$token$String token=(String)iter.next()
Cli-20_fix
2$options$Options options
2$arguments$String[] arguments
2$stopAtNonOption$boolean stopAtNonOption
8$iter$Iterator iter=Arrays.asList(arguments).iterator()
14$token$String token=(String)iter.next()
19$pos$int pos=token.indexOf('=')
20$opt$String opt=pos == -1 ? token : token.substring(0,pos)
Cli-23_buggy
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
17$padding$String padding=createPadding(nextLineTabStop)
21$lastPos$int lastPos=pos
Cli-23_fix
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
17$padding$String padding=createPadding(nextLineTabStop)
Cli-24_buggy
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
24$padding$String padding=createPadding(nextLineTabStop)
Cli-24_fix
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
23$padding$String padding=createPadding(nextLineTabStop)
Cli-25_buggy
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
23$padding$String padding=createPadding(nextLineTabStop)
Cli-25_fix
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
23$padding$String padding=createPadding(nextLineTabStop)
Cli-26_buggy
2$opt$String opt
5$option$Option option=new Option(opt,description)
Cli-26_fix
2$opt$String opt
4$option$Option option=null
Cli-27_buggy
2$option$Option option
Cli-27_fix
2$option$Option option
Cli-28_buggy
2$properties$Properties properties
9$e$Enumeration e=properties.propertyNames()
11$option$String option=e.nextElement().toString()
15$opt$Option opt=getOptions().getOption(option)
18$value$String value=properties.getProperty(option)
28$exp$RuntimeException exp
Cli-28_fix
2$properties$Properties properties
9$e$Enumeration e=properties.propertyNames()
11$option$String option=e.nextElement().toString()
15$opt$Option opt=getOptions().getOption(option)
18$value$String value=properties.getProperty(option)
28$exp$RuntimeException exp
Cli-29_buggy
2$str$String str
8$length$int length=str.length()
Cli-29_fix
2$str$String str
4$length$int length=str.length()
Cli-32_buggy
2$text$String text
2$width$int width
2$startPos$int startPos
4$pos$int pos
21$c$char c
Cli-32_fix
2$text$String text
2$width$int width
2$startPos$int startPos
4$pos$int pos
21$c$char c
Cli-35_buggy
2$opt$String opt
6$matchingOpts$List<String> matchingOpts=new ArrayList<String>()
10$longOpt$String longOpt
Cli-35_fix
2$opt$String opt
6$matchingOpts$List<String> matchingOpts=new ArrayList<String>()
13$longOpt$String longOpt
Cli-37_buggy
2$token$String token
Cli-37_fix
2$token$String token
11$pos$int pos=token.indexOf("=")
12$optName$String optName=pos == -1 ? token.substring(1) : token.substring(1,pos)
Cli-38_buggy
2$token$String token
11$pos$int pos=token.indexOf("=")
12$optName$String optName=pos == -1 ? token.substring(1) : token.substring(1,pos)
Cli-38_fix
2$token$String token
11$pos$int pos=token.indexOf("=")
12$optName$String optName=pos == -1 ? token.substring(1) : token.substring(1,pos)
Cli-4_buggy
9$iter$Iterator iter=requiredOptions.iterator()
10$buff$StringBuffer buff=new StringBuffer()
Cli-4_fix
9$iter$Iterator iter=requiredOptions.iterator()
10$buff$StringBuffer buff=new StringBuffer("Missing required option")
Cli-40_buggy
2$str$final String str
2$clazz$final Class<T> clazz
Cli-40_fix
2$str$final String str
2$clazz$final Class<T> clazz
Cli-5_buggy
2$str$String str
Cli-5_fix
2$str$String str
Cli-8_buggy
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
17$padding$String padding=createPadding(nextLineTabStop)
Cli-8_fix
2$sb$StringBuffer sb
2$width$int width
3$nextLineTabStop$int nextLineTabStop
3$text$String text
5$pos$int pos=findWrapPos(text,width,0)
17$padding$String padding=createPadding(nextLineTabStop)
Cli-9_buggy
9$iter$Iterator iter=getRequiredOptions().iterator()
10$buff$StringBuffer buff=new StringBuffer("Missing required option")
Cli-9_fix
9$iter$Iterator iter=getRequiredOptions().iterator()
10$buff$StringBuffer buff=new StringBuffer("Missing required option")
Closure-1_buggy
2$fnScope$Scope fnScope
13$function$Node function=fnScope.getRootNode()
21$argList$Node argList=getFunctionArgList(function)
22$modifyCallers$boolean modifyCallers=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
26$lastArg$Node lastArg
28$var$Var var=fnScope.getVar(lastArg.getString())
Closure-1_fix
2$fnScope$Scope fnScope
16$function$Node function=fnScope.getRootNode()
24$argList$Node argList=getFunctionArgList(function)
25$modifyCallers$boolean modifyCallers=modifyCallSites && callSiteOptimizer.canModifyCallers(function)
29$lastArg$Node lastArg
31$var$Var var=fnScope.getVar(lastArg.getString())
Closure-10_buggy
2$n$Node n
2$recurse$boolean recurse
Closure-10_fix
2$n$Node n
2$recurse$boolean recurse
Closure-101_buggy
3$options$CompilerOptions options=new CompilerOptions()
5$level$CompilationLevel level=flags.compilation_level
11$wLevel$WarningLevel wLevel=flags.warning_level
13$formattingOption$FormattingOption formattingOption
Closure-101_fix
3$options$CompilerOptions options=new CompilerOptions()
5$level$CompilationLevel level=flags.compilation_level
11$wLevel$WarningLevel wLevel=flags.warning_level
13$formattingOption$FormattingOption formattingOption
Closure-102_buggy
2$externs$Node externs
2$root$Node root
5$renamer$MakeDeclaredNamesUnique renamer=new MakeDeclaredNamesUnique()
6$t$NodeTraversal t=new NodeTraversal(compiler,renamer)
Closure-102_fix
2$externs$Node externs
2$root$Node root
6$renamer$MakeDeclaredNamesUnique renamer=new MakeDeclaredNamesUnique()
7$t$NodeTraversal t=new NodeTraversal(compiler,renamer)
Closure-104_buggy
2$that$JSType that
3$builder$UnionTypeBuilder builder=new UnionTypeBuilder(registry)
4$alternate$JSType alternate
11$otherAlternate$JSType otherAlternate
19$result$JSType result=builder.build()
Closure-104_fix
2$that$JSType that
3$builder$UnionTypeBuilder builder=new UnionTypeBuilder(registry)
4$alternate$JSType alternate
11$otherAlternate$JSType otherAlternate
19$result$JSType result=builder.build()
Closure-105_buggy
2$t$NodeTraversal t
2$n$Node n
2$left$Node left
2$right$Node right
3$parent$Node parent
8$arrayNode$Node arrayNode=left.getFirstChild()
9$functionName$Node functionName=arrayNode.getNext()
16$joinString$String joinString=NodeUtil.getStringValue(right)
17$arrayFoldedChildren$List<Node> arrayFoldedChildren=Lists.newLinkedList()
18$sb$StringBuilder sb=new StringBuilder()
19$foldedSize$int foldedSize=0
20$elem$Node elem=arrayNode.getFirstChild()
49$originalSize$int originalSize=InlineCostEstimator.getCost(n)
52$emptyStringNode$Node emptyStringNode=Node.newString("")
57$foldedStringNode$Node foldedStringNode=arrayFoldedChildren.remove(0)
65$replacement$Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode)
77$kJoinOverhead$int kJoinOverhead="[].join()".length()
84$node$Node node
Closure-105_fix
2$t$NodeTraversal t
2$n$Node n
2$left$Node left
2$right$Node right
3$parent$Node parent
8$arrayNode$Node arrayNode=left.getFirstChild()
9$functionName$Node functionName=arrayNode.getNext()
16$joinString$String joinString=NodeUtil.getStringValue(right)
17$arrayFoldedChildren$List<Node> arrayFoldedChildren=Lists.newLinkedList()
18$sb$StringBuilder sb=null
19$foldedSize$int foldedSize=0
20$elem$Node elem=arrayNode.getFirstChild()
51$originalSize$int originalSize=InlineCostEstimator.getCost(n)
54$emptyStringNode$Node emptyStringNode=Node.newString("")
59$foldedStringNode$Node foldedStringNode=arrayFoldedChildren.remove(0)
67$replacement$Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode)
79$kJoinOverhead$int kJoinOverhead="[].join()".length()
86$node$Node node
Closure-107_buggy
3$options$CompilerOptions options=new CompilerOptions()
12$level$CompilationLevel level=flags.compilationLevel
27$wLevel$WarningLevel wLevel=flags.warningLevel
29$formattingOption$FormattingOption formattingOption
45$e$IOException e
Closure-107_fix
3$options$CompilerOptions options=new CompilerOptions()
12$level$CompilationLevel level=flags.compilationLevel
27$wLevel$WarningLevel wLevel=flags.warningLevel
29$formattingOption$FormattingOption formattingOption
45$e$IOException e
Closure-109_buggy
2$token$JsDocToken token
Closure-109_fix
2$token$JsDocToken token
Closure-11_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$property$Node property=n.getLastChild()
8$objNode$Node objNode=n.getFirstChild()
9$childType$JSType childType=getJSType(objNode)
Closure-11_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$property$Node property=n.getLastChild()
8$objNode$Node objNode=n.getFirstChild()
9$childType$JSType childType=getJSType(objNode)
Closure-111_buggy
2$topType$JSType topType
Closure-111_fix
2$topType$JSType topType
Closure-112_buggy
3$n$Node n
3$fnType$FunctionType fnType
4$keys$ImmutableList<TemplateType> keys=fnType.getTemplateTypeMap().getTemplateKeys()
11$inferred$Map<TemplateType,JSType> inferred=inferTemplateTypesFromParameters(fnType,n)
17$replacer$TemplateTypeReplacer replacer=new TemplateTypeReplacer(registry,inferred)
19$callTarget$Node callTarget=n.getFirstChild()
21$replacementFnType$FunctionType replacementFnType=fnType.visit(replacer).toMaybeFunctionType()
Closure-112_fix
3$n$Node n
3$fnType$FunctionType fnType
4$keys$ImmutableList<TemplateType> keys=fnType.getTemplateTypeMap().getTemplateKeys()
11$inferred$Map<TemplateType,JSType> inferred=Maps.filterKeys(inferTemplateTypesFromParameters(fnType,n),new Predicate<TemplateType>(){\n  @Override public boolean apply(  TemplateType key){\n    return keys.contains(key);\n  }\n}\n)
16$key$TemplateType key
23$replacer$TemplateTypeReplacer replacer=new TemplateTypeReplacer(registry,inferred)
25$callTarget$Node callTarget=n.getFirstChild()
27$replacementFnType$FunctionType replacementFnType=fnType.visit(replacer).toMaybeFunctionType()
Closure-113_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
3$left$Node left=n.getFirstChild()
4$arg$Node arg=left.getNext()
6$ns$String ns=arg.getString()
7$provided$ProvidedName provided=providedNames.get(ns)
12$providedModule$JSModule providedModule=provided.explicitModule
17$module$JSModule module=t.getModule()
Closure-113_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
3$left$Node left=n.getFirstChild()
4$arg$Node arg=left.getNext()
6$ns$String ns=arg.getString()
7$provided$ProvidedName provided=providedNames.get(ns)
12$providedModule$JSModule providedModule=provided.explicitModule
17$module$JSModule module=t.getModule()
Closure-114_buggy
2$t$NodeTraversal t
2$n$Node n
2$recordNode$Node recordNode
3$nameNode$Node nameNode=n.getFirstChild()
4$parent$Node parent=n.getParent()
5$ns$NameInformation ns=createNameInformation(t,nameNode)
Closure-114_fix
2$t$NodeTraversal t
2$n$Node n
2$recordNode$Node recordNode
3$nameNode$Node nameNode=n.getFirstChild()
4$parent$Node parent=n.getParent()
5$ns$NameInformation ns=createNameInformation(t,nameNode)
Closure-115_buggy
3$callNode$Node callNode
3$fnNode$Node fnNode
8$block$Node block=fnNode.getLastChild()
10$hasSideEffects$boolean hasSideEffects=false
13$stmt$Node stmt=block.getFirstChild()
19$cArg$Node cArg=callNode.getFirstChild().getNext()
38$fnParam$Node fnParam=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-115_fix
3$callNode$Node callNode
3$fnNode$Node fnNode
8$block$Node block=fnNode.getLastChild()
11$cArg$Node cArg=callNode.getFirstChild().getNext()
30$fnParam$Node fnParam=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-116_buggy
3$callNode$Node callNode
3$fnNode$Node fnNode
8$block$Node block=fnNode.getLastChild()
12$cArg$Node cArg=callNode.getFirstChild().getNext()
31$fnParam$Node fnParam=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-116_fix
3$callNode$Node callNode
3$fnNode$Node fnNode
8$block$Node block=fnNode.getLastChild()
10$hasSideEffects$boolean hasSideEffects=false
13$stmt$Node stmt=block.getFirstChild()
21$cArg$Node cArg=callNode.getFirstChild().getNext()
40$fnParam$Node fnParam=NodeUtil.getFunctionParameters(fnNode).getFirstChild()
Closure-117_buggy
2$n$Node n
2$dereference$boolean dereference
10$objectType$ObjectType objectType=getJSType(n.getFirstChild()).dereference()
12$propName$String propName=n.getLastChild().getString()
34$type$JSType type=getJSType(n)
36$dereferenced$ObjectType dereferenced=type.dereference()
46$qualifiedName$String qualifiedName=n.getQualifiedName()
Closure-117_fix
2$n$Node n
2$dereference$boolean dereference
3$type$JSType type=getJSType(n)
5$dereferenced$ObjectType dereferenced=type.dereference()
22$objectType$ObjectType objectType=getJSType(n.getFirstChild()).dereference()
24$propName$String propName=n.getLastChild().getString()
46$qualifiedName$String qualifiedName=n.getQualifiedName()
Closure-118_buggy
2$t$NodeTraversal t
2$n$Node n
3$child$Node child=n.getFirstChild()
9$name$String name=child.getString()
10$type$T type=typeSystem.getType(getScope(),n,name)
12$prop$Property prop=getProperty(name)
Closure-118_fix
2$t$NodeTraversal t
2$n$Node n
3$child$Node child=n.getFirstChild()
12$name$String name=child.getString()
13$type$T type=typeSystem.getType(getScope(),n,name)
15$prop$Property prop=getProperty(name)
Closure-119_buggy
2$module$JSModule module
2$scope$Scope scope
2$n$Node n
3$parent$Node parent=n.getParent()
5$name$String name
6$isSet$boolean isSet=false
7$type$Name.Type type=Name.Type.OTHER
8$isPropAssign$boolean isPropAssign=false
43$rvalue$Node rvalue=n.getFirstChild()
55$gramps$Node gramps=parent.getParent()
Closure-119_fix
2$module$JSModule module
2$scope$Scope scope
2$n$Node n
3$parent$Node parent=n.getParent()
5$name$String name
6$isSet$boolean isSet=false
7$type$Name.Type type=Name.Type.OTHER
8$isPropAssign$boolean isPropAssign=false
43$rvalue$Node rvalue=n.getFirstChild()
55$gramps$Node gramps=parent.getParent()
Closure-12_buggy
2$cfgNode$Node cfgNode
Closure-12_fix
2$cfgNode$Node cfgNode
3$branchEdges$List<DiGraphEdge<Node,Branch>> branchEdges=getCfg().getOutEdges(cfgNode)
4$edge$DiGraphEdge<Node,Branch> edge
Closure-120_buggy
3$ref$Reference ref=getOneAndOnlyAssignment()
9$block$BasicBlock block=ref.getBasicBlock()
Closure-120_fix
3$ref$Reference ref=getOneAndOnlyAssignment()
9$block$BasicBlock block=ref.getBasicBlock()
Closure-121_buggy
3$v$Var v
3$referenceInfo$ReferenceCollection referenceInfo
4$maybeModifiedArguments$boolean maybeModifiedArguments
5$refCount$int refCount=referenceInfo.references.size()
6$declaration$Reference declaration=referenceInfo.references.get(0)
7$init$Reference init=referenceInfo.getInitializingReference()
8$firstRefAfterInit$int firstRefAfterInit=(declaration == init) ? 2 : 3
14$value$Node value
19$srcLocation$Node srcLocation=declaration.getNode()
28$reference$Reference reference=referenceInfo.references.get(firstRefAfterInit - 1)
38$value$Node value=init.getAssignedValue()
56$refs$List<Reference> refs=referenceInfo.references
57$i$int i=1
58$nameNode$Node nameNode=refs.get(i).getNode()
60$candidate$AliasCandidate candidate=aliasCandidates.get(nameNode)
63$aliasInit$Reference aliasInit
65$value$Node value=aliasInit.getAssignedValue()
Closure-121_fix
3$v$Var v
3$referenceInfo$ReferenceCollection referenceInfo
4$maybeModifiedArguments$boolean maybeModifiedArguments
5$refCount$int refCount=referenceInfo.references.size()
6$declaration$Reference declaration=referenceInfo.references.get(0)
7$init$Reference init=referenceInfo.getInitializingReference()
8$firstRefAfterInit$int firstRefAfterInit=(declaration == init) ? 2 : 3
14$value$Node value
19$srcLocation$Node srcLocation=declaration.getNode()
28$reference$Reference reference=referenceInfo.references.get(firstRefAfterInit - 1)
38$value$Node value=init.getAssignedValue()
58$refs$List<Reference> refs=referenceInfo.references
59$i$int i=1
60$nameNode$Node nameNode=refs.get(i).getNode()
62$candidate$AliasCandidate candidate=aliasCandidates.get(nameNode)
65$aliasInit$Reference aliasInit
67$value$Node value=aliasInit.getAssignedValue()
Closure-122_buggy
2$comment$Comment comment
Closure-122_fix
2$comment$Comment comment
3$p$Pattern p=Pattern.compile("(/|(\n[ \t]*))\\*[ \t]*@[a-zA-Z]")
Closure-123_buggy
2$n$Node n
2$context$Context context
7$type$int type=n.getType()
8$opstr$String opstr=NodeUtil.opToStr(type)
9$childCount$int childCount=n.getChildCount()
10$first$Node first=n.getFirstChild()
11$last$Node last=n.getLastChild()
19$p$int p=NodeUtil.precedence(type)
23$rhsContext$Context rhsContext=getContextForNoInOperator(context)
57$catchblock$Node catchblock=first.getNext().getFirstChild()
179$p$int p=NodeUtil.precedence(type)
180$rhsContext$Context rhsContext=Context.OTHER
195$regexp$String regexp=regexpEscape(first.getString(),outputCharsetEncoder)
211$funcNeedsParens$boolean funcNeedsParens=(context == Context.START_OF_EXPR)
247$name$String name=n.getString()
248$fn$Node fn=first
249$parameters$Node parameters=fn.getChildAtIndex(1)
250$body$Node body=fn.getLastChild()
261$d$double d=getSimpleNumber(name)
278$preserveBlock$boolean preserveBlock=context == Context.PRESERVE_BLOCK
283$preferLineBreaks$boolean preferLineBreaks=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289$c$Node c=first
370$needsParens$boolean needsParens=(first.isNumber())
413$o$String o=type == Token.INC ? "++" : "--"
414$postProp$int postProp=n.getIntProp(Node.INCRDECR_PROP)
451$hasElse$boolean hasElse=childCount == 3
452$ambiguousElseClause$boolean ambiguousElseClause=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538$precedence$int precedence=NodeUtil.precedence(type)
550$next$Node next=first.getNext()
577$needsParens$boolean needsParens=(context == Context.START_OF_EXPR)
582$c$Node c=first
591$key$String key=c.getString()
604$d$double d=getSimpleNumber(key)
Closure-123_fix
2$n$Node n
2$context$Context context
7$type$int type=n.getType()
8$opstr$String opstr=NodeUtil.opToStr(type)
9$childCount$int childCount=n.getChildCount()
10$first$Node first=n.getFirstChild()
11$last$Node last=n.getLastChild()
19$p$int p=NodeUtil.precedence(type)
23$rhsContext$Context rhsContext=getContextForNoInOperator(context)
57$catchblock$Node catchblock=first.getNext().getFirstChild()
179$p$int p=NodeUtil.precedence(type)
180$rhsContext$Context rhsContext=getContextForNoInOperator(context)
195$regexp$String regexp=regexpEscape(first.getString(),outputCharsetEncoder)
211$funcNeedsParens$boolean funcNeedsParens=(context == Context.START_OF_EXPR)
247$name$String name=n.getString()
248$fn$Node fn=first
249$parameters$Node parameters=fn.getChildAtIndex(1)
250$body$Node body=fn.getLastChild()
261$d$double d=getSimpleNumber(name)
278$preserveBlock$boolean preserveBlock=context == Context.PRESERVE_BLOCK
283$preferLineBreaks$boolean preferLineBreaks=type == Token.SCRIPT || (type == Token.BLOCK && !preserveBlock && n.getParent() != null && n.getParent().isScript())
289$c$Node c=first
370$needsParens$boolean needsParens=(first.isNumber())
413$o$String o=type == Token.INC ? "++" : "--"
414$postProp$int postProp=n.getIntProp(Node.INCRDECR_PROP)
451$hasElse$boolean hasElse=childCount == 3
452$ambiguousElseClause$boolean ambiguousElseClause=context == Context.BEFORE_DANGLING_ELSE && !hasElse
538$precedence$int precedence=NodeUtil.precedence(type)
550$next$Node next=first.getNext()
577$needsParens$boolean needsParens=(context == Context.START_OF_EXPR)
582$c$Node c=first
591$key$String key=c.getString()
604$d$double d=getSimpleNumber(key)
Closure-124_buggy
2$node$Node node
2$replacement$Node replacement
Closure-124_fix
2$node$Node node
2$replacement$Node replacement
Closure-125_buggy
2$t$NodeTraversal t
2$n$Node n
3$constructor$Node constructor=n.getFirstChild()
4$type$JSType type=getJSType(constructor).restrictByNotNullOrUndefined()
6$fnType$FunctionType fnType=type.toMaybeFunctionType()
Closure-125_fix
2$t$NodeTraversal t
2$n$Node n
3$constructor$Node constructor=n.getFirstChild()
4$type$JSType type=getJSType(constructor).restrictByNotNullOrUndefined()
6$fnType$FunctionType fnType=type.toMaybeFunctionType()
Closure-126_buggy
2$n$Node n
2$exitType$int exitType
2$labelName$String labelName
13$ifBlock$Node ifBlock=n.getFirstChild().getNext()
15$elseBlock$Node elseBlock=ifBlock.getNext()
24$tryBlock$Node tryBlock=n.getFirstChild()
26$allCatchNodes$Node allCatchNodes=NodeUtil.getCatchBlock(n)
29$catchNode$Node catchNode=allCatchNodes.getFirstChild()
30$catchCodeBlock$Node catchCodeBlock=catchNode.getLastChild()
38$finallyBlock$Node finallyBlock=n.getLastChild()
45$labelBlock$Node labelBlock=n.getLastChild()
60$c$Node c
64$ifTree$Node ifTree=c
65$trueBlock$Node trueBlock
65$falseBlock$Node falseBlock
90$c$Node c=n.getLastChild()
Closure-126_fix
2$n$Node n
2$exitType$int exitType
2$labelName$String labelName
13$ifBlock$Node ifBlock=n.getFirstChild().getNext()
15$elseBlock$Node elseBlock=ifBlock.getNext()
24$tryBlock$Node tryBlock=n.getFirstChild()
26$allCatchNodes$Node allCatchNodes=NodeUtil.getCatchBlock(n)
29$catchNode$Node catchNode=allCatchNodes.getFirstChild()
30$catchCodeBlock$Node catchCodeBlock=catchNode.getLastChild()
41$labelBlock$Node labelBlock=n.getLastChild()
56$c$Node c
60$ifTree$Node ifTree=c
61$trueBlock$Node trueBlock
61$falseBlock$Node falseBlock
86$c$Node c=n.getLastChild()
Closure-128_buggy
2$s$String s
3$len$int len=s.length()
4$index$int index=0
5$c$char c=s.charAt(index)
Closure-128_fix
2$s$String s
3$len$int len=s.length()
7$index$int index=0
8$c$char c=s.charAt(index)
Closure-129_buggy
2$n$Node n
7$first$Node first=n.getFirstChild()
Closure-129_fix
2$n$Node n
7$first$Node first=n.getFirstChild()
Closure-13_buggy
2$node$Node node
11$visits$int visits=0
13$c$Node c=node.getFirstChild()
16$next$Node next=c.getNext()
Closure-13_fix
2$node$Node node
11$visits$int visits=0
13$c$Node c=node.getFirstChild()
15$next$Node next=c.getNext()
Closure-130_buggy
2$namespace$GlobalNamespace namespace
4$workList$Deque<Name> workList=new ArrayDeque<Name>(namespace.getNameForest())
6$name$Name name=workList.pop()
17$refs$List<Ref> refs=Lists.newArrayList(name.getRefs())
18$ref$Ref ref
Closure-130_fix
2$namespace$GlobalNamespace namespace
4$workList$Deque<Name> workList=new ArrayDeque<Name>(namespace.getNameForest())
6$name$Name name=workList.pop()
17$refs$List<Ref> refs=Lists.newArrayList(name.getRefs())
18$ref$Ref ref
Closure-131_buggy
2$s$String s
3$length$int length=s.length()
10$i$int i=1
Closure-131_fix
2$s$String s
3$length$int length=s.length()
11$i$int i=1
Closure-132_buggy
2$n$Node n
4$parent$Node parent=n.getParent()
6$cond$Node cond=n.getFirstChild()
15$thenBranch$Node thenBranch=cond.getNext()
16$elseBranch$Node elseBranch=thenBranch.getNext()
20$expr$Node expr=getBlockExpression(thenBranch)
37$or$Node or=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40$newExpr$Node newExpr=NodeUtil.newExpr(or)
59$and$Node and=IR.and(cond,expr.removeFirstChild()).srcref(n)
60$newExpr$Node newExpr=NodeUtil.newExpr(and)
70$innerIf$Node innerIf=thenBranch.getFirstChild()
73$innerCond$Node innerCond=innerIf.getFirstChild()
74$innerThenBranch$Node innerThenBranch=innerCond.getNext()
75$innerElseBranch$Node innerElseBranch=innerThenBranch.getNext()
116$thenExpr$Node thenExpr=getBlockReturnExpression(thenBranch)
117$elseExpr$Node elseExpr=getBlockReturnExpression(elseBranch)
125$returnNode$Node returnNode=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133$thenBranchIsExpressionBlock$boolean thenBranchIsExpressionBlock=isFoldableExpressBlock(thenBranch)
134$elseBranchIsExpressionBlock$boolean elseBranchIsExpressionBlock=isFoldableExpressBlock(elseBranch)
137$thenOp$Node thenOp=getBlockExpression(thenBranch).getFirstChild()
138$elseOp$Node elseOp=getBlockExpression(elseBranch).getFirstChild()
142$lhs$Node lhs=thenOp.getFirstChild()
151$assignName$Node assignName=thenOp.removeFirstChild()
152$thenExpr$Node thenExpr=thenOp.removeFirstChild()
153$elseExpr$Node elseExpr=elseOp.getLastChild()
156$hookNode$Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n)
157$assign$Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
159$expr$Node expr=NodeUtil.newExpr(assign)
171$expr$Node expr=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
178$thenBranchIsVar$boolean thenBranchIsVar=isVarBlock(thenBranch)
179$elseBranchIsVar$boolean elseBranchIsVar=isVarBlock(elseBranch)
185$var$Node var=getBlockVar(thenBranch)
186$elseAssign$Node elseAssign=getBlockExpression(elseBranch).getFirstChild()
188$name1$Node name1=var.getFirstChild()
189$maybeName2$Node maybeName2=elseAssign.getFirstChild()
194$thenExpr$Node thenExpr=name1.removeChildren()
195$elseExpr$Node elseExpr=elseAssign.getLastChild().detachFromParent()
197$hookNode$Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n)
210$var$Node var=getBlockVar(elseBranch)
211$thenAssign$Node thenAssign=getBlockExpression(thenBranch).getFirstChild()
213$maybeName1$Node maybeName1=thenAssign.getFirstChild()
214$name2$Node name2=var.getFirstChild()
219$thenExpr$Node thenExpr=thenAssign.getLastChild().detachFromParent()
220$elseExpr$Node elseExpr=name2.removeChildren()
222$hookNode$Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n)
Closure-132_fix
2$n$Node n
4$parent$Node parent=n.getParent()
6$cond$Node cond=n.getFirstChild()
15$thenBranch$Node thenBranch=cond.getNext()
16$elseBranch$Node elseBranch=thenBranch.getNext()
20$expr$Node expr=getBlockExpression(thenBranch)
37$or$Node or=IR.or(cond.removeFirstChild(),expr.removeFirstChild()).srcref(n)
40$newExpr$Node newExpr=NodeUtil.newExpr(or)
59$and$Node and=IR.and(cond,expr.removeFirstChild()).srcref(n)
60$newExpr$Node newExpr=NodeUtil.newExpr(and)
70$innerIf$Node innerIf=thenBranch.getFirstChild()
73$innerCond$Node innerCond=innerIf.getFirstChild()
74$innerThenBranch$Node innerThenBranch=innerCond.getNext()
75$innerElseBranch$Node innerElseBranch=innerThenBranch.getNext()
116$thenExpr$Node thenExpr=getBlockReturnExpression(thenBranch)
117$elseExpr$Node elseExpr=getBlockReturnExpression(elseBranch)
125$returnNode$Node returnNode=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(n))
133$thenBranchIsExpressionBlock$boolean thenBranchIsExpressionBlock=isFoldableExpressBlock(thenBranch)
134$elseBranchIsExpressionBlock$boolean elseBranchIsExpressionBlock=isFoldableExpressBlock(elseBranch)
137$thenOp$Node thenOp=getBlockExpression(thenBranch).getFirstChild()
138$elseOp$Node elseOp=getBlockExpression(elseBranch).getFirstChild()
142$lhs$Node lhs=thenOp.getFirstChild()
153$assignName$Node assignName=thenOp.removeFirstChild()
154$thenExpr$Node thenExpr=thenOp.removeFirstChild()
155$elseExpr$Node elseExpr=elseOp.getLastChild()
158$hookNode$Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n)
159$assign$Node assign=new Node(thenOp.getType(),assignName,hookNode).srcref(thenOp)
161$expr$Node expr=NodeUtil.newExpr(assign)
173$expr$Node expr=IR.exprResult(IR.hook(cond,thenOp,elseOp).srcref(n))
180$thenBranchIsVar$boolean thenBranchIsVar=isVarBlock(thenBranch)
181$elseBranchIsVar$boolean elseBranchIsVar=isVarBlock(elseBranch)
187$var$Node var=getBlockVar(thenBranch)
188$elseAssign$Node elseAssign=getBlockExpression(elseBranch).getFirstChild()
190$name1$Node name1=var.getFirstChild()
191$maybeName2$Node maybeName2=elseAssign.getFirstChild()
196$thenExpr$Node thenExpr=name1.removeChildren()
197$elseExpr$Node elseExpr=elseAssign.getLastChild().detachFromParent()
199$hookNode$Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n)
212$var$Node var=getBlockVar(elseBranch)
213$thenAssign$Node thenAssign=getBlockExpression(thenBranch).getFirstChild()
215$maybeName1$Node maybeName1=thenAssign.getFirstChild()
216$name2$Node name2=var.getFirstChild()
221$thenExpr$Node thenExpr=thenAssign.getLastChild().detachFromParent()
222$elseExpr$Node elseExpr=name2.removeChildren()
224$hookNode$Node hookNode=IR.hook(cond,thenExpr,elseExpr).srcref(n)
Closure-133_buggy
3$result$String result=stream.getRemainingJSDocLine()
Closure-133_fix
3$result$String result=stream.getRemainingJSDocLine()
Closure-14_buggy
3$fromNode$Node fromNode
3$node$Node node
3$cfa$ControlFlowAnalysis cfa
22$parent$Node parent=node.getParent()
76$finallyNode$Node finallyNode
86$nextSibling$Node nextSibling=node.getNext()
Closure-14_fix
3$fromNode$Node fromNode
3$node$Node node
3$cfa$ControlFlowAnalysis cfa
22$parent$Node parent=node.getParent()
76$finallyNode$Node finallyNode
86$nextSibling$Node nextSibling=node.getNext()
Closure-145_buggy
2$n$Node n
Closure-145_fix
2$n$Node n
4$labeledStatement$Node labeledStatement=n.getLastChild()
Closure-146_buggy
2$that$JSType that
5$p$TypePair p=that.getTypesUnderInequality(this)
Closure-146_fix
2$that$JSType that
5$p$TypePair p=that.getTypesUnderInequality(this)
12$noType$JSType noType=getNativeType(JSTypeNative.NO_TYPE)
Closure-15_buggy
2$n$Node n
21$c$Node c=n.getFirstChild()
Closure-15_fix
2$n$Node n
24$c$Node c=n.getFirstChild()
Closure-150_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
Closure-150_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
Closure-152_buggy
2$t$ErrorReporter t
2$scope$StaticScope<JSType> scope
13$changed$boolean changed=false
14$resolvedInterfaces$ImmutableList.Builder<ObjectType> resolvedInterfaces=ImmutableList.builder()
16$iface$ObjectType iface
17$resolvedIface$ObjectType resolvedIface=(ObjectType)iface.resolve(t,scope)
26$i$int i=0
Closure-152_fix
2$t$ErrorReporter t
2$scope$StaticScope<JSType> scope
11$maybeTypeOfThis$JSType maybeTypeOfThis=safeResolve(typeOfThis,t,scope)
16$changed$boolean changed=false
17$resolvedInterfaces$ImmutableList.Builder<ObjectType> resolvedInterfaces=ImmutableList.builder()
19$iface$ObjectType iface
20$resolvedIface$ObjectType resolvedIface=(ObjectType)iface.resolve(t,scope)
29$i$int i=0
Closure-159_buggy
3$node$Node node
3$changed$Set<String> changed
7$child$Node child=node.getFirstChild()
13$c$Node c=node.getFirstChild()
Closure-159_fix
3$node$Node node
3$changed$Set<String> changed
12$c$Node c=node.getFirstChild()
Closure-160_buggy
2$options$CompilerOptions options
9$printer$PrintStreamErrorManager printer=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38$guards$List<WarningsGuard> guards=Lists.newArrayList()
Closure-160_fix
2$options$CompilerOptions options
9$printer$PrintStreamErrorManager printer=new PrintStreamErrorManager(createMessageFormatter(),outStream)
38$guards$List<WarningsGuard> guards=Lists.newArrayList()
44$composedGuards$ComposeWarningsGuard composedGuards=new ComposeWarningsGuard(guards)
Closure-161_buggy
2$n$Node n
2$left$Node left
2$right$Node right
3$parent$Node parent=n.getParent()
14$index$double index=right.getDouble()
15$intIndex$int intIndex=(int)index
26$elem$Node elem=left.getFirstChild()
27$i$int i=0
Closure-161_fix
2$n$Node n
2$left$Node left
2$right$Node right
3$parent$Node parent=n.getParent()
17$index$double index=right.getDouble()
18$intIndex$int intIndex=(int)index
29$elem$Node elem=left.getFirstChild()
30$i$int i=0
Closure-164_buggy
2$other$JSType other
7$that$ArrowType that=(ArrowType)other
36$thisParam$Node thisParam=parameters.getFirstChild()
37$thatParam$Node thatParam=that.parameters.getFirstChild()
39$thisParamType$JSType thisParamType=thisParam.getJSType()
40$thatParamType$JSType thatParamType=thatParam.getJSType()
48$thisIsVarArgs$boolean thisIsVarArgs=thisParam.isVarArgs()
49$thatIsVarArgs$boolean thatIsVarArgs=thatParam.isVarArgs()
Closure-164_fix
2$other$JSType other
7$that$ArrowType that=(ArrowType)other
36$thisParam$Node thisParam=parameters.getFirstChild()
37$thatParam$Node thatParam=that.parameters.getFirstChild()
39$thisParamType$JSType thisParamType=thisParam.getJSType()
40$thatParamType$JSType thatParamType=thatParam.getJSType()
48$thisIsVarArgs$boolean thisIsVarArgs=thisParam.isVarArgs()
49$thatIsVarArgs$boolean thatIsVarArgs=thatParam.isVarArgs()
50$thisIsOptional$boolean thisIsOptional=thisIsVarArgs || thisParam.isOptionalArg()
51$thatIsOptional$boolean thatIsOptional=thatIsVarArgs || thatParam.isOptionalArg()
60$isTopFunction$boolean isTopFunction=thatIsVarArgs && (thatParamType == null || thatParamType.isUnknownType() || thatParamType.isNoType())
Closure-166_buggy
2$constraint$JSType constraint
Closure-166_fix
2$constraint$JSType constraint
20$alt$JSType alt
Closure-168_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
27$name$String name=n.getString()
28$scope$Scope scope=t.getScope()
29$var$Var var=scope.getVar(name)
31$ownerScope$Scope ownerScope=var.getScope()
42$name$String name=NodeUtil.getRootOfQualifiedName(n).getString()
43$scope$Scope scope=t.getScope()
44$var$Var var=scope.getVar(name)
46$ownerScope$Scope ownerScope=var.getScope()
Closure-168_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
27$name$String name=n.getString()
28$scope$Scope scope=t.getScope()
29$var$Var var=scope.getVar(name)
31$ownerScope$Scope ownerScope=var.getScope()
42$name$String name=NodeUtil.getRootOfQualifiedName(n).getString()
43$scope$Scope scope=t.getScope()
44$var$Var var=scope.getVar(name)
46$ownerScope$Scope ownerScope=var.getScope()
Closure-17_buggy
2$sourceName$String sourceName
2$info$JSDocInfo info
3$lValue$Node lValue
3$rValue$@Nullable Node rValue
24$knownType$JSType knownType=null
36$firstClause$Node firstClause=rValue.getFirstChild()
37$secondClause$Node secondClause=firstClause.getNext()
38$namesMatch$boolean namesMatch=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
Closure-17_fix
2$sourceName$String sourceName
2$info$JSDocInfo info
3$lValue$Node lValue
3$rValue$@Nullable Node rValue
24$knownType$JSType knownType=null
26$rValueInfo$JSDocInfo rValueInfo=rValue.getJSDocInfo()
40$firstClause$Node firstClause=rValue.getFirstChild()
41$secondClause$Node secondClause=firstClause.getNext()
42$namesMatch$boolean namesMatch=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString())
Closure-172_buggy
3$qName$String qName
3$n$Node n
3$info$JSDocInfo info
4$rhsValue$Node rhsValue
4$valueType$JSType valueType
14$inferred$boolean inferred=true
31$current$Node current=n.getParent()
41$contents$AstFunctionContents contents=getFunctionAnalysisResults(scope.getRootNode())
Closure-172_fix
3$qName$String qName
3$n$Node n
3$info$JSDocInfo info
4$rhsValue$Node rhsValue
4$valueType$JSType valueType
11$className$String className=qName.substring(0,qName.lastIndexOf(".prototype"))
12$slot$Var slot=scope.getSlot(className)
13$classType$JSType classType=slot == null ? null : slot.getType()
20$inferred$boolean inferred=true
37$current$Node current=n.getParent()
47$contents$AstFunctionContents contents=getFunctionAnalysisResults(scope.getRootNode())
Closure-176_buggy
3$scope$FlowScope scope
3$left$Node left
3$leftType$JSType leftType
3$resultType$JSType resultType
7$varName$String varName=left.getString()
8$var$Var var=syntacticScope.getVar(varName)
9$isVarDeclaration$boolean isVarDeclaration=left.hasChildren()
27$isVarTypeBetter$boolean isVarTypeBetter=!isVarDeclaration || var == null || var.isTypeInferred()
47$oldType$JSType oldType=var.getType()
53$qualifiedName$String qualifiedName=left.getQualifiedName()
Closure-176_fix
3$scope$FlowScope scope
3$left$Node left
3$leftType$JSType leftType
3$resultType$JSType resultType
7$varName$String varName=left.getString()
8$var$Var var=syntacticScope.getVar(varName)
9$varType$JSType varType=var == null ? null : var.getType()
10$isVarDeclaration$boolean isVarDeclaration=left.hasChildren() && varType != null && !var.isTypeInferred()
29$isVarTypeBetter$boolean isVarTypeBetter=isVarDeclaration && !resultType.isNullType() && !resultType.isVoidType()
51$oldType$JSType oldType=var.getType()
57$qualifiedName$String qualifiedName=left.getQualifiedName()
Closure-18_buggy
3$devMode$boolean devMode=options.devMode != DevMode.OFF
29$tracer$Tracer tracer=newTracer("parseInputs")
33$input$CompilerInput input
34$n$Node n=input.getAstRoot(this)
49$staleInputs$boolean staleInputs=false
51$input$CompilerInput input
54$provide$String provide
64$e$CircularDependencyException e
72$e$MissingProvideException e
90$input$CompilerInput input
91$n$Node n=input.getAstRoot(this)
108$sia$SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-18_fix
3$devMode$boolean devMode=options.devMode != DevMode.OFF
29$tracer$Tracer tracer=newTracer("parseInputs")
33$input$CompilerInput input
34$n$Node n=input.getAstRoot(this)
49$staleInputs$boolean staleInputs=false
51$input$CompilerInput input
54$provide$String provide
64$e$CircularDependencyException e
72$e$MissingProvideException e
90$input$CompilerInput input
91$n$Node n=input.getAstRoot(this)
108$sia$SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-19_buggy
2$scope$FlowScope scope
2$node$Node node
2$type$JSType type
9$qualifiedName$String qualifiedName=node.getQualifiedName()
12$origType$JSType origType=node.getJSType()
Closure-19_fix
2$scope$FlowScope scope
2$node$Node node
2$type$JSType type
9$qualifiedName$String qualifiedName=node.getQualifiedName()
12$origType$JSType origType=node.getJSType()
Closure-2_buggy
2$t$NodeTraversal t
2$n$Node n
3$functionName$String functionName
3$properties$HashMap<String,ObjectType> properties
4$currentProperties$HashMap<String,ObjectType> currentProperties
5$interfaceType$ObjectType interfaceType
6$implicitProto$ObjectType implicitProto=interfaceType.getImplicitPrototype()
7$currentPropertyNames$Set<String> currentPropertyNames
11$name$String name
12$oType$ObjectType oType=properties.get(name)
24$iType$ObjectType iType
Closure-2_fix
2$t$NodeTraversal t
2$n$Node n
3$functionName$String functionName
3$properties$HashMap<String,ObjectType> properties
4$currentProperties$HashMap<String,ObjectType> currentProperties
5$interfaceType$ObjectType interfaceType
6$implicitProto$ObjectType implicitProto=interfaceType.getImplicitPrototype()
7$currentPropertyNames$Set<String> currentPropertyNames
15$name$String name
16$oType$ObjectType oType=properties.get(name)
28$iType$ObjectType iType
Closure-20_buggy
2$n$Node n
4$callTarget$Node callTarget=n.getFirstChild()
13$value$Node value=callTarget.getNext()
15$addition$Node addition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
Closure-20_fix
2$n$Node n
4$callTarget$Node callTarget=n.getFirstChild()
13$value$Node value=callTarget.getNext()
16$addition$Node addition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent())
Closure-21_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
29$isResultUsed$boolean isResultUsed=NodeUtil.isExpressionResultUsed(n)
30$isSimpleOp$boolean isSimpleOp=NodeUtil.isSimpleOperatorType(n.getType())
36$an$Node an
37$ancestorType$int ancestorType=an.getType()
50$msg$String msg="This code lacks side-effects. Is there a bug?"
Closure-21_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
29$isResultUsed$boolean isResultUsed=NodeUtil.isExpressionResultUsed(n)
30$isSimpleOp$boolean isSimpleOp=NodeUtil.isSimpleOperatorType(n.getType())
33$msg$String msg="This code lacks side-effects. Is there a bug?"
Closure-22_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
20$gramps$Node gramps=parent.getParent()
30$an$Node an
31$ancestorType$int ancestorType=an.getType()
48$isResultUsed$boolean isResultUsed=NodeUtil.isExpressionResultUsed(n)
49$isSimpleOp$boolean isSimpleOp=NodeUtil.isSimpleOperatorType(n.getType())
57$msg$String msg="This code lacks side-effects. Is there a bug?"
Closure-22_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
29$isResultUsed$boolean isResultUsed=NodeUtil.isExpressionResultUsed(n)
30$isSimpleOp$boolean isSimpleOp=NodeUtil.isSimpleOperatorType(n.getType())
33$msg$String msg="This code lacks side-effects. Is there a bug?"
Closure-23_buggy
2$n$Node n
2$left$Node left
2$right$Node right
3$parent$Node parent=n.getParent()
17$index$double index=right.getDouble()
18$intIndex$int intIndex=(int)index
29$current$Node current=left.getFirstChild()
30$elem$Node elem=null
31$i$int i=0
Closure-23_fix
2$n$Node n
2$left$Node left
2$right$Node right
3$parent$Node parent=n.getParent()
17$index$double index=right.getDouble()
18$intIndex$int intIndex=(int)index
29$current$Node current=left.getFirstChild()
30$elem$Node elem=null
31$i$int i=0
Closure-24_buggy
2$t$NodeTraversal t
3$scope$Scope scope=t.getScope()
4$v$Var v
5$n$Node n=v.getNode()
6$type$int type=n.getType()
7$parent$Node parent=n.getParent()
10$name$String name=n.getString()
11$aliasVar$Var aliasVar=scope.getVar(name)
14$qualifiedName$String qualifiedName=aliasVar.getInitialValue().getQualifiedName()
Closure-24_fix
2$t$NodeTraversal t
3$scope$Scope scope=t.getScope()
4$v$Var v
5$n$Node n=v.getNode()
6$type$int type=n.getType()
7$parent$Node parent=n.getParent()
10$name$String name=n.getString()
11$aliasVar$Var aliasVar=scope.getVar(name)
14$qualifiedName$String qualifiedName=aliasVar.getInitialValue().getQualifiedName()
Closure-25_buggy
2$n$Node n
2$scope$FlowScope scope
4$constructor$Node constructor=n.getFirstChild()
6$constructorType$JSType constructorType=constructor.getJSType()
7$type$JSType type=null
13$ct$FunctionType ct=constructorType.toMaybeFunctionType()
26$arg$Node arg=constructor.getNext()
Closure-25_fix
2$n$Node n
2$scope$FlowScope scope
5$constructor$Node constructor=n.getFirstChild()
6$constructorType$JSType constructorType=constructor.getJSType()
7$type$JSType type=null
13$ct$FunctionType ct=constructorType.toMaybeFunctionType()
Closure-29_buggy
2$refs$List<Reference> refs
3$ret$boolean ret=false
4$ref$Reference ref
5$name$Node name=ref.getNode()
6$parent$Node parent=ref.getParent()
7$gramps$Node gramps=ref.getGrandparent()
36$val$Node val=ref.getAssignedValue()
55$child$Node child=val.getFirstChild()
64$childVal$Node childVal=child.getFirstChild()
68$t$Reference t
69$refNode$Node refNode=t.getParent()
Closure-29_fix
2$refs$List<Reference> refs
3$ret$boolean ret=false
4$validProperties$Set<String> validProperties=Sets.newHashSet()
5$ref$Reference ref
6$name$Node name=ref.getNode()
7$parent$Node parent=ref.getParent()
8$gramps$Node gramps=ref.getGrandparent()
29$propName$String propName=parent.getLastChild().getString()
45$val$Node val=ref.getAssignedValue()
64$child$Node child=val.getFirstChild()
74$childVal$Node childVal=child.getFirstChild()
78$t$Reference t
79$refNode$Node refNode=t.getParent()
Closure-31_buggy
3$devMode$boolean devMode=options.devMode != DevMode.OFF
29$tracer$Tracer tracer=newTracer("parseInputs")
33$input$CompilerInput input
34$n$Node n=input.getAstRoot(this)
47$staleInputs$boolean staleInputs=false
53$input$CompilerInput input
56$provide$String provide
66$e$CircularDependencyException e
74$e$MissingProvideException e
85$input$CompilerInput input
86$n$Node n=input.getAstRoot(this)
94$info$JSDocInfo info=n.getJSDocInfo()
119$input$CompilerInput input
120$n$Node n=input.getAstRoot(this)
137$sia$SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-31_fix
3$devMode$boolean devMode=options.devMode != DevMode.OFF
29$tracer$Tracer tracer=newTracer("parseInputs")
33$input$CompilerInput input
34$n$Node n=input.getAstRoot(this)
47$staleInputs$boolean staleInputs=false
52$input$CompilerInput input
55$provide$String provide
65$e$CircularDependencyException e
73$e$MissingProvideException e
84$input$CompilerInput input
85$n$Node n=input.getAstRoot(this)
93$info$JSDocInfo info=n.getJSDocInfo()
118$input$CompilerInput input
119$n$Node n=input.getAstRoot(this)
136$sia$SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF)
Closure-32_buggy
2$token$JsDocToken token
3$option$WhitespaceOption option
11$startLineno$int startLineno=stream.getLineno()
12$startCharno$int startCharno=stream.getCharno() + 1
15$line$String line=stream.getRemainingJSDocLine()
20$builder$StringBuilder builder=new StringBuilder()
26$ignoreStar$boolean ignoreStar=false
70$multilineText$String multilineText=builder.toString()
76$endLineno$int endLineno=stream.getLineno()
77$endCharno$int endCharno=stream.getCharno()
Closure-32_fix
2$token$JsDocToken token
3$option$WhitespaceOption option
11$startLineno$int startLineno=stream.getLineno()
12$startCharno$int startCharno=stream.getCharno() + 1
15$line$String line=stream.getRemainingJSDocLine()
20$builder$StringBuilder builder=new StringBuilder()
26$ignoreStar$boolean ignoreStar=false
31$lineStartChar$int lineStartChar=-1
65$isEOC$boolean isEOC=token == JsDocToken.EOC
68$numSpaces$int numSpaces=stream.getCharno() - lineStartChar
69$i$int i=0
85$multilineText$String multilineText=builder.toString()
91$endLineno$int endLineno=stream.getLineno()
92$endCharno$int endCharno=stream.getCharno()
Closure-33_buggy
2$constraintObj$ObjectType constraintObj
15$prop$String prop
16$propType$JSType propType=constraintObj.getPropertyType(prop)
18$typeToInfer$JSType typeToInfer=propType
Closure-33_fix
2$constraintObj$ObjectType constraintObj
18$prop$String prop
19$propType$JSType propType=constraintObj.getPropertyType(prop)
21$typeToInfer$JSType typeToInfer=propType
Closure-35_buggy
3$type$JSType type
3$constraint$JSType constraint
8$constraintObj$ObjectType constraintObj=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
11$objType$ObjectType objType=ObjectType.cast(type.restrictByNotNullOrUndefined())
13$prop$String prop
14$propType$JSType propType=constraintObj.getPropertyType(prop)
16$typeToInfer$JSType typeToInfer=propType
Closure-35_fix
3$type$JSType type
3$constraint$JSType constraint
8$constraintObj$ObjectType constraintObj=ObjectType.cast(constraint.restrictByNotNullOrUndefined())
Closure-36_buggy
3$declaration$Reference declaration
4$initialization$Reference initialization
5$reference$Reference reference
36$value$Node value=initialization.getAssignedValue()
45$callNode$Node callNode=reference.getParent()
47$convention$CodingConvention convention=compiler.getCodingConvention()
50$relationship$SubclassRelationship relationship=convention.getClassesDefinedByCall(callNode)
Closure-36_fix
3$declaration$Reference declaration
4$initialization$Reference initialization
5$reference$Reference reference
36$value$Node value=initialization.getAssignedValue()
45$callNode$Node callNode=reference.getParent()
47$convention$CodingConvention convention=compiler.getCodingConvention()
50$relationship$SubclassRelationship relationship=convention.getClassesDefinedByCall(callNode)
Closure-38_buggy
2$x$double x
5$prev$char prev=getLastChar()
6$negativeZero$boolean negativeZero=isNegativeZero(x)
12$value$long value=(long)x
13$mantissa$long mantissa=value
14$exp$int exp=0
Closure-38_fix
2$x$double x
5$prev$char prev=getLastChar()
6$negativeZero$boolean negativeZero=isNegativeZero(x)
12$value$long value=(long)x
13$mantissa$long mantissa=value
14$exp$int exp=0
Closure-39_buggy
2$forAnnotations$boolean forAnnotations
10$propertyNames$Set<String> propertyNames=Sets.newTreeSet()
11$current$ObjectType current=this
18$sb$StringBuilder sb=new StringBuilder()
21$i$int i=0
22$property$String property
Closure-39_fix
2$forAnnotations$boolean forAnnotations
10$propertyNames$Set<String> propertyNames=Sets.newTreeSet()
11$current$ObjectType current=this
18$sb$StringBuilder sb=new StringBuilder()
21$i$int i=0
22$property$String property
Closure-4_buggy
2$t$ErrorReporter t
2$enclosing$StaticScope<JSType> enclosing
7$resolved$boolean resolved=resolveViaRegistry(t,enclosing)
Closure-4_fix
2$t$ErrorReporter t
2$enclosing$StaticScope<JSType> enclosing
7$resolved$boolean resolved=resolveViaRegistry(t,enclosing)
Closure-40_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$ns$NameInformation ns=createNameInformation(t,n,parent)
11$nameNode$Node nameNode=n.getFirstChild()
12$ns$NameInformation ns=createNameInformation(t,nameNode,n)
14$nameInfo$JsName nameInfo=getName(nameNode.getString(),true)
18$ns$NameInformation ns=createNameInformation(t,n,parent)
27$nameNode$Node nameNode=n.getFirstChild()
29$ns$NameInformation ns=createNameInformation(t,nameNode,n)
38$nameNode$Node nameNode=n.getFirstChild()
39$ns$NameInformation ns=createNameInformation(t,nameNode,n)
41$name$JsName name=getName(ns.name,false)
Closure-40_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$ns$NameInformation ns=createNameInformation(t,n,parent)
11$nameNode$Node nameNode=n.getFirstChild()
12$ns$NameInformation ns=createNameInformation(t,nameNode,n)
14$nameInfo$JsName nameInfo=getName(nameNode.getString(),true)
18$ns$NameInformation ns=createNameInformation(t,n,parent)
27$nameNode$Node nameNode=n.getFirstChild()
29$ns$NameInformation ns=createNameInformation(t,nameNode,n)
38$nameNode$Node nameNode=n.getFirstChild()
39$ns$NameInformation ns=createNameInformation(t,nameNode,n)
41$name$JsName name=getName(ns.name,true)
Closure-42_buggy
2$loopNode$ForInLoop loopNode
Closure-42_fix
2$loopNode$ForInLoop loopNode
Closure-44_buggy
2$newcode$String newcode
9$c$char c=newcode.charAt(0)
Closure-44_fix
2$newcode$String newcode
9$c$char c=newcode.charAt(0)
Closure-48_buggy
2$t$NodeTraversal t
2$info$JSDocInfo info
3$n$Node n
3$parent$Node parent
3$rhsValue$Node rhsValue
4$ownerNode$Node ownerNode=n.getFirstChild()
5$ownerName$String ownerName=ownerNode.getQualifiedName()
6$qName$String qName=n.getQualifiedName()
7$propName$String propName=n.getLastChild().getString()
24$valueType$JSType valueType=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35$qVar$Var qVar=scope.getVar(qName)
42$qVarType$ObjectType qVarType=ObjectType.cast(qVar.getType())
97$inferred$boolean inferred=true
115$ownerType$ObjectType ownerType=getObjectSlot(ownerName)
119$isExtern$boolean isExtern=t.getInput() != null && t.getInput().isExtern()
134$ownerType$FunctionType ownerType=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
137$ownerTypeOfThis$JSType ownerTypeOfThis=ownerType.getTypeOfThis()
138$delegateName$String delegateName=codingConvention.getDelegateSuperclassName()
139$delegateType$JSType delegateType=delegateName == null ? null : typeRegistry.getType(delegateName)
Closure-48_fix
2$t$NodeTraversal t
2$info$JSDocInfo info
3$n$Node n
3$parent$Node parent
3$rhsValue$Node rhsValue
4$ownerNode$Node ownerNode=n.getFirstChild()
5$ownerName$String ownerName=ownerNode.getQualifiedName()
6$qName$String qName=n.getQualifiedName()
7$propName$String propName=n.getLastChild().getString()
24$valueType$JSType valueType=getDeclaredType(t.getSourceName(),info,n,rhsValue)
35$qVar$Var qVar=scope.getVar(qName)
42$qVarType$ObjectType qVarType=ObjectType.cast(qVar.getType())
97$inferred$boolean inferred=true
118$ownerType$ObjectType ownerType=getObjectSlot(ownerName)
122$isExtern$boolean isExtern=t.getInput() != null && t.getInput().isExtern()
137$ownerType$FunctionType ownerType=JSType.toMaybeFunctionType(getObjectSlot(ownerName))
140$ownerTypeOfThis$JSType ownerTypeOfThis=ownerType.getTypeOfThis()
141$delegateName$String delegateName=codingConvention.getDelegateSuperclassName()
142$delegateType$JSType delegateType=delegateName == null ? null : typeRegistry.getType(delegateName)
Closure-5_buggy
2$refs$List<Reference> refs
3$ret$boolean ret=false
4$validProperties$Set<String> validProperties=Sets.newHashSet()
5$ref$Reference ref
6$name$Node name=ref.getNode()
7$parent$Node parent=ref.getParent()
8$gramps$Node gramps=ref.getGrandparent()
32$propName$String propName=parent.getLastChild().getString()
48$val$Node val=ref.getAssignedValue()
67$child$Node child=val.getFirstChild()
77$childVal$Node childVal=child.getFirstChild()
81$t$Reference t
82$refNode$Node refNode=t.getParent()
Closure-5_fix
2$refs$List<Reference> refs
3$ret$boolean ret=false
4$validProperties$Set<String> validProperties=Sets.newHashSet()
5$ref$Reference ref
6$name$Node name=ref.getNode()
7$parent$Node parent=ref.getParent()
8$gramps$Node gramps=ref.getGrandparent()
35$propName$String propName=parent.getLastChild().getString()
51$val$Node val=ref.getAssignedValue()
70$child$Node child=val.getFirstChild()
80$childVal$Node childVal=child.getFirstChild()
84$t$Reference t
85$refNode$Node refNode=t.getParent()
Closure-50_buggy
2$n$Node n
3$callTarget$Node callTarget=n.getFirstChild()
9$right$Node right=callTarget.getNext()
16$arrayNode$Node arrayNode=callTarget.getFirstChild()
17$functionName$Node functionName=arrayNode.getNext()
26$joinString$String joinString=(right == null) ? "," : NodeUtil.getStringValue(right)
27$arrayFoldedChildren$List<Node> arrayFoldedChildren=Lists.newLinkedList()
28$sb$StringBuilder sb=null
29$foldedSize$int foldedSize=0
30$prev$Node prev=null
31$elem$Node elem=arrayNode.getFirstChild()
67$originalSize$int originalSize=InlineCostEstimator.getCost(n)
70$emptyStringNode$Node emptyStringNode=Node.newString("")
75$foldedStringNode$Node foldedStringNode=arrayFoldedChildren.remove(0)
83$replacement$Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
96$kJoinOverhead$int kJoinOverhead="[].join()".length()
103$node$Node node
Closure-50_fix
2$n$Node n
3$callTarget$Node callTarget=n.getFirstChild()
9$right$Node right=callTarget.getNext()
16$arrayNode$Node arrayNode=callTarget.getFirstChild()
17$functionName$Node functionName=arrayNode.getNext()
31$joinString$String joinString=(right == null) ? "," : NodeUtil.getStringValue(right)
32$arrayFoldedChildren$List<Node> arrayFoldedChildren=Lists.newLinkedList()
33$sb$StringBuilder sb=null
34$foldedSize$int foldedSize=0
35$prev$Node prev=null
36$elem$Node elem=arrayNode.getFirstChild()
72$originalSize$int originalSize=InlineCostEstimator.getCost(n)
75$emptyStringNode$Node emptyStringNode=Node.newString("")
80$foldedStringNode$Node foldedStringNode=arrayFoldedChildren.remove(0)
88$replacement$Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode)
101$kJoinOverhead$int kJoinOverhead="[].join()".length()
108$node$Node node
Closure-51_buggy
2$x$double x
5$prev$char prev=getLastChar()
11$value$long value=(long)x
12$mantissa$long mantissa=value
13$exp$int exp=0
Closure-51_fix
2$x$double x
5$prev$char prev=getLastChar()
11$value$long value=(long)x
12$mantissa$long mantissa=value
13$exp$int exp=0
Closure-52_buggy
2$s$String s
3$len$int len=s.length()
4$index$int index=0
5$c$char c=s.charAt(index)
Closure-52_fix
2$s$String s
3$len$int len=s.length()
4$index$int index=0
5$c$char c=s.charAt(index)
Closure-53_buggy
2$v$Var v
2$ref$Reference ref
3$varmap$Map<String,String> varmap
5$nodes$List<Node> nodes=Lists.newArrayList()
6$val$Node val=ref.getAssignedValue()
9$all$Set<String> all=Sets.newLinkedHashSet(varmap.keySet())
10$key$Node key=val.getFirstChild()
12$var$String var=key.getString()
13$value$Node value=key.removeFirstChild()
22$var$String var
29$replacement$Node replacement
39$cur$Node cur=replacement
40$i$int i
43$t$Node t=new Node(Token.COMMA)
50$replace$Node replace=ref.getParent()
Closure-53_fix
2$v$Var v
2$ref$Reference ref
3$varmap$Map<String,String> varmap
5$nodes$List<Node> nodes=Lists.newArrayList()
6$val$Node val=ref.getAssignedValue()
9$all$Set<String> all=Sets.newLinkedHashSet(varmap.keySet())
10$key$Node key=val.getFirstChild()
12$var$String var=key.getString()
13$value$Node value=key.removeFirstChild()
22$var$String var
29$replacement$Node replacement
42$cur$Node cur=replacement
43$i$int i
46$t$Node t=new Node(Token.COMMA)
54$replace$Node replace=ref.getParent()
Closure-55_buggy
2$n$Node n
Closure-55_fix
2$n$Node n
Closure-56_buggy
2$lineNumber$int lineNumber
3$js$String js=""
9$e$IOException e
13$pos$int pos=0
14$startLine$int startLine=1
23$n$int n=startLine
24$nextpos$int nextpos=js.indexOf('\n',pos)
Closure-56_fix
2$lineNumber$int lineNumber
3$js$String js=""
9$e$IOException e
13$pos$int pos=0
14$startLine$int startLine=1
23$n$int n=startLine
24$nextpos$int nextpos=js.indexOf('\n',pos)
Closure-57_buggy
2$node$Node node
2$parent$Node parent
3$functionName$String functionName
4$className$String className=null
6$callee$Node callee=node.getFirstChild()
8$qualifiedName$String qualifiedName=callee.getQualifiedName()
10$target$Node target=callee.getNext()
Closure-57_fix
2$node$Node node
2$parent$Node parent
3$functionName$String functionName
4$className$String className=null
6$callee$Node callee=node.getFirstChild()
8$qualifiedName$String qualifiedName=callee.getQualifiedName()
10$target$Node target=callee.getNext()
Closure-58_buggy
2$n$Node n
2$gen$BitSet gen
2$kill$BitSet kill
3$conditional$boolean conditional
24$lhs$Node lhs=n.getFirstChild()
25$rhs$Node rhs=lhs.getNext()
37$c$Node c=n.getFirstChild()
71$lhs$Node lhs=n.getFirstChild()
81$c$Node c=n.getFirstChild()
Closure-58_fix
2$n$Node n
2$gen$BitSet gen
2$kill$BitSet kill
3$conditional$boolean conditional
24$lhs$Node lhs=n.getFirstChild()
25$rhs$Node rhs=lhs.getNext()
41$c$Node c=n.getFirstChild()
75$lhs$Node lhs=n.getFirstChild()
85$c$Node c=n.getFirstChild()
Closure-59_buggy
2$options$CompilerOptions options
9$printer$PrintStreamErrorManager printer=new PrintStreamErrorManager(createMessageFormatter(),outStream)
44$guards$List<WarningsGuard> guards=Lists.newArrayList()
50$composedGuards$ComposeWarningsGuard composedGuards=new ComposeWarningsGuard(guards)
Closure-59_fix
2$options$CompilerOptions options
9$printer$PrintStreamErrorManager printer=new PrintStreamErrorManager(createMessageFormatter(),outStream)
45$guards$List<WarningsGuard> guards=Lists.newArrayList()
51$composedGuards$ComposeWarningsGuard composedGuards=new ComposeWarningsGuard(guards)
Closure-61_buggy
3$callNode$Node callNode
3$compiler$@Nullable AbstractCompiler compiler
13$nameNode$Node nameNode=callNode.getFirstChild()
17$name$String name=nameNode.getString()
42$param$Node param=nameNode.getNext()
Closure-61_fix
3$callNode$Node callNode
3$compiler$@Nullable AbstractCompiler compiler
13$nameNode$Node nameNode=callNode.getFirstChild()
17$name$String name=nameNode.getString()
35$namespaceName$String namespaceName=nameNode.getFirstChild().getString()
48$param$Node param=nameNode.getNext()
Closure-62_buggy
2$error$JSError error
2$warning$boolean warning
4$source$SourceExcerptProvider source=getSource()
5$sourceExcerpt$String sourceExcerpt=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10$b$StringBuilder b=new StringBuilder()
28$charno$int charno=error.getCharno()
35$i$int i=0
36$c$char c=sourceExcerpt.charAt(i)
Closure-62_fix
2$error$JSError error
2$warning$boolean warning
4$source$SourceExcerptProvider source=getSource()
5$sourceExcerpt$String sourceExcerpt=source == null ? null : excerpt.get(source,error.sourceName,error.lineNumber,excerptFormatter)
10$b$StringBuilder b=new StringBuilder()
28$charno$int charno=error.getCharno()
35$i$int i=0
36$c$char c=sourceExcerpt.charAt(i)
Closure-65_buggy
2$s$String s
2$quote$char quote
3$doublequoteEscape$String doublequoteEscape
4$singlequoteEscape$String singlequoteEscape
5$backslashEscape$String backslashEscape
6$outputCharsetEncoder$CharsetEncoder outputCharsetEncoder
7$sb$StringBuilder sb=new StringBuilder(s.length() + 2)
9$i$int i=0
10$c$char c=s.charAt(i)
30$END_SCRIPT$String END_SCRIPT="/script"
33$START_COMMENT$String START_COMMENT="!--"
Closure-65_fix
2$s$String s
2$quote$char quote
3$doublequoteEscape$String doublequoteEscape
4$singlequoteEscape$String singlequoteEscape
5$backslashEscape$String backslashEscape
6$outputCharsetEncoder$CharsetEncoder outputCharsetEncoder
7$sb$StringBuilder sb=new StringBuilder(s.length() + 2)
9$i$int i=0
10$c$char c=s.charAt(i)
30$END_SCRIPT$String END_SCRIPT="/script"
33$START_COMMENT$String START_COMMENT="!--"
Closure-66_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
3$childType$JSType childType
4$leftType$JSType leftType
4$rightType$JSType rightType
5$left$Node left
5$right$Node right
7$typeable$boolean typeable=true
149$leftTypeRestricted$JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined()
150$rightTypeRestricted$JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined()
151$result$TernaryValue result=leftTypeRestricted.testForEquality(rightTypeRestricted)
169$leftTypeRestricted$JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined()
170$rightTypeRestricted$JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined()
199$message$String message="left side of comparison"
272$switchType$JSType switchType=getJSType(parent.getFirstChild())
273$caseType$JSType caseType=getJSType(n.getFirstChild())
279$child$Node child=n.getFirstChild()
334$key$Node key
Closure-66_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
3$childType$JSType childType
4$leftType$JSType leftType
4$rightType$JSType rightType
5$left$Node left
5$right$Node right
7$typeable$boolean typeable=true
151$leftTypeRestricted$JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined()
152$rightTypeRestricted$JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined()
153$result$TernaryValue result=leftTypeRestricted.testForEquality(rightTypeRestricted)
171$leftTypeRestricted$JSType leftTypeRestricted=leftType.restrictByNotNullOrUndefined()
172$rightTypeRestricted$JSType rightTypeRestricted=rightType.restrictByNotNullOrUndefined()
201$message$String message="left side of comparison"
274$switchType$JSType switchType=getJSType(parent.getFirstChild())
275$caseType$JSType caseType=getJSType(n.getFirstChild())
281$child$Node child=n.getFirstChild()
336$key$Node key
Closure-67_buggy
2$assign$Node assign
3$n$Node n=assign.getFirstChild()
8$isChainedProperty$boolean isChainedProperty=n.getFirstChild().getType() == Token.GETPROP
12$child$Node child=n.getFirstChild().getFirstChild().getNext()
Closure-67_fix
2$assign$Node assign
3$n$Node n=assign.getFirstChild()
8$isChainedProperty$boolean isChainedProperty=n.getFirstChild().getType() == Token.GETPROP
12$child$Node child=n.getFirstChild().getFirstChild().getNext()
Closure-69_buggy
2$t$NodeTraversal t
2$n$Node n
3$child$Node child=n.getFirstChild()
4$childType$JSType childType=getJSType(child).restrictByNotNullOrUndefined()
15$functionType$FunctionType functionType=(FunctionType)childType
17$isExtern$boolean isExtern=false
18$functionJSDocInfo$JSDocInfo functionJSDocInfo=functionType.getJSDocInfo()
20$sourceName$String sourceName=functionJSDocInfo.getSourceName()
21$functionSource$CompilerInput functionSource=compiler.getInput(sourceName)
Closure-69_fix
2$t$NodeTraversal t
2$n$Node n
3$child$Node child=n.getFirstChild()
4$childType$JSType childType=getJSType(child).restrictByNotNullOrUndefined()
15$functionType$FunctionType functionType=(FunctionType)childType
17$isExtern$boolean isExtern=false
18$functionJSDocInfo$JSDocInfo functionJSDocInfo=functionType.getJSDocInfo()
20$sourceName$String sourceName=functionJSDocInfo.getSourceName()
21$functionSource$CompilerInput functionSource=compiler.getInput(sourceName)
Closure-7_buggy
2$type$ObjectType type
4$ctorType$JSType ctorType=getNativeType(U2U_CONSTRUCTOR_TYPE)
Closure-7_fix
2$type$ObjectType type
4$ctorType$JSType ctorType=getNativeType(U2U_CONSTRUCTOR_TYPE)
Closure-70_buggy
2$functionNode$Node functionNode
3$astParameters$Node astParameters=functionNode.getFirstChild().getNext()
4$body$Node body=astParameters.getNext()
5$functionType$FunctionType functionType=(FunctionType)functionNode.getJSType()
7$jsDocParameters$Node jsDocParameters=functionType.getParametersNode()
9$jsDocParameter$Node jsDocParameter=jsDocParameters.getFirstChild()
10$astParameter$Node astParameter
Closure-70_fix
2$functionNode$Node functionNode
3$astParameters$Node astParameters=functionNode.getFirstChild().getNext()
4$body$Node body=astParameters.getNext()
5$functionType$FunctionType functionType=(FunctionType)functionNode.getJSType()
7$jsDocParameters$Node jsDocParameters=functionType.getParametersNode()
9$jsDocParameter$Node jsDocParameter=jsDocParameters.getFirstChild()
10$astParameter$Node astParameter
Closure-71_buggy
2$t$NodeTraversal t
3$getprop$Node getprop
3$parent$Node parent
4$objectType$ObjectType objectType=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6$propertyName$String propertyName=getprop.getLastChild().getString()
11$isOverride$boolean isOverride=t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20$docInfo$JSDocInfo docInfo=null
35$sameInput$boolean sameInput=t.getInput().getName().equals(docInfo.getSourceName())
37$visibility$Visibility visibility=docInfo.getVisibility()
38$ownerType$JSType ownerType=normalizeClassType(objectType)
42$overridingInfo$JSDocInfo overridingInfo=parent.getJSDocInfo()
43$overridingVisibility$Visibility overridingVisibility=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
Closure-71_fix
2$t$NodeTraversal t
3$getprop$Node getprop
3$parent$Node parent
4$objectType$ObjectType objectType=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()))
6$propertyName$String propertyName=getprop.getLastChild().getString()
11$isOverride$boolean isOverride=parent.getJSDocInfo() != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop
20$docInfo$JSDocInfo docInfo=null
35$sameInput$boolean sameInput=t.getInput().getName().equals(docInfo.getSourceName())
37$visibility$Visibility visibility=docInfo.getVisibility()
38$ownerType$JSType ownerType=normalizeClassType(objectType)
42$overridingInfo$JSDocInfo overridingInfo=parent.getJSDocInfo()
43$overridingVisibility$Visibility overridingVisibility=overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility()
Closure-73_buggy
2$s$String s
2$quote$char quote
3$doublequoteEscape$String doublequoteEscape
4$singlequoteEscape$String singlequoteEscape
5$backslashEscape$String backslashEscape
6$outputCharsetEncoder$CharsetEncoder outputCharsetEncoder
7$sb$StringBuilder sb=new StringBuilder(s.length() + 2)
9$i$int i=0
10$c$char c=s.charAt(i)
30$END_SCRIPT$String END_SCRIPT="/script"
33$START_COMMENT$String START_COMMENT="!--"
Closure-73_fix
2$s$String s
2$quote$char quote
3$doublequoteEscape$String doublequoteEscape
4$singlequoteEscape$String singlequoteEscape
5$backslashEscape$String backslashEscape
6$outputCharsetEncoder$CharsetEncoder outputCharsetEncoder
7$sb$StringBuilder sb=new StringBuilder(s.length() + 2)
9$i$int i=0
10$c$char c=s.charAt(i)
30$END_SCRIPT$String END_SCRIPT="/script"
33$START_COMMENT$String START_COMMENT="!--"
Closure-77_buggy
2$s$String s
2$quote$char quote
3$doublequoteEscape$String doublequoteEscape
4$singlequoteEscape$String singlequoteEscape
5$backslashEscape$String backslashEscape
6$outputCharsetEncoder$CharsetEncoder outputCharsetEncoder
7$sb$StringBuilder sb=new StringBuilder(s.length() + 2)
9$i$int i=0
10$c$char c=s.charAt(i)
29$END_SCRIPT$String END_SCRIPT="/script"
32$START_COMMENT$String START_COMMENT="!--"
Closure-77_fix
2$s$String s
2$quote$char quote
3$doublequoteEscape$String doublequoteEscape
4$singlequoteEscape$String singlequoteEscape
5$backslashEscape$String backslashEscape
6$outputCharsetEncoder$CharsetEncoder outputCharsetEncoder
7$sb$StringBuilder sb=new StringBuilder(s.length() + 2)
9$i$int i=0
10$c$char c=s.charAt(i)
30$END_SCRIPT$String END_SCRIPT="/script"
33$START_COMMENT$String START_COMMENT="!--"
Closure-78_buggy
2$opType$int opType
2$left$Node left
2$right$Node right
11$result$double result
16$lValObj$Double lValObj=NodeUtil.getNumberValue(left)
20$rValObj$Double rValObj=NodeUtil.getNumberValue(right)
25$lval$double lval=lValObj
26$rval$double rval=rValObj
73$newNumber$Node newNumber=Node.newNumber(result)
Closure-78_fix
2$opType$int opType
2$left$Node left
2$right$Node right
11$result$double result
16$lValObj$Double lValObj=NodeUtil.getNumberValue(left)
20$rValObj$Double rValObj=NodeUtil.getNumberValue(right)
25$lval$double lval=lValObj
26$rval$double rval=rValObj
71$newNumber$Node newNumber=Node.newNumber(result)
Closure-81_buggy
2$functionNode$FunctionNode functionNode
3$name$Name name=functionNode.getFunctionName()
4$isUnnamedFunction$Boolean isUnnamedFunction=false
10$node$Node node=newNode(Token.FUNCTION)
11$newName$Node newName=transform(name)
19$lpColumn$int lpColumn=functionNode.getAbsolutePosition() + functionNode.getLp()
25$lp$Node lp=newNode(Token.LP)
32$fnName$Name fnName=functionNode.getFunctionName()
38$lparenCharno$int lparenCharno=functionNode.getLp() + functionNode.getAbsolutePosition()
42$param$AstNode param
47$bodyNode$Node bodyNode=transform(functionNode.getBody())
Closure-81_fix
2$functionNode$FunctionNode functionNode
3$name$Name name=functionNode.getFunctionName()
4$isUnnamedFunction$Boolean isUnnamedFunction=false
6$functionType$int functionType=functionNode.getFunctionType()
17$node$Node node=newNode(Token.FUNCTION)
18$newName$Node newName=transform(name)
26$lpColumn$int lpColumn=functionNode.getAbsolutePosition() + functionNode.getLp()
32$lp$Node lp=newNode(Token.LP)
39$fnName$Name fnName=functionNode.getFunctionName()
45$lparenCharno$int lparenCharno=functionNode.getLp() + functionNode.getAbsolutePosition()
49$param$AstNode param
54$bodyNode$Node bodyNode=transform(functionNode.getBody())
Closure-82_buggy
Closure-82_fix
Closure-83_buggy
2$params$Parameters params
3$param$String param=params.getParameter(0)
9$lowerParam$String lowerParam=param.toLowerCase()
Closure-83_fix
2$params$Parameters params
3$param$String param=null
6$e$CmdLineException e
12$lowerParam$String lowerParam=param.toLowerCase()
Closure-86_buggy
2$value$Node value
2$locals$Predicate<Node> locals
Closure-86_fix
2$value$Node value
2$locals$Predicate<Node> locals
Closure-87_buggy
2$n$Node n
5$maybeExpr$Node maybeExpr=n.getFirstChild()
Closure-87_fix
2$n$Node n
5$maybeExpr$Node maybeExpr=n.getFirstChild()
14$calledFn$Node calledFn=maybeExpr.getFirstChild().getFirstChild()
Closure-88_buggy
3$n$Node n
3$variable$String variable
16$child$Node child=n.getFirstChild()
19$state$VariableLiveness state=isVariableReadBeforeKill(child,variable)
Closure-88_fix
3$n$Node n
3$variable$String variable
10$rhs$Node rhs=n.getNext()
11$state$VariableLiveness state=isVariableReadBeforeKill(rhs,variable)
22$child$Node child=n.getFirstChild()
25$state$VariableLiveness state=isVariableReadBeforeKill(child,variable)
Closure-91_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$jsDoc$JSDocInfo jsDoc=getFunctionJsDocInfo(n)
22$pType$int pType=parent.getType()
38$lhs$Node lhs=parent.getFirstChild()
39$rhs$Node rhs=lhs.getNext()
56$llhs$Node llhs=lhs.getFirstChild()
Closure-91_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$jsDoc$JSDocInfo jsDoc=getFunctionJsDocInfo(n)
22$pType$int pType=parent.getType()
35$gramps$Node gramps=parent.getParent()
37$maybeLends$JSDocInfo maybeLends=gramps.getJSDocInfo()
47$lhs$Node lhs=parent.getFirstChild()
48$rhs$Node rhs=lhs.getNext()
65$llhs$Node llhs=lhs.getFirstChild()
Closure-92_buggy
19$assignNode$Node assignNode=candidateDefinition.getFirstChild()
20$nameNode$Node nameNode=assignNode.getFirstChild()
23$valueNode$Node valueNode=nameNode.getNext()
27$varNode$Node varNode=new Node(Token.VAR,nameNode)
44$indexOfDot$int indexOfDot=namespace.indexOf('.')
51$parentName$ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot))
Closure-92_fix
19$assignNode$Node assignNode=candidateDefinition.getFirstChild()
20$nameNode$Node nameNode=assignNode.getFirstChild()
23$valueNode$Node valueNode=nameNode.getNext()
27$varNode$Node varNode=new Node(Token.VAR,nameNode)
44$indexOfDot$int indexOfDot=namespace.lastIndexOf('.')
51$parentName$ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot))
Closure-94_buggy
2$val$Node val
2$defines$Set<String> defines
Closure-94_fix
2$val$Node val
2$defines$Set<String> defines
Closure-95_buggy
2$n$Node n
2$parent$Node parent
2$type$JSType type
2$inferred$boolean inferred
6$shouldDeclareOnGlobalThis$boolean shouldDeclareOnGlobalThis=false
22$variableName$String variableName=n.getQualifiedName()
28$scopeToDeclareIn$Scope scopeToDeclareIn=scope
35$oldVar$Var oldVar=scopeToDeclareIn.getVar(variableName)
42$input$CompilerInput input=compiler.getInput(sourceName)
46$globalThis$ObjectType globalThis=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
48$isExtern$boolean isExtern=input.isExtern()
63$fnType$FunctionType fnType=(FunctionType)type
65$superClassCtor$FunctionType superClassCtor=fnType.getSuperClassConstructor()
Closure-95_fix
2$n$Node n
2$parent$Node parent
2$type$JSType type
2$inferred$boolean inferred
6$shouldDeclareOnGlobalThis$boolean shouldDeclareOnGlobalThis=false
22$variableName$String variableName=n.getQualifiedName()
28$scopeToDeclareIn$Scope scopeToDeclareIn=scope
31$globalScope$Scope globalScope=scope.getGlobalScope()
42$oldVar$Var oldVar=scopeToDeclareIn.getVar(variableName)
49$input$CompilerInput input=compiler.getInput(sourceName)
53$globalThis$ObjectType globalThis=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS)
55$isExtern$boolean isExtern=input.isExtern()
70$fnType$FunctionType fnType=(FunctionType)type
72$superClassCtor$FunctionType superClassCtor=fnType.getSuperClassConstructor()
Closure-96_buggy
2$t$NodeTraversal t
2$call$Node call
3$functionType$FunctionType functionType
4$arguments$Iterator<Node> arguments=call.children().iterator()
7$parameters$Iterator<Node> parameters=functionType.getParameters().iterator()
8$ordinal$int ordinal=0
9$parameter$Node parameter=null
10$argument$Node argument=null
23$numArgs$int numArgs=call.getChildCount() - 1
24$minArgs$int minArgs=functionType.getMinArguments()
25$maxArgs$int maxArgs=functionType.getMaxArguments()
Closure-96_fix
2$t$NodeTraversal t
2$call$Node call
3$functionType$FunctionType functionType
4$arguments$Iterator<Node> arguments=call.children().iterator()
7$parameters$Iterator<Node> parameters=functionType.getParameters().iterator()
8$ordinal$int ordinal=0
9$parameter$Node parameter=null
10$argument$Node argument=null
26$numArgs$int numArgs=call.getChildCount() - 1
27$minArgs$int minArgs=functionType.getMinArguments()
28$maxArgs$int maxArgs=functionType.getMaxArguments()
Closure-97_buggy
2$n$Node n
2$left$Node left
2$right$Node right
6$result$double result
7$lval$double lval=left.getDouble()
8$rval$double rval=right.getDouble()
25$lvalInt$int lvalInt=(int)lval
31$rvalInt$int rvalInt=(int)rval
55$newNumber$Node newNumber=Node.newNumber(result)
Closure-97_fix
2$n$Node n
2$left$Node left
2$right$Node right
6$result$double result
7$lval$double lval=left.getDouble()
8$rval$double rval=right.getDouble()
25$lvalInt$int lvalInt=(int)lval
31$rvalInt$int rvalInt=(int)rval
48$lvalLong$long lvalLong=lvalInt & 0xffffffffL
56$newNumber$Node newNumber=Node.newNumber(result)
Closure-99_buggy
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$jsDoc$JSDocInfo jsDoc=getFunctionJsDocInfo(n)
20$pType$int pType=parent.getType()
30$lhs$Node lhs=parent.getFirstChild()
31$rhs$Node rhs=lhs.getNext()
Closure-99_fix
2$t$NodeTraversal t
2$n$Node n
2$parent$Node parent
7$jsDoc$JSDocInfo jsDoc=getFunctionJsDocInfo(n)
21$pType$int pType=parent.getType()
31$lhs$Node lhs=parent.getFirstChild()
32$rhs$Node rhs=lhs.getNext()
49$llhs$Node llhs=lhs.getFirstChild()
Codec-10_buggy
2$txt$String txt
Codec-10_fix
2$txt$String txt
Codec-15_buggy
2$str$final String str
2$index$final int index
4$mappedChar$char mappedChar=this.map(str.charAt(index))
7$hwChar$char hwChar=str.charAt(index - 1)
9$preHWChar$char preHWChar=str.charAt(index - 2)
10$firstCode$char firstCode=this.map(preHWChar)
Codec-15_fix
2$str$final String str
2$index$final int index
4$mappedChar$char mappedChar=this.map(str.charAt(index))
7$i$int i=index - 1
8$prevChar$char prevChar=str.charAt(i)
Codec-17_buggy
2$bytes$final byte[] bytes
Codec-17_fix
2$bytes$final byte[] bytes
Codec-18_buggy
2$cs1$final CharSequence cs1
2$cs2$final CharSequence cs2
Codec-18_fix
2$cs1$final CharSequence cs1
2$cs2$final CharSequence cs2
Codec-2_buggy
2$in$byte[] in
2$inPos$int inPos
2$inAvail$int inAvail
39$i$int i=0
44$b$int b=in[inPos++]
Codec-2_fix
2$in$byte[] in
2$inPos$int inPos
2$inAvail$int inAvail
39$i$int i=0
44$b$int b=in[inPos++]
Codec-3_buggy
2$value$String value
3$result$DoubleMetaphoneResult result
4$index$int index
5$slavoGermanic$boolean slavoGermanic
Codec-3_fix
2$value$String value
3$result$DoubleMetaphoneResult result
4$index$int index
5$slavoGermanic$boolean slavoGermanic
Codec-4_buggy
Codec-4_fix
Codec-5_buggy
2$in$byte[] in
2$inPos$int inPos
2$inAvail$int inAvail
9$i$int i=0
13$b$byte b=in[inPos++]
20$result$int result=DECODE_TABLE[b]
Codec-5_fix
2$in$byte[] in
2$inPos$int inPos
2$inAvail$int inAvail
9$i$int i=0
13$b$byte b=in[inPos++]
20$result$int result=DECODE_TABLE[b]
Codec-6_buggy
2$b$byte b[]
2$offset$int offset
2$len$int len
29$buf$byte[] buf=new byte[doEncode ? 4096 : 8192]
30$c$int c=in.read(buf)
Codec-6_fix
2$b$byte b[]
2$offset$int offset
2$len$int len
12$readLen$int readLen=0
31$buf$byte[] buf=new byte[doEncode ? 4096 : 8192]
32$c$int c=in.read(buf)
Codec-7_buggy
2$binaryData$byte[] binaryData
Codec-7_fix
2$binaryData$byte[] binaryData
Codec-9_buggy
2$binaryData$byte[] binaryData
2$isChunked$boolean isChunked
2$urlSafe$boolean urlSafe
2$maxResultSize$int maxResultSize
7$len$long len=getEncodeLength(binaryData,MIME_CHUNK_SIZE,CHUNK_SEPARATOR)
15$b64$Base64 b64=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
Codec-9_fix
2$binaryData$byte[] binaryData
2$isChunked$boolean isChunked
2$urlSafe$boolean urlSafe
2$maxResultSize$int maxResultSize
7$len$long len=getEncodeLength(binaryData,isChunked ? MIME_CHUNK_SIZE : 0,CHUNK_SEPARATOR)
15$b64$Base64 b64=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe)
Collections-26_buggy
Collections-26_fix
Compress-1_buggy
Compress-1_fix
Compress-10_buggy
2$entriesWithoutUTF8Flag$Map<ZipArchiveEntry,NameAndComment> entriesWithoutUTF8Flag
9$ze$ZipArchiveEntry ze
10$offsetEntry$OffsetEntry offsetEntry=entries.get(ze)
11$offset$long offset=offsetEntry.headerOffset
13$b$byte[] b=new byte[SHORT]
15$fileNameLen$int fileNameLen=ZipShort.getValue(b)
17$extraFieldLen$int extraFieldLen=ZipShort.getValue(b)
18$lenToSkip$int lenToSkip=fileNameLen
20$skipped$int skipped=archive.skipBytes(lenToSkip)
27$localExtraData$byte[] localExtraData=new byte[extraFieldLen]
34$orig$String orig=ze.getName()
35$nc$NameAndComment nc=entriesWithoutUTF8Flag.get(ze)
Compress-10_fix
2$entriesWithoutUTF8Flag$Map<ZipArchiveEntry,NameAndComment> entriesWithoutUTF8Flag
9$origMap$Map<ZipArchiveEntry,OffsetEntry> origMap=new LinkedHashMap<ZipArchiveEntry,OffsetEntry>(entries)
12$ze$ZipArchiveEntry ze
13$offsetEntry$OffsetEntry offsetEntry=origMap.get(ze)
14$offset$long offset=offsetEntry.headerOffset
16$b$byte[] b=new byte[SHORT]
18$fileNameLen$int fileNameLen=ZipShort.getValue(b)
20$extraFieldLen$int extraFieldLen=ZipShort.getValue(b)
21$lenToSkip$int lenToSkip=fileNameLen
23$skipped$int skipped=archive.skipBytes(lenToSkip)
30$localExtraData$byte[] localExtraData=new byte[extraFieldLen]
37$orig$String orig=ze.getName()
38$nc$NameAndComment nc=entriesWithoutUTF8Flag.get(ze)
Compress-11_buggy
2$in$final InputStream in
12$signature$byte[] signature=new byte[12]
15$signatureLength$int signatureLength=in.read(signature)
28$dumpsig$byte[] dumpsig=new byte[32]
37$tarheader$byte[] tarheader=new byte[512]
46$tais$TarArchiveInputStream tais=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
49$e$Exception e
54$e$IOException e
Compress-11_fix
2$in$final InputStream in
12$signature$byte[] signature=new byte[12]
15$signatureLength$int signatureLength=in.read(signature)
28$dumpsig$byte[] dumpsig=new byte[32]
37$tarheader$byte[] tarheader=new byte[512]
47$tais$TarArchiveInputStream tais=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
50$e$Exception e
56$e$IOException e
Compress-12_buggy
8$numToSkip$long numToSkip=entrySize - entryOffset
11$skipped$long skipped=skip(numToSkip)
21$headerBuf$byte[] headerBuf=getRecord()
34$longName$StringBuffer longName=new StringBuffer()
35$buf$byte[] buf=new byte[SMALL_BUFFER_SIZE]
36$length$int length=0
Compress-12_fix
8$numToSkip$long numToSkip=entrySize - entryOffset
11$skipped$long skipped=skip(numToSkip)
21$headerBuf$byte[] headerBuf=getRecord()
30$e$IllegalArgumentException e
31$ioe$IOException ioe=new IOException("Error detected parsing the header")
40$longName$StringBuffer longName=new StringBuffer()
41$buf$byte[] buf=new byte[SMALL_BUFFER_SIZE]
42$length$int length=0
Compress-13_buggy
2$name$String name
Compress-13_fix
2$name$String name
Compress-14_buggy
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
11$allNUL$boolean allNUL=true
12$i$int i=start
32$trailer$byte trailer
47$currentByte$byte currentByte=buffer[start]
Compress-14_fix
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
25$trailer$byte trailer
40$currentByte$byte currentByte=buffer[start]
Compress-15_buggy
2$obj$Object obj
9$other$ZipArchiveEntry other=(ZipArchiveEntry)obj
10$myName$String myName=getName()
11$otherName$String otherName=other.getName()
19$myComment$String myComment=getComment()
20$otherComment$String otherComment=other.getComment()
Compress-15_fix
2$obj$Object obj
9$other$ZipArchiveEntry other=(ZipArchiveEntry)obj
10$myName$String myName=getName()
11$otherName$String otherName=other.getName()
19$myComment$String myComment=getComment()
20$otherComment$String otherComment=other.getComment()
Compress-16_buggy
2$in$final InputStream in
12$signature$byte[] signature=new byte[12]
15$signatureLength$int signatureLength=in.read(signature)
28$dumpsig$byte[] dumpsig=new byte[32]
37$tarheader$byte[] tarheader=new byte[512]
47$tais$TarArchiveInputStream tais=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
51$e$Exception e
58$e$IOException e
Compress-16_fix
2$in$final InputStream in
12$signature$byte[] signature=new byte[12]
15$signatureLength$int signatureLength=in.read(signature)
28$dumpsig$byte[] dumpsig=new byte[32]
37$tarheader$byte[] tarheader=new byte[512]
47$tais$TarArchiveInputStream tais=new TarArchiveInputStream(new ByteArrayInputStream(tarheader))
52$e$Exception e
59$e$IOException e
Compress-17_buggy
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
25$trailer$byte trailer
40$currentByte$byte currentByte=buffer[start]
Compress-17_fix
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
25$trailer$byte trailer
41$currentByte$byte currentByte=buffer[start]
Compress-18_buggy
2$entryName$String entryName
3$headers$Map<String,String> headers
4$name$String name="./PaxHeaders.X/" + stripTo7Bits(entryName)
10$pex$TarArchiveEntry pex=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
13$w$StringWriter w=new StringWriter()
14$h$Map.Entry<String,String> h
15$key$String key=h.getKey()
16$value$String value=h.getValue()
17$len$int len=key.length() + value.length() + 3+ 2
20$line$String line=len + " " + key+ "="+ value+ "\n"
21$actualLength$int actualLength=line.getBytes(CharsetNames.UTF_8).length
34$data$byte[] data=w.toString().getBytes(CharsetNames.UTF_8)
Compress-18_fix
2$entryName$String entryName
3$headers$Map<String,String> headers
4$name$String name="./PaxHeaders.X/" + stripTo7Bits(entryName)
13$pex$TarArchiveEntry pex=new TarArchiveEntry(name,TarConstants.LF_PAX_EXTENDED_HEADER_LC)
16$w$StringWriter w=new StringWriter()
17$h$Map.Entry<String,String> h
18$key$String key=h.getKey()
19$value$String value=h.getValue()
20$len$int len=key.length() + value.length() + 3+ 2
23$line$String line=len + " " + key+ "="+ value+ "\n"
24$actualLength$int actualLength=line.getBytes(CharsetNames.UTF_8).length
37$data$byte[] data=w.toString().getBytes(CharsetNames.UTF_8)
Compress-19_buggy
2$hasUncompressedSize$boolean hasUncompressedSize
3$hasCompressedSize$boolean hasCompressedSize
4$hasRelativeHeaderOffset$boolean hasRelativeHeaderOffset
5$hasDiskStart$boolean hasDiskStart
8$expectedLength$int expectedLength=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20$offset$int offset=0
Compress-19_fix
2$hasUncompressedSize$boolean hasUncompressedSize
3$hasCompressedSize$boolean hasCompressedSize
4$hasRelativeHeaderOffset$boolean hasRelativeHeaderOffset
5$hasDiskStart$boolean hasDiskStart
8$expectedLength$int expectedLength=(hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0)+ (hasDiskStart ? WORD : 0)
20$offset$int offset=0
Compress-21_buggy
2$header$final DataOutput header
2$bits$final BitSet bits
2$length$final int length
3$cache$int cache=0
4$shift$int shift=7
5$i$int i=0
Compress-21_fix
2$header$final DataOutput header
2$bits$final BitSet bits
2$length$final int length
3$cache$int cache=0
4$shift$int shift=7
5$i$int i=0
Compress-23_buggy
2$in$final InputStream in
2$coder$final Coder coder
3$password$byte[] password
4$propsByte$byte propsByte=coder.properties[0]
5$dictSize$long dictSize=coder.properties[1]
6$i$int i=1
Compress-23_fix
2$in$final InputStream in
2$coder$final Coder coder
3$password$byte[] password
4$propsByte$byte propsByte=coder.properties[0]
5$dictSize$long dictSize=coder.properties[1]
6$i$int i=1
Compress-24_buggy
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
28$trailer$byte trailer=buffer[end - 1]
42$currentByte$byte currentByte=buffer[start]
Compress-24_fix
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
28$trailer$byte trailer=buffer[end - 1]
39$currentByte$byte currentByte=buffer[start]
Compress-25_buggy
2$inputStream$InputStream inputStream
3$encoding$String encoding
4$useUnicodeExtraFields$boolean useUnicodeExtraFields
5$allowStoredEntriesWithDataDescriptor$boolean allowStoredEntriesWithDataDescriptor
Compress-25_fix
2$inputStream$InputStream inputStream
3$encoding$String encoding
4$useUnicodeExtraFields$boolean useUnicodeExtraFields
5$allowStoredEntriesWithDataDescriptor$boolean allowStoredEntriesWithDataDescriptor
Compress-26_buggy
2$input$InputStream input
2$numToSkip$long numToSkip
3$available$long available=numToSkip
5$skipped$long skipped=input.skip(numToSkip)
Compress-26_fix
2$input$InputStream input
2$numToSkip$long numToSkip
3$available$long available=numToSkip
5$skipped$long skipped=input.skip(numToSkip)
13$skipBuf$byte[] skipBuf=new byte[SKIP_BUF_SIZE]
15$read$int read=readFully(input,skipBuf,0,(int)Math.min(numToSkip,SKIP_BUF_SIZE))
Compress-27_buggy
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
28$trailer$byte trailer=buffer[end - 1]
39$currentByte$byte currentByte=buffer[start]
Compress-27_fix
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
28$trailer$byte trailer=buffer[end - 1]
35$currentByte$byte currentByte=buffer[start]
Compress-28_buggy
2$buf$byte[] buf
2$offset$int offset
2$numToRead$int numToRead
3$totalRead$int totalRead=0
Compress-28_fix
2$buf$byte[] buf
2$offset$int offset
2$numToRead$int numToRead
3$totalRead$int totalRead=0
Compress-30_buggy
2$dest$final byte[] dest
2$offs$final int offs
2$len$final int len
18$hi$int hi=offs + len
19$destOffs$int destOffs=offs
20$b$int b
26$c$int c=(destOffs == offs) ? -1 : (destOffs - offs)
Compress-30_fix
2$dest$final byte[] dest
2$offs$final int offs
2$len$final int len
21$hi$int hi=offs + len
22$destOffs$int destOffs=offs
23$b$int b
29$c$int c=(destOffs == offs) ? -1 : (destOffs - offs)
Compress-31_buggy
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
28$trailer$byte trailer=buffer[end - 1]
35$currentByte$byte currentByte=buffer[start]
Compress-31_fix
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
28$trailer$byte trailer=buffer[end - 1]
35$currentByte$byte currentByte=buffer[start]
Compress-32_buggy
2$headers$Map<String,String> headers
14$ent$Entry<String,String> ent
15$key$String key=ent.getKey()
16$val$String val=ent.getValue()
Compress-32_fix
2$headers$Map<String,String> headers
14$ent$Entry<String,String> ent
15$key$String key=ent.getKey()
16$val$String val=ent.getValue()
Compress-35_buggy
2$header$byte[] header
3$storedSum$long storedSum=0
4$unsignedSum$long unsignedSum=0
5$signedSum$long signedSum=0
7$digits$int digits=0
8$i$int i=0
9$b$byte b=header[i]
Compress-35_fix
2$header$byte[] header
3$storedSum$long storedSum=parseOctal(header,CHKSUM_OFFSET,CHKSUMLEN)
4$unsignedSum$long unsignedSum=0
5$signedSum$long signedSum=0
7$digits$int digits=0
8$i$int i=0
9$b$byte b=header[i]
Compress-36_buggy
11$stream$InputStream stream=deferredBlockStreams.remove(0)
Compress-36_fix
14$stream$InputStream stream=deferredBlockStreams.remove(0)
Compress-37_buggy
2$i$final InputStream i
4$headers$Map<String,String> headers=new HashMap<String,String>(globalPaxHeaders)
7$ch$int ch
8$len$int len=0
9$read$int read=0
14$coll$ByteArrayOutputStream coll=new ByteArrayOutputStream()
18$keyword$String keyword=coll.toString(CharsetNames.UTF_8)
20$restLen$int restLen=len - read
24$rest$byte[] rest=new byte[restLen]
25$got$int got=IOUtils.readFully(i,rest)
34$value$String value=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
Compress-37_fix
2$i$final InputStream i
4$headers$Map<String,String> headers=new HashMap<String,String>(globalPaxHeaders)
7$ch$int ch
8$len$int len=0
9$read$int read=0
16$coll$ByteArrayOutputStream coll=new ByteArrayOutputStream()
20$keyword$String keyword=coll.toString(CharsetNames.UTF_8)
22$restLen$int restLen=len - read
26$rest$byte[] rest=new byte[restLen]
27$got$int got=IOUtils.readFully(i,rest)
36$value$String value=new String(rest,0,restLen - 1,CharsetNames.UTF_8)
Compress-38_buggy
Compress-38_fix
Compress-40_buggy
2$count$final int count
7$nextByte$long nextByte=in.read()
21$bitsOut$long bitsOut
Compress-40_fix
2$count$final int count
7$nextByte$long nextByte=in.read()
19$overflowBits$int overflowBits=0
20$overflow$long overflow=0l
23$bitsToAddCount$int bitsToAddCount=count - bitsCachedSize
25$nextByte$long nextByte=in.read()
30$bitsToAdd$long bitsToAdd=nextByte & MASKS[bitsToAddCount]
35$bitsToAdd$long bitsToAdd=(nextByte >>> (overflowBits)) & MASKS[bitsToAddCount]
42$bitsOut$long bitsOut
Compress-41_buggy
3$firstEntry$boolean firstEntry=true
22$e$final EOFException e
26$sig$ZipLong sig=new ZipLong(LFH_BUF)
35$off$int off=WORD
38$versionMadeBy$int versionMadeBy=ZipShort.getValue(LFH_BUF,off)
42$gpFlag$GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(LFH_BUF,off)
43$hasUTF8Flag$boolean hasUTF8Flag=gpFlag.usesUTF8ForNames()
44$entryEncoding$ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
53$time$long time=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
57$size$ZipLong size=null
57$cSize$ZipLong cSize=null
71$fileNameLen$int fileNameLen=ZipShort.getValue(LFH_BUF,off)
75$extraLen$int extraLen=ZipShort.getValue(LFH_BUF,off)
78$fileName$byte[] fileName=new byte[fileNameLen]
82$extraData$byte[] extraData=new byte[extraLen]
Compress-41_fix
3$firstEntry$boolean firstEntry=true
22$e$final EOFException e
26$sig$ZipLong sig=new ZipLong(LFH_BUF)
36$off$int off=WORD
39$versionMadeBy$int versionMadeBy=ZipShort.getValue(LFH_BUF,off)
43$gpFlag$GeneralPurposeBit gpFlag=GeneralPurposeBit.parse(LFH_BUF,off)
44$hasUTF8Flag$boolean hasUTF8Flag=gpFlag.usesUTF8ForNames()
45$entryEncoding$ZipEncoding entryEncoding=hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding
54$time$long time=ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF,off))
58$size$ZipLong size=null
58$cSize$ZipLong cSize=null
72$fileNameLen$int fileNameLen=ZipShort.getValue(LFH_BUF,off)
76$extraLen$int extraLen=ZipShort.getValue(LFH_BUF,off)
79$fileName$byte[] fileName=new byte[fileNameLen]
83$extraData$byte[] extraData=new byte[extraLen]
Compress-44_buggy
2$checksum$final Checksum checksum
2$in$final InputStream in
Compress-44_fix
2$checksum$final Checksum checksum
2$in$final InputStream in
Compress-45_buggy
3$value$final long value
3$buf$final byte[] buf
3$offset$final int offset
3$length$final int length
6$maxAsOctalChar$long maxAsOctalChar=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8$negative$boolean negative=value < 0
Compress-45_fix
3$value$final long value
3$buf$final byte[] buf
3$offset$final int offset
3$length$final int length
6$maxAsOctalChar$long maxAsOctalChar=length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE
8$negative$boolean negative=value < 0
Compress-46_buggy
2$l$long l
3$TWO_TO_32$long TWO_TO_32=0x100000000L
Compress-46_fix
2$l$long l
Compress-5_buggy
2$buffer$byte[] buffer
2$start$int start
2$length$int length
14$csize$int csize=(int)current.getSize()
26$toRead$int toRead=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44$read$int read=0
47$e$DataFormatException e
Compress-5_fix
2$buffer$byte[] buffer
2$start$int start
2$length$int length
14$csize$int csize=(int)current.getSize()
26$toRead$int toRead=length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length
44$read$int read=0
47$e$DataFormatException e
Compress-7_buggy
2$buffer$byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$StringBuffer result=new StringBuffer(length)
4$end$int end=offset + length
6$i$int i=offset
Compress-7_fix
2$buffer$byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$StringBuffer result=new StringBuffer(length)
4$end$int end=offset + length
6$i$int i=offset
7$b$byte b=buffer[i]
Compress-8_buggy
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$stillPadding$boolean stillPadding=true
5$end$int end=offset + length
6$start$int start=offset
8$i$int i=start
9$currentByte$byte currentByte=buffer[i]
Compress-8_fix
2$buffer$final byte[] buffer
2$offset$final int offset
2$length$final int length
3$result$long result=0
4$end$int end=offset + length
5$start$int start=offset
11$allNUL$boolean allNUL=true
12$i$int i=start
32$trailer$byte trailer
47$currentByte$byte currentByte=buffer[start]
Csv-1_buggy
3$current$int current=super.read()
Csv-1_fix
3$current$int current=super.read()
Csv-10_buggy
2$out$final Appendable out
2$format$final CSVFormat format
Csv-10_fix
2$out$final Appendable out
2$format$final CSVFormat format
Csv-11_buggy
3$hdrMap$Map<String,Integer> hdrMap=null
4$formatHeader$String[] formatHeader=this.format.getHeader()
8$headerRecord$String[] headerRecord=null
11$nextRecord$CSVRecord nextRecord=this.nextRecord()
24$i$int i=0
25$header$String header=headerRecord[i]
26$containsHeader$boolean containsHeader=hdrMap.containsKey(header)
27$emptyHeader$boolean emptyHeader=header.trim().isEmpty()
Csv-11_fix
3$hdrMap$Map<String,Integer> hdrMap=null
4$formatHeader$String[] formatHeader=this.format.getHeader()
8$headerRecord$String[] headerRecord=null
11$nextRecord$CSVRecord nextRecord=this.nextRecord()
24$i$int i=0
25$header$String header=headerRecord[i]
26$containsHeader$boolean containsHeader=hdrMap.containsKey(header)
27$emptyHeader$boolean emptyHeader=header == null || header.trim().isEmpty()
Csv-14_buggy
2$object$final Object object
2$value$final CharSequence value
2$offset$final int offset
2$len$final int len
3$out$final Appendable out
3$newRecord$final boolean newRecord
4$quote$boolean quote=false
5$start$int start=offset
6$pos$int pos=offset
7$end$int end=offset + len
9$delimChar$char delimChar=getDelimiter()
10$quoteChar$char quoteChar=getQuoteCharacter().charValue()
12$quoteModePolicy$QuoteMode quoteModePolicy=getQuoteMode()
37$c$char c=value.charAt(pos)
91$c$char c=value.charAt(pos)
Csv-14_fix
2$object$final Object object
2$value$final CharSequence value
2$offset$final int offset
2$len$final int len
3$out$final Appendable out
3$newRecord$final boolean newRecord
4$quote$boolean quote=false
5$start$int start=offset
6$pos$int pos=offset
7$end$int end=offset + len
9$delimChar$char delimChar=getDelimiter()
10$quoteChar$char quoteChar=getQuoteCharacter().charValue()
12$quoteModePolicy$QuoteMode quoteModePolicy=getQuoteMode()
37$c$char c=value.charAt(pos)
91$c$char c=value.charAt(pos)
Csv-15_buggy
2$object$final Object object
2$value$final CharSequence value
2$offset$final int offset
2$len$final int len
3$out$final Appendable out
3$newRecord$final boolean newRecord
4$quote$boolean quote=false
5$start$int start=offset
6$pos$int pos=offset
7$end$int end=offset + len
9$delimChar$char delimChar=getDelimiter()
10$quoteChar$char quoteChar=getQuoteCharacter().charValue()
12$quoteModePolicy$QuoteMode quoteModePolicy=getQuoteMode()
38$c$char c=value.charAt(pos)
91$c$char c=value.charAt(pos)
Csv-15_fix
2$object$final Object object
2$value$final CharSequence value
2$offset$final int offset
2$len$final int len
3$out$final Appendable out
3$newRecord$final boolean newRecord
4$quote$boolean quote=false
5$start$int start=offset
6$pos$int pos=offset
7$end$int end=offset + len
9$delimChar$char delimChar=getDelimiter()
10$quoteChar$char quoteChar=getQuoteCharacter().charValue()
12$quoteModePolicy$QuoteMode quoteModePolicy=getQuoteMode()
38$c$char c=value.charAt(pos)
89$c$char c=value.charAt(pos)
Csv-2_buggy
2$name$final String name
7$index$Integer index=mapping.get(name)
Csv-2_fix
2$name$final String name
7$index$Integer index=mapping.get(name)
10$e$ArrayIndexOutOfBoundsException e
Csv-3_buggy
4$c$int c=in.read()
Csv-3_fix
4$c$int c=in.read()
Csv-4_buggy
Csv-4_fix
Csv-5_buggy
3$recordSeparator$String recordSeparator=format.getRecordSeparator()
Csv-5_fix
3$recordSeparator$String recordSeparator=format.getRecordSeparator()
Csv-6_buggy
2$map$final M map
3$entry$final Entry<String,Integer> entry
4$col$int col=entry.getValue().intValue()
Csv-6_fix
2$map$final M map
3$entry$final Entry<String,Integer> entry
4$col$int col=entry.getValue().intValue()
Csv-9_buggy
2$map$final M map
3$entry$final Entry<String,Integer> entry
4$col$int col=entry.getValue().intValue()
Csv-9_fix
2$map$final M map
6$entry$final Entry<String,Integer> entry
7$col$int col=entry.getValue().intValue()
Gson-11_buggy
2$in$JsonReader in
3$jsonToken$JsonToken jsonToken=in.peek()
Gson-11_fix
2$in$JsonReader in
3$jsonToken$JsonToken jsonToken=in.peek()
Gson-12_buggy
Gson-12_fix
Gson-13_buggy
4$buffer$char[] buffer=this.buffer
5$p$int p=pos
6$l$int l=limit
8$value$long value=0
9$negative$boolean negative=false
10$fitsInLong$boolean fitsInLong=true
11$last$int last=NUMBER_CHAR_NONE
13$i$int i=0
30$c$char c=buffer[p + i]
79$newValue$long newValue=value * 10 - (c - '0')
Gson-13_fix
4$buffer$char[] buffer=this.buffer
5$p$int p=pos
6$l$int l=limit
8$value$long value=0
9$negative$boolean negative=false
10$fitsInLong$boolean fitsInLong=true
11$last$int last=NUMBER_CHAR_NONE
13$i$int i=0
30$c$char c=buffer[p + i]
79$newValue$long newValue=value * 10 - (c - '0')
Gson-15_buggy
2$value$double value
Gson-15_fix
2$value$double value
Gson-16_buggy
2$context$Type context
2$contextRawType$Class<?> contextRawType
2$toResolve$Type toResolve
3$visitedTypeVariables$Collection<TypeVariable> visitedTypeVariables
7$typeVariable$TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve
15$original$Class<?> original=(Class<?>)toResolve
16$componentType$Type componentType=original.getComponentType()
17$newComponentType$Type newComponentType=resolve(context,contextRawType,componentType,visitedTypeVariables)
23$original$GenericArrayType original=(GenericArrayType)toResolve
24$componentType$Type componentType=original.getGenericComponentType()
25$newComponentType$Type newComponentType=resolve(context,contextRawType,componentType,visitedTypeVariables)
31$original$ParameterizedType original=(ParameterizedType)toResolve
32$ownerType$Type ownerType=original.getOwnerType()
33$newOwnerType$Type newOwnerType=resolve(context,contextRawType,ownerType,visitedTypeVariables)
34$changed$boolean changed=newOwnerType != ownerType
36$args$Type[] args=original.getActualTypeArguments()
37$t$int t=0
37$length$int length=args.length
38$resolvedTypeArgument$Type resolvedTypeArgument=resolve(context,contextRawType,args[t],visitedTypeVariables)
53$original$WildcardType original=(WildcardType)toResolve
54$originalLowerBound$Type[] originalLowerBound=original.getLowerBounds()
55$originalUpperBound$Type[] originalUpperBound=original.getUpperBounds()
58$lowerBound$Type lowerBound=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
63$upperBound$Type upperBound=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
Gson-16_fix
2$context$Type context
2$contextRawType$Class<?> contextRawType
2$toResolve$Type toResolve
3$visitedTypeVariables$Collection<TypeVariable> visitedTypeVariables
7$typeVariable$TypeVariable<?> typeVariable=(TypeVariable<?>)toResolve
20$original$Class<?> original=(Class<?>)toResolve
21$componentType$Type componentType=original.getComponentType()
22$newComponentType$Type newComponentType=resolve(context,contextRawType,componentType,visitedTypeVariables)
28$original$GenericArrayType original=(GenericArrayType)toResolve
29$componentType$Type componentType=original.getGenericComponentType()
30$newComponentType$Type newComponentType=resolve(context,contextRawType,componentType,visitedTypeVariables)
36$original$ParameterizedType original=(ParameterizedType)toResolve
37$ownerType$Type ownerType=original.getOwnerType()
38$newOwnerType$Type newOwnerType=resolve(context,contextRawType,ownerType,visitedTypeVariables)
39$changed$boolean changed=newOwnerType != ownerType
41$args$Type[] args=original.getActualTypeArguments()
42$t$int t=0
42$length$int length=args.length
43$resolvedTypeArgument$Type resolvedTypeArgument=resolve(context,contextRawType,args[t],visitedTypeVariables)
58$original$WildcardType original=(WildcardType)toResolve
59$originalLowerBound$Type[] originalLowerBound=original.getLowerBounds()
60$originalUpperBound$Type[] originalUpperBound=original.getUpperBounds()
63$lowerBound$Type lowerBound=resolve(context,contextRawType,originalLowerBound[0],visitedTypeVariables)
68$upperBound$Type upperBound=resolve(context,contextRawType,originalUpperBound[0],visitedTypeVariables)
Gson-17_buggy
2$in$JsonReader in
6$date$Date date=deserializeToDate(in.nextString())
Gson-17_fix
2$in$JsonReader in
7$date$Date date=deserializeToDate(in.nextString())
Gson-18_buggy
2$context$Type context
2$contextRawType$Class<?> contextRawType
2$supertype$Class<?> supertype
Gson-18_fix
2$context$Type context
2$contextRawType$Class<?> contextRawType
2$supertype$Class<?> supertype
Gson-5_buggy
2$date$String date
2$pos$ParsePosition pos
3$fail$Exception fail=null
5$offset$int offset=pos.getIndex()
8$year$int year=parseInt(date,offset,offset+=4)
14$month$int month=parseInt(date,offset,offset+=2)
20$day$int day=parseInt(date,offset,offset+=2)
22$hour$int hour=0
23$minutes$int minutes=0
24$seconds$int seconds=0
25$milliseconds$int milliseconds=0
28$hasT$boolean hasT=checkOffset(date,offset,'T')
31$calendar$Calendar calendar=new GregorianCalendar(year,month - 1,day)
51$c$char c=date.charAt(offset)
58$endOffset$int endOffset=indexOfNonDigit(date,offset + 1)
59$parseEndOffset$int parseEndOffset=Math.min(endOffset,offset + 3)
60$fraction$int fraction=parseInt(date,offset,parseEndOffset)
83$timezone$TimeZone timezone=null
84$timezoneIndicator$char timezoneIndicator=date.charAt(offset)
90$timezoneOffset$String timezoneOffset=date.substring(offset)
103$timezoneId$String timezoneId="GMT" + timezoneOffset
108$act$String act=timezone.getID()
115$cleaned$String cleaned=act.replace(":","")
126$calendar$Calendar calendar=new GregorianCalendar(timezone)
140$e$IndexOutOfBoundsException e
142$e$NumberFormatException e
144$e$IllegalArgumentException e
147$input$String input=(date == null) ? null : ('"' + date + "'")
148$msg$String msg=fail.getMessage()
152$ex$ParseException ex=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
Gson-5_fix
2$date$String date
2$pos$ParsePosition pos
3$fail$Exception fail=null
5$offset$int offset=pos.getIndex()
8$year$int year=parseInt(date,offset,offset+=4)
14$month$int month=parseInt(date,offset,offset+=2)
20$day$int day=parseInt(date,offset,offset+=2)
22$hour$int hour=0
23$minutes$int minutes=0
24$seconds$int seconds=0
25$milliseconds$int milliseconds=0
28$hasT$boolean hasT=checkOffset(date,offset,'T')
31$calendar$Calendar calendar=new GregorianCalendar(year,month - 1,day)
51$c$char c=date.charAt(offset)
58$endOffset$int endOffset=indexOfNonDigit(date,offset + 1)
59$parseEndOffset$int parseEndOffset=Math.min(endOffset,offset + 3)
60$fraction$int fraction=parseInt(date,offset,parseEndOffset)
83$timezone$TimeZone timezone=null
84$timezoneIndicator$char timezoneIndicator=date.charAt(offset)
90$timezoneOffset$String timezoneOffset=date.substring(offset)
104$timezoneId$String timezoneId="GMT" + timezoneOffset
109$act$String act=timezone.getID()
116$cleaned$String cleaned=act.replace(":","")
127$calendar$Calendar calendar=new GregorianCalendar(timezone)
141$e$IndexOutOfBoundsException e
143$e$NumberFormatException e
145$e$IllegalArgumentException e
148$input$String input=(date == null) ? null : ('"' + date + "'")
149$msg$String msg=fail.getMessage()
153$ex$ParseException ex=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex())
Gson-6_buggy
2$constructorConstructor$ConstructorConstructor constructorConstructor
2$gson$Gson gson
3$fieldType$TypeToken<?> fieldType
3$annotation$JsonAdapter annotation
4$value$Class<?> value=annotation.value()
5$typeAdapter$TypeAdapter<?> typeAdapter
7$typeAdapterClass$Class<TypeAdapter<?>> typeAdapterClass=(Class<TypeAdapter<?>>)value
10$typeAdapterFactory$Class<TypeAdapterFactory> typeAdapterFactory=(Class<TypeAdapterFactory>)value
Gson-6_fix
2$constructorConstructor$ConstructorConstructor constructorConstructor
2$gson$Gson gson
3$fieldType$TypeToken<?> fieldType
3$annotation$JsonAdapter annotation
4$value$Class<?> value=annotation.value()
5$typeAdapter$TypeAdapter<?> typeAdapter
7$typeAdapterClass$Class<TypeAdapter<?>> typeAdapterClass=(Class<TypeAdapter<?>>)value
10$typeAdapterFactory$Class<TypeAdapterFactory> typeAdapterFactory=(Class<TypeAdapterFactory>)value
JacksonCore-11_buggy
JacksonCore-11_fix
JacksonCore-15_buggy
11$ctxt$TokenFilterContext ctxt=_exposedContext
15$t$JsonToken t=ctxt.nextTokenToRead()
52$t$JsonToken t=delegate.nextToken()
59$f$TokenFilter f
138$returnEnd$boolean returnEnd=_headContext.isStartHandled()
153$name$String name=delegate.getCurrentName()
JacksonCore-15_fix
20$ctxt$TokenFilterContext ctxt=_exposedContext
24$t$JsonToken t=ctxt.nextTokenToRead()
61$t$JsonToken t=delegate.nextToken()
68$f$TokenFilter f
147$returnEnd$boolean returnEnd=_headContext.isStartHandled()
162$name$String name=delegate.getCurrentName()
JacksonCore-20_buggy
2$object$Object object
JacksonCore-20_fix
2$object$Object object
JacksonCore-21_buggy
26$ctxt$TokenFilterContext ctxt=_exposedContext
30$t$JsonToken t=ctxt.nextTokenToRead()
67$t$JsonToken t=delegate.nextToken()
75$f$TokenFilter f
154$returnEnd$boolean returnEnd=_headContext.isStartHandled()
169$name$String name=delegate.getCurrentName()
JacksonCore-21_fix
28$ctxt$TokenFilterContext ctxt=_exposedContext
32$t$JsonToken t=ctxt.nextTokenToRead()
69$t$JsonToken t=delegate.nextToken()
77$f$TokenFilter f
156$returnEnd$boolean returnEnd=_headContext.isStartHandled()
171$name$String name=delegate.getCurrentName()
JacksonCore-23_buggy
JacksonCore-23_fix
JacksonCore-25_buggy
2$startPtr$int startPtr
2$hash$int hash
2$codes$int[] codes
5$outBuf$char[] outBuf=_textBuffer.getCurrentSegment()
6$outPtr$int outPtr=_textBuffer.getCurrentSegmentSize()
7$maxCode$int maxCode=codes.length
15$c$char c=_inputBuffer[_inputPtr]
16$i$int i=(int)c
37$tb$TextBuffer tb=_textBuffer
38$buf$char[] buf=tb.getTextBuffer()
39$start$int start=tb.getTextOffset()
40$len$int len=tb.size()
JacksonCore-25_fix
2$startPtr$int startPtr
2$hash$int hash
2$codes$int[] codes
5$outBuf$char[] outBuf=_textBuffer.getCurrentSegment()
6$outPtr$int outPtr=_textBuffer.getCurrentSegmentSize()
7$maxCode$int maxCode=codes.length
15$c$char c=_inputBuffer[_inputPtr]
16$i$int i=(int)c
37$tb$TextBuffer tb=_textBuffer
38$buf$char[] buf=tb.getTextBuffer()
39$start$int start=tb.getTextOffset()
40$len$int len=tb.size()
JacksonCore-26_buggy
2$buf$byte[] buf
2$start$int start
2$end$int end
JacksonCore-26_fix
2$buf$byte[] buf
2$start$int start
2$end$int end
JacksonCore-3_buggy
2$ctxt$IOContext ctxt
2$features$int features
2$in$InputStream in
3$codec$ObjectCodec codec
3$sym$BytesToNameCanonicalizer sym
4$inputBuffer$byte[] inputBuffer
4$start$int start
4$end$int end
5$bufferRecyclable$boolean bufferRecyclable
JacksonCore-3_fix
2$ctxt$IOContext ctxt
2$features$int features
2$in$InputStream in
3$codec$ObjectCodec codec
3$sym$BytesToNameCanonicalizer sym
4$inputBuffer$byte[] inputBuffer
4$start$int start
4$end$int end
5$bufferRecyclable$boolean bufferRecyclable
JacksonCore-4_buggy
4$curr$char[] curr=_currentSegment
6$len$int len=curr.length
8$newLen$int newLen=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1))
JacksonCore-4_fix
4$curr$char[] curr=_currentSegment
6$len$int len=curr.length
7$newLen$int newLen=len + (len >> 1)
JacksonCore-5_buggy
2$str$String str
3$len$int len=str.length()
9$i$int i=0
10$c$char c=str.charAt(i++)
16$l$long l=NumberInput.parseLong(str)
JacksonCore-5_fix
2$str$String str
3$len$int len=str.length()
9$i$int i=0
10$c$char c=str.charAt(i)
16$l$long l=NumberInput.parseLong(str)
JacksonCore-6_buggy
2$str$String str
3$len$int len=str.length()
10$i$int i=0
11$c$char c=str.charAt(i)
17$l$long l=NumberInput.parseLong(str)
JacksonCore-6_fix
2$str$String str
3$len$int len=str.length()
10$c$char c=str.charAt(0)
17$i$int i=1
24$l$long l=NumberInput.parseLong(str)
JacksonCore-7_buggy
12$ix$int ix=_index
JacksonCore-7_fix
15$ix$int ix=_index
JacksonCore-8_buggy
JacksonCore-8_fix
JacksonDatabind-1_buggy
2$bean$Object bean
2$jgen$JsonGenerator jgen
2$prov$SerializerProvider prov
5$value$Object value=get(bean)
14$ser$JsonSerializer<Object> ser=_serializer
16$cls$Class<?> cls=value.getClass()
17$map$PropertySerializerMap map=_dynamicSerializers
JacksonDatabind-1_fix
2$bean$Object bean
2$jgen$JsonGenerator jgen
2$prov$SerializerProvider prov
5$value$Object value=get(bean)
15$ser$JsonSerializer<Object> ser=_serializer
17$cls$Class<?> cls=value.getClass()
18$map$PropertySerializerMap map=_dynamicSerializers
JacksonDatabind-100_buggy
2$b64variant$Base64Variant b64variant
6$n$JsonNode n=currentNode()
10$data$byte[] data=n.binaryValue()
15$ob$Object ob=((POJONode)n).getPojo()
JacksonDatabind-100_fix
2$b64variant$Base64Variant b64variant
6$n$JsonNode n=currentNode()
JacksonDatabind-101_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
9$creator$PropertyBasedCreator creator=_propertyBasedCreator
10$buffer$PropertyValueBuffer buffer=creator.startBuilding(p,ctxt,_objectIdReader)
12$tokens$TokenBuffer tokens=new TokenBuffer(p,ctxt)
15$t$JsonToken t=p.getCurrentToken()
17$propName$String propName=p.getCurrentName()
20$creatorProp$SettableBeanProperty creatorProp=creator.findCreatorProperty(propName)
26$bean$Object bean
29$e$Exception e
60$prop$SettableBeanProperty prop=_beanProperties.find(propName)
80$b2$TokenBuffer b2=TokenBuffer.asCopyOfValue(p)
86$e$Exception e
94$bean$Object bean
97$e$Exception e
JacksonDatabind-101_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
9$creator$PropertyBasedCreator creator=_propertyBasedCreator
10$buffer$PropertyValueBuffer buffer=creator.startBuilding(p,ctxt,_objectIdReader)
12$tokens$TokenBuffer tokens=new TokenBuffer(p,ctxt)
15$t$JsonToken t=p.getCurrentToken()
17$propName$String propName=p.getCurrentName()
20$creatorProp$SettableBeanProperty creatorProp=creator.findCreatorProperty(propName)
26$bean$Object bean
29$e$Exception e
64$prop$SettableBeanProperty prop=_beanProperties.find(propName)
84$b2$TokenBuffer b2=TokenBuffer.asCopyOfValue(p)
90$e$Exception e
98$bean$Object bean
101$e$Exception e
JacksonDatabind-102_buggy
2$serializers$SerializerProvider serializers
3$property$BeanProperty property
10$format$JsonFormat.Value format=findFormatOverrides(serializers,property,handledType())
15$shape$JsonFormat.Shape shape=format.getShape()
23$loc$Locale loc=format.hasLocale() ? format.getLocale() : serializers.getLocale()
26$df$SimpleDateFormat df=new SimpleDateFormat(format.getPattern(),loc)
27$tz$TimeZone tz=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
34$hasLocale$boolean hasLocale=format.hasLocale()
35$hasTZ$boolean hasTZ=format.hasTimeZone()
36$asString$boolean asString=(shape == JsonFormat.Shape.STRING)
42$df0$DateFormat df0=serializers.getConfig().getDateFormat()
45$std$StdDateFormat std=(StdDateFormat)df0
63$df$SimpleDateFormat df=(SimpleDateFormat)df0
70$newTz$TimeZone newTz=format.getTimeZone()
71$changeTZ$boolean changeTZ=(newTz != null) && !newTz.equals(df.getTimeZone())
JacksonDatabind-102_fix
2$serializers$SerializerProvider serializers
3$property$BeanProperty property
7$format$JsonFormat.Value format=findFormatOverrides(serializers,property,handledType())
12$shape$JsonFormat.Shape shape=format.getShape()
20$loc$Locale loc=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23$df$SimpleDateFormat df=new SimpleDateFormat(format.getPattern(),loc)
24$tz$TimeZone tz=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
31$hasLocale$boolean hasLocale=format.hasLocale()
32$hasTZ$boolean hasTZ=format.hasTimeZone()
33$asString$boolean asString=(shape == JsonFormat.Shape.STRING)
39$df0$DateFormat df0=serializers.getConfig().getDateFormat()
42$std$StdDateFormat std=(StdDateFormat)df0
60$df$SimpleDateFormat df=(SimpleDateFormat)df0
67$newTz$TimeZone newTz=format.getTimeZone()
68$changeTZ$boolean changeTZ=(newTz != null) && !newTz.equals(df.getTimeZone())
JacksonDatabind-107_buggy
2$ctxt$DeserializationContext ctxt
3$typeId$String typeId
5$deser$JsonDeserializer<Object> deser=_deserializers.get(typeId)
12$type$JavaType type=_idResolver.typeFromId(ctxt,typeId)
18$actual$JavaType actual=_handleUnknownTypeId(ctxt,typeId)
JacksonDatabind-107_fix
2$ctxt$DeserializationContext ctxt
3$typeId$String typeId
5$deser$JsonDeserializer<Object> deser=_deserializers.get(typeId)
12$type$JavaType type=_idResolver.typeFromId(ctxt,typeId)
18$actual$JavaType actual=_handleUnknownTypeId(ctxt,typeId)
JacksonDatabind-11_buggy
2$type$TypeVariable<?> type
2$context$TypeBindings context
4$name$String name=type.getName()
15$actualType$JavaType actualType=context.findType(name)
26$bounds$Type[] bounds=type.getBounds()
JacksonDatabind-11_fix
2$type$TypeVariable<?> type
2$context$TypeBindings context
4$name$String name=type.getName()
15$actualType$JavaType actualType=context.findType(name,false)
26$bounds$Type[] bounds=type.getBounds()
JacksonDatabind-112_buggy
2$ctxt$DeserializationContext ctxt
3$property$BeanProperty property
6$delegate$JsonDeserializer<Object> delegate=null
9$delegateCreator$AnnotatedWithParams delegateCreator=_valueInstantiator.getDelegateCreator()
11$delegateType$JavaType delegateType=_valueInstantiator.getDelegateType(ctxt.getConfig())
15$valueDeser$JsonDeserializer<?> valueDeser=_valueDeserializer
16$valueType$JavaType valueType=_containerType.getContentType()
29$unwrapSingle$Boolean unwrapSingle=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
31$nuller$NullValueProvider nuller=findContentNullProvider(ctxt,property,valueDeser)
JacksonDatabind-112_fix
2$ctxt$DeserializationContext ctxt
3$property$BeanProperty property
6$delegate$JsonDeserializer<Object> delegate=null
9$delegateCreator$AnnotatedWithParams delegateCreator=_valueInstantiator.getArrayDelegateCreator()
11$delegateType$JavaType delegateType=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
14$delegateType$JavaType delegateType=_valueInstantiator.getDelegateType(ctxt.getConfig())
18$valueDeser$JsonDeserializer<?> valueDeser=_valueDeserializer
19$valueType$JavaType valueType=_containerType.getContentType()
32$unwrapSingle$Boolean unwrapSingle=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
34$nuller$NullValueProvider nuller=findContentNullProvider(ctxt,property,valueDeser)
JacksonDatabind-12_buggy
JacksonDatabind-12_fix
JacksonDatabind-16_buggy
2$ann$Annotation ann
6$previous$Annotation previous=_annotations.put(ann.annotationType(),ann)
JacksonDatabind-16_fix
2$ann$Annotation ann
6$previous$Annotation previous=_annotations.put(ann.annotationType(),ann)
JacksonDatabind-17_buggy
2$t$JavaType t
JacksonDatabind-17_fix
2$t$JavaType t
JacksonDatabind-19_buggy
2$rawClass$Class<?> rawClass
5$typeParams$JavaType[] typeParams=findTypeParameters(rawClass,Map.class)
JacksonDatabind-19_fix
2$rawClass$Class<?> rawClass
8$typeParams$JavaType[] typeParams=findTypeParameters(rawClass,Map.class)
JacksonDatabind-24_buggy
2$df$DateFormat df
6$tz$TimeZone tz=(df == null) ? _timeZone : df.getTimeZone()
JacksonDatabind-24_fix
2$df$DateFormat df
JacksonDatabind-27_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
5$ext$ExternalTypeHandler ext=_externalTypeIdHandler.start()
6$creator$PropertyBasedCreator creator=_propertyBasedCreator
7$buffer$PropertyValueBuffer buffer=creator.startBuilding(p,ctxt,_objectIdReader)
9$tokens$TokenBuffer tokens=new TokenBuffer(p)
12$t$JsonToken t=p.getCurrentToken()
14$propName$String propName=p.getCurrentName()
17$creatorProp$SettableBeanProperty creatorProp=creator.findCreatorProperty(propName)
28$bean$Object bean
31$e$Exception e
56$prop$SettableBeanProperty prop=_beanProperties.find(propName)
81$e$Exception e
JacksonDatabind-27_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
5$ext$ExternalTypeHandler ext=_externalTypeIdHandler.start()
6$creator$PropertyBasedCreator creator=_propertyBasedCreator
7$buffer$PropertyValueBuffer buffer=creator.startBuilding(p,ctxt,_objectIdReader)
9$tokens$TokenBuffer tokens=new TokenBuffer(p)
12$t$JsonToken t=p.getCurrentToken()
14$propName$String propName=p.getCurrentName()
17$creatorProp$SettableBeanProperty creatorProp=creator.findCreatorProperty(propName)
28$bean$Object bean
31$e$Exception e
56$prop$SettableBeanProperty prop=_beanProperties.find(propName)
81$e$Exception e
JacksonDatabind-28_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
JacksonDatabind-28_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
JacksonDatabind-33_buggy
2$a$Annotated a
4$name$String name=null
6$jg$JsonGetter jg=_findAnnotation(a,JsonGetter.class)
10$pann$JsonProperty pann=_findAnnotation(a,JsonProperty.class)
JacksonDatabind-33_fix
2$a$Annotated a
4$name$String name=null
6$jg$JsonGetter jg=_findAnnotation(a,JsonGetter.class)
10$pann$JsonProperty pann=_findAnnotation(a,JsonProperty.class)
JacksonDatabind-34_buggy
2$visitor$JsonFormatVisitorWrapper visitor
2$typeHint$JavaType typeHint
7$h$Class<?> h=handledType()
JacksonDatabind-34_fix
2$visitor$JsonFormatVisitorWrapper visitor
2$typeHint$JavaType typeHint
7$h$Class<?> h=handledType()
JacksonDatabind-35_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
6$typeId$Object typeId=p.getTypeId()
21$typeId$String typeId=p.getText()
22$deser$JsonDeserializer<Object> deser=_findDeserializer(ctxt,typeId)
28$tb$TokenBuffer tb=new TokenBuffer(null,false)
36$value$Object value=deser.deserialize(p,ctxt)
JacksonDatabind-35_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
6$typeId$Object typeId=p.getTypeId()
12$t$JsonToken t=p.getCurrentToken()
23$typeId$String typeId=p.getText()
24$deser$JsonDeserializer<Object> deser=_findDeserializer(ctxt,typeId)
30$tb$TokenBuffer tb=new TokenBuffer(null,false)
38$value$Object value=deser.deserialize(p,ctxt)
JacksonDatabind-37_buggy
2$subclass$Class<?> subclass
JacksonDatabind-37_fix
2$subclass$Class<?> subclass
JacksonDatabind-39_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
JacksonDatabind-39_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
8$t$JsonToken t=p.nextToken()
JacksonDatabind-42_buggy
JacksonDatabind-42_fix
JacksonDatabind-44_buggy
2$subclass$Class<?> subclass
JacksonDatabind-44_fix
2$subclass$Class<?> subclass
20$next$Class<?> next=subclass.getSuperclass()
26$superb$JavaType superb=_narrow(next)
31$nextI$Class<?>[] nextI=subclass.getInterfaces()
32$iface$Class<?> iface
38$superb$JavaType superb=_narrow(iface)
JacksonDatabind-45_buggy
2$serializers$SerializerProvider serializers
3$property$BeanProperty property
6$format$JsonFormat.Value format=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10$shape$JsonFormat.Shape shape=format.getShape()
16$tz$TimeZone tz=format.getTimeZone()
17$pattern$String pattern=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
20$loc$Locale loc=format.hasLocale() ? format.getLocale() : serializers.getLocale()
23$df$SimpleDateFormat df=new SimpleDateFormat(pattern,loc)
JacksonDatabind-45_fix
2$serializers$SerializerProvider serializers
3$property$BeanProperty property
6$format$JsonFormat.Value format=serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember())
10$shape$JsonFormat.Shape shape=format.getShape()
17$tz$TimeZone tz=format.getTimeZone()
18$pattern$String pattern=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
21$loc$Locale loc=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24$df$SimpleDateFormat df=new SimpleDateFormat(pattern,loc)
JacksonDatabind-46_buggy
2$sb$StringBuilder sb
JacksonDatabind-46_fix
2$sb$StringBuilder sb
JacksonDatabind-47_buggy
2$config$final MapperConfig<?> config
3$a$final Annotated a
3$baseType$final JavaType baseType
5$type$JavaType type=baseType
6$tf$TypeFactory tf=config.getTypeFactory()
16$serClass$Class<?> serClass=findSerializationType(a)
27$iae$IllegalArgumentException iae
39$keyType$JavaType keyType=type.getKeyType()
40$keyClass$Class<?> keyClass=findSerializationKeyType(a,keyType)
45$currRaw$Class<?> currRaw=keyType.getRawClass()
59$iae$IllegalArgumentException iae
70$contentType$JavaType contentType=type.getContentType()
73$contentClass$Class<?> contentClass=findSerializationContentType(a,contentType)
81$currRaw$Class<?> currRaw=contentType.getRawClass()
92$iae$IllegalArgumentException iae
JacksonDatabind-47_fix
2$config$final MapperConfig<?> config
3$a$final Annotated a
3$baseType$final JavaType baseType
5$type$JavaType type=baseType
6$tf$TypeFactory tf=config.getTypeFactory()
16$serClass$Class<?> serClass=findSerializationType(a)
23$currRaw$Class<?> currRaw=type.getRawClass()
36$iae$IllegalArgumentException iae
48$keyType$JavaType keyType=type.getKeyType()
49$keyClass$Class<?> keyClass=findSerializationKeyType(a,keyType)
54$currRaw$Class<?> currRaw=keyType.getRawClass()
68$iae$IllegalArgumentException iae
79$contentType$JavaType contentType=type.getContentType()
82$contentClass$Class<?> contentClass=findSerializationContentType(a,contentType)
90$currRaw$Class<?> currRaw=contentType.getRawClass()
101$iae$IllegalArgumentException iae
JacksonDatabind-49_buggy
2$forPojo$Object forPojo
JacksonDatabind-49_fix
2$forPojo$Object forPojo
JacksonDatabind-5_buggy
2$targetClass$Class<?> targetClass
2$methods$AnnotatedMethodMap methods
3$mixInCls$Class<?> mixInCls
3$mixIns$AnnotatedMethodMap mixIns
5$parents$List<Class<?>> parents=new ArrayList<Class<?>>()
8$mixin$Class<?> mixin
9$m$Method m
13$am$AnnotatedMethod am=methods.find(m)
JacksonDatabind-5_fix
2$targetClass$Class<?> targetClass
2$methods$AnnotatedMethodMap methods
3$mixInCls$Class<?> mixInCls
3$mixIns$AnnotatedMethodMap mixIns
5$parents$List<Class<?>> parents=new ArrayList<Class<?>>()
8$mixin$Class<?> mixin
9$m$Method m
13$am$AnnotatedMethod am=methods.find(m)
JacksonDatabind-51_buggy
2$ctxt$DeserializationContext ctxt
3$typeId$String typeId
5$deser$JsonDeserializer<Object> deser=_deserializers.get(typeId)
12$type$JavaType type=_idResolver.typeFromId(ctxt,typeId)
18$actual$JavaType actual=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
JacksonDatabind-51_fix
2$ctxt$DeserializationContext ctxt
3$typeId$String typeId
5$deser$JsonDeserializer<Object> deser=_deserializers.get(typeId)
12$type$JavaType type=_idResolver.typeFromId(ctxt,typeId)
18$actual$JavaType actual=_handleUnknownTypeId(ctxt,typeId,_idResolver,_baseType)
JacksonDatabind-54_buggy
2$prov$SerializerProvider prov
3$propDef$BeanPropertyDefinition propDef
3$declaredType$JavaType declaredType
3$ser$JsonSerializer<?> ser
4$typeSer$TypeSerializer typeSer
4$contentTypeSer$TypeSerializer contentTypeSer
5$am$AnnotatedMember am
5$defaultUseStaticTyping$boolean defaultUseStaticTyping
9$serializationType$JavaType serializationType=findSerializationType(am,defaultUseStaticTyping,declaredType)
21$ct$JavaType ct=serializationType.getContentType()
31$valueToSuppress$Object valueToSuppress=null
32$suppressNulls$boolean suppressNulls=false
34$inclV$JsonInclude.Value inclV=_defaultInclusion.withOverrides(propDef.findInclusion())
35$inclusion$JsonInclude.Include inclusion=inclV.getValueInclusion()
41$actualType$JavaType actualType=(serializationType == null) ? declaredType : serializationType
90$bpw$BeanPropertyWriter bpw=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95$serDef$Object serDef=_annotationIntrospector.findNullSerializer(am)
100$unwrapper$NameTransformer unwrapper=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-54_fix
2$prov$SerializerProvider prov
3$propDef$BeanPropertyDefinition propDef
3$declaredType$JavaType declaredType
3$ser$JsonSerializer<?> ser
4$typeSer$TypeSerializer typeSer
4$contentTypeSer$TypeSerializer contentTypeSer
5$am$AnnotatedMember am
5$defaultUseStaticTyping$boolean defaultUseStaticTyping
9$serializationType$JavaType serializationType=findSerializationType(am,defaultUseStaticTyping,declaredType)
21$ct$JavaType ct=serializationType.getContentType()
31$valueToSuppress$Object valueToSuppress=null
32$suppressNulls$boolean suppressNulls=false
34$inclV$JsonInclude.Value inclV=_defaultInclusion.withOverrides(propDef.findInclusion())
35$inclusion$JsonInclude.Include inclusion=inclV.getValueInclusion()
41$actualType$JavaType actualType=(serializationType == null) ? declaredType : serializationType
90$bpw$BeanPropertyWriter bpw=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
95$serDef$Object serDef=_annotationIntrospector.findNullSerializer(am)
100$unwrapper$NameTransformer unwrapper=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-57_buggy
2$src$byte[] src
2$offset$int offset
2$length$int length
JacksonDatabind-57_fix
2$src$byte[] src
2$offset$int offset
2$length$int length
JacksonDatabind-58_buggy
2$ctxt$DeserializationContext ctxt
3$beanDesc$BeanDescription beanDesc
3$propDef$BeanPropertyDefinition propDef
4$propType0$JavaType propType0
8$mutator$AnnotatedMember mutator=propDef.getNonConstructorMutator()
17$property$BeanProperty.Std property=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
20$type$JavaType type=resolveType(ctxt,beanDesc,propType0,mutator)
27$propDeser$JsonDeserializer<Object> propDeser=findDeserializerFromAnnotation(ctxt,mutator)
29$typeDeser$TypeDeserializer typeDeser=type.getTypeHandler()
30$prop$SettableBeanProperty prop
42$ref$AnnotationIntrospector.ReferenceProperty ref=propDef.findReferenceType()
46$objectIdInfo$ObjectIdInfo objectIdInfo=propDef.findObjectIdInfo()
JacksonDatabind-58_fix
2$ctxt$DeserializationContext ctxt
3$beanDesc$BeanDescription beanDesc
3$propDef$BeanPropertyDefinition propDef
4$propType0$JavaType propType0
8$mutator$AnnotatedMember mutator=propDef.getNonConstructorMutator()
22$property$BeanProperty.Std property=new BeanProperty.Std(propDef.getFullName(),propType0,propDef.getWrapperName(),beanDesc.getClassAnnotations(),mutator,propDef.getMetadata())
25$type$JavaType type=resolveType(ctxt,beanDesc,propType0,mutator)
32$propDeser$JsonDeserializer<Object> propDeser=findDeserializerFromAnnotation(ctxt,mutator)
34$typeDeser$TypeDeserializer typeDeser=type.getTypeHandler()
35$prop$SettableBeanProperty prop
47$ref$AnnotationIntrospector.ReferenceProperty ref=propDef.findReferenceType()
51$objectIdInfo$ObjectIdInfo objectIdInfo=propDef.findObjectIdInfo()
JacksonDatabind-6_buggy
2$dateStr$String dateStr
2$pos$ParsePosition pos
12$len$int len=dateStr.length()
13$c$char c=dateStr.charAt(len - 1)
14$df$DateFormat df
29$sb$StringBuilder sb=new StringBuilder(dateStr)
39$sb$StringBuilder sb=new StringBuilder(dateStr)
51$sb$StringBuilder sb=new StringBuilder(dateStr)
61$sb$StringBuilder sb=new StringBuilder(dateStr)
63$timeLen$int timeLen=len - dateStr.lastIndexOf('T') - 1
JacksonDatabind-6_fix
2$dateStr$String dateStr
2$pos$ParsePosition pos
12$len$int len=dateStr.length()
13$c$char c=dateStr.charAt(len - 1)
14$df$DateFormat df
29$sb$StringBuilder sb=new StringBuilder(dateStr)
39$sb$StringBuilder sb=new StringBuilder(dateStr)
49$timeLen$int timeLen=len - dateStr.lastIndexOf('T') - 6
51$offset$int offset=len - 5
52$sb$StringBuilder sb=new StringBuilder(dateStr)
77$sb$StringBuilder sb=new StringBuilder(dateStr)
79$timeLen$int timeLen=len - dateStr.lastIndexOf('T') - 1
JacksonDatabind-62_buggy
2$ctxt$DeserializationContext ctxt
3$property$BeanProperty property
6$delegateDeser$JsonDeserializer<Object> delegateDeser=null
9$delegateType$JavaType delegateType=_valueInstantiator.getDelegateType(ctxt.getConfig())
21$unwrapSingle$Boolean unwrapSingle=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
24$valueDeser$JsonDeserializer<?> valueDeser=_valueDeserializer
28$vt$JavaType vt=_collectionType.getContentType()
35$valueTypeDeser$TypeDeserializer valueTypeDeser=_valueTypeDeserializer
JacksonDatabind-62_fix
2$ctxt$DeserializationContext ctxt
3$property$BeanProperty property
6$delegateDeser$JsonDeserializer<Object> delegateDeser=null
9$delegateType$JavaType delegateType=_valueInstantiator.getDelegateType(ctxt.getConfig())
17$delegateType$JavaType delegateType=_valueInstantiator.getArrayDelegateType(ctxt.getConfig())
29$unwrapSingle$Boolean unwrapSingle=findFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
32$valueDeser$JsonDeserializer<?> valueDeser=_valueDeserializer
36$vt$JavaType vt=_collectionType.getContentType()
43$valueTypeDeser$TypeDeserializer valueTypeDeser=_valueTypeDeserializer
JacksonDatabind-64_buggy
2$prov$SerializerProvider prov
3$propDef$BeanPropertyDefinition propDef
3$declaredType$JavaType declaredType
3$ser$JsonSerializer<?> ser
4$typeSer$TypeSerializer typeSer
4$contentTypeSer$TypeSerializer contentTypeSer
5$am$AnnotatedMember am
5$defaultUseStaticTyping$boolean defaultUseStaticTyping
9$serializationType$JavaType serializationType
12$e$JsonMappingException e
26$ct$JavaType ct=serializationType.getContentType()
36$valueToSuppress$Object valueToSuppress=null
37$suppressNulls$boolean suppressNulls=false
40$actualType$JavaType actualType=(serializationType == null) ? declaredType : serializationType
45$inclV$JsonInclude.Value inclV=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51$inclusion$JsonInclude.Include inclusion=inclV.getValueInclusion()
113$bpw$BeanPropertyWriter bpw=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
118$serDef$Object serDef=_annotationIntrospector.findNullSerializer(am)
123$unwrapper$NameTransformer unwrapper=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-64_fix
2$prov$SerializerProvider prov
3$propDef$BeanPropertyDefinition propDef
3$declaredType$JavaType declaredType
3$ser$JsonSerializer<?> ser
4$typeSer$TypeSerializer typeSer
4$contentTypeSer$TypeSerializer contentTypeSer
5$am$AnnotatedMember am
5$defaultUseStaticTyping$boolean defaultUseStaticTyping
9$serializationType$JavaType serializationType
12$e$JsonMappingException e
26$ct$JavaType ct=serializationType.getContentType()
36$valueToSuppress$Object valueToSuppress=null
37$suppressNulls$boolean suppressNulls=false
40$actualType$JavaType actualType=(serializationType == null) ? declaredType : serializationType
45$inclV$JsonInclude.Value inclV=_config.getDefaultPropertyInclusion(actualType.getRawClass(),_defaultInclusion)
51$inclusion$JsonInclude.Include inclusion=inclV.getValueInclusion()
64$defaultBean$Object defaultBean
77$e$Exception e
118$bpw$BeanPropertyWriter bpw=new BeanPropertyWriter(propDef,am,_beanDesc.getClassAnnotations(),declaredType,ser,typeSer,serializationType,suppressNulls,valueToSuppress)
123$serDef$Object serDef=_annotationIntrospector.findNullSerializer(am)
128$unwrapper$NameTransformer unwrapper=_annotationIntrospector.findUnwrappingNameTransformer(am)
JacksonDatabind-67_buggy
2$ctxt$DeserializationContext ctxt
3$type$JavaType type
6$config$DeserializationConfig config=ctxt.getConfig()
7$deser$KeyDeserializer deser=null
9$beanDesc$BeanDescription beanDesc=config.introspectClassAnnotations(type.getRawClass())
10$d$KeyDeserializers d
27$mod$BeanDeserializerModifier mod
JacksonDatabind-67_fix
2$ctxt$DeserializationContext ctxt
3$type$JavaType type
6$config$DeserializationConfig config=ctxt.getConfig()
7$deser$KeyDeserializer deser=null
9$beanDesc$BeanDescription beanDesc=config.introspectClassAnnotations(type.getRawClass())
10$d$KeyDeserializers d
28$mod$BeanDeserializerModifier mod
JacksonDatabind-7_buggy
2$jp$JsonParser jp
2$ctxt$DeserializationContext ctxt
JacksonDatabind-7_fix
2$jp$JsonParser jp
2$ctxt$DeserializationContext ctxt
12$t$JsonToken t
JacksonDatabind-70_buggy
2$propToRm$SettableBeanProperty propToRm
4$props$ArrayList<SettableBeanProperty> props=new ArrayList<SettableBeanProperty>(_size)
5$key$String key=getPropertyName(propToRm)
6$found$boolean found=false
8$i$int i=1
8$end$int end=_hashArea.length
9$prop$SettableBeanProperty prop=(SettableBeanProperty)_hashArea[i]
JacksonDatabind-70_fix
2$propToRm$SettableBeanProperty propToRm
4$props$ArrayList<SettableBeanProperty> props=new ArrayList<SettableBeanProperty>(_size)
5$key$String key=getPropertyName(propToRm)
6$found$boolean found=false
8$i$int i=1
8$end$int end=_hashArea.length
9$prop$SettableBeanProperty prop=(SettableBeanProperty)_hashArea[i]
JacksonDatabind-71_buggy
2$raw$Class<?> raw
4$kind$int kind
39$deser$FromStringDeserializer<?> deser=FromStringDeserializer.findDeserializer(Locale.class)
42$deser$FromStringDeserializer<?> deser=FromStringDeserializer.findDeserializer(Currency.class)
JacksonDatabind-71_fix
2$raw$Class<?> raw
4$kind$int kind
39$deser$FromStringDeserializer<?> deser=FromStringDeserializer.findDeserializer(Locale.class)
42$deser$FromStringDeserializer<?> deser=FromStringDeserializer.findDeserializer(Currency.class)
JacksonDatabind-74_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
3$tb$TokenBuffer tb
6$deser$JsonDeserializer<Object> deser=_findDefaultImplDeserializer(ctxt)
17$result$Object result=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
JacksonDatabind-74_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
3$tb$TokenBuffer tb
6$deser$JsonDeserializer<Object> deser=_findDefaultImplDeserializer(ctxt)
17$result$Object result=TypeDeserializer.deserializeIfNatural(p,ctxt,_baseType)
26$str$String str=p.getText().trim()
JacksonDatabind-76_buggy
2$p$JsonParser p
3$ctxt$DeserializationContext ctxt
6$creator$PropertyBasedCreator creator=_propertyBasedCreator
7$buffer$PropertyValueBuffer buffer=creator.startBuilding(p,ctxt,_objectIdReader)
9$tokens$TokenBuffer tokens=new TokenBuffer(p,ctxt)
12$t$JsonToken t=p.getCurrentToken()
14$propName$String propName=p.getCurrentName()
17$creatorProp$SettableBeanProperty creatorProp=creator.findCreatorProperty(propName)
21$bean$Object bean
24$e$Exception e
47$prop$SettableBeanProperty prop=_beanProperties.find(propName)
65$bean$Object bean
69$e$Exception e
JacksonDatabind-76_fix
2$p$JsonParser p
3$ctxt$DeserializationContext ctxt
6$creator$PropertyBasedCreator creator=_propertyBasedCreator
7$buffer$PropertyValueBuffer buffer=creator.startBuilding(p,ctxt,_objectIdReader)
9$tokens$TokenBuffer tokens=new TokenBuffer(p,ctxt)
12$t$JsonToken t=p.getCurrentToken()
14$propName$String propName=p.getCurrentName()
17$creatorProp$SettableBeanProperty creatorProp=creator.findCreatorProperty(propName)
27$prop$SettableBeanProperty prop=_beanProperties.find(propName)
45$bean$Object bean
49$e$Exception e
JacksonDatabind-8_buggy
2$newOne$AnnotatedWithParams newOne
2$typeIndex$int typeIndex
2$explicit$boolean explicit
4$mask$int mask=(1 << typeIndex)
6$oldOne$AnnotatedWithParams oldOne=_creators[typeIndex]
JacksonDatabind-8_fix
2$newOne$AnnotatedWithParams newOne
2$typeIndex$int typeIndex
2$explicit$boolean explicit
4$mask$int mask=(1 << typeIndex)
6$oldOne$AnnotatedWithParams oldOne=_creators[typeIndex]
9$verify$boolean verify
26$oldType$Class<?> oldType=oldOne.getRawParameterType(0)
27$newType$Class<?> newType=newOne.getRawParameterType(0)
JacksonDatabind-82_buggy
2$ctxt$DeserializationContext ctxt
3$beanDesc$BeanDescription beanDesc
3$builder$BeanDeserializerBuilder builder
6$isConcrete$boolean isConcrete=!beanDesc.getType().isAbstract()
7$creatorProps$SettableBeanProperty[] creatorProps=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10$hasCreatorProps$boolean hasCreatorProps=(creatorProps != null)
16$ignorals$JsonIgnoreProperties.Value ignorals=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19$ignored$Set<String> ignored
22$ignoreAny$boolean ignoreAny=ignorals.getIgnoreUnknown()
26$propName$String propName
34$anySetterMethod$AnnotatedMethod anySetterMethod=beanDesc.findAnySetter()
35$anySetterField$AnnotatedMember anySetterField=null
48$ignored2$Collection<String> ignored2=beanDesc.getIgnoredPropertyNames()
50$propName$String propName
57$useGettersAsSetters$boolean useGettersAsSetters=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61$propDefs$List<BeanPropertyDefinition> propDefs=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66$mod$BeanDeserializerModifier mod
72$propDef$BeanPropertyDefinition propDef
73$prop$SettableBeanProperty prop=null
79$propertyType$JavaType propertyType=propDef.getSetter().getParameterType(0)
82$propertyType$JavaType propertyType=propDef.getField().getType()
88$getter$AnnotatedMethod getter=propDef.getGetter()
90$rawPropertyType$Class<?> rawPropertyType=getter.getRawType()
104$name$String name=propDef.getName()
105$cprop$CreatorProperty cprop=null
107$cp$SettableBeanProperty cp
115$n$List<String> n=new ArrayList<>()
116$cp$SettableBeanProperty cp
133$views$Class<?>[] views=propDef.findViews()
JacksonDatabind-82_fix
2$ctxt$DeserializationContext ctxt
3$beanDesc$BeanDescription beanDesc
3$builder$BeanDeserializerBuilder builder
6$isConcrete$boolean isConcrete=!beanDesc.getType().isAbstract()
7$creatorProps$SettableBeanProperty[] creatorProps=isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null
10$hasCreatorProps$boolean hasCreatorProps=(creatorProps != null)
16$ignorals$JsonIgnoreProperties.Value ignorals=ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo())
19$ignored$Set<String> ignored
22$ignoreAny$boolean ignoreAny=ignorals.getIgnoreUnknown()
26$propName$String propName
34$anySetterMethod$AnnotatedMethod anySetterMethod=beanDesc.findAnySetter()
35$anySetterField$AnnotatedMember anySetterField=null
48$ignored2$Collection<String> ignored2=beanDesc.getIgnoredPropertyNames()
50$propName$String propName
57$useGettersAsSetters$boolean useGettersAsSetters=ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS)
61$propDefs$List<BeanPropertyDefinition> propDefs=filterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored)
66$mod$BeanDeserializerModifier mod
72$propDef$BeanPropertyDefinition propDef
73$prop$SettableBeanProperty prop=null
79$propertyType$JavaType propertyType=propDef.getSetter().getParameterType(0)
82$propertyType$JavaType propertyType=propDef.getField().getType()
88$getter$AnnotatedMethod getter=propDef.getGetter()
90$rawPropertyType$Class<?> rawPropertyType=getter.getRawType()
104$name$String name=propDef.getName()
105$cprop$CreatorProperty cprop=null
107$cp$SettableBeanProperty cp
115$n$List<String> n=new ArrayList<>()
116$cp$SettableBeanProperty cp
133$views$Class<?>[] views=propDef.findViews()
JacksonDatabind-83_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
5$text$String text=p.getValueAsString()
11$cause$Exception cause=null
19$iae$IllegalArgumentException iae
21$me$MalformedURLException me
24$msg$String msg="not a valid textual representation"
26$m2$String m2=cause.getMessage()
32$e$JsonMappingException e=ctxt.weirdStringException(text,_valueClass,msg)
39$t$JsonToken t=p.getCurrentToken()
46$ob$Object ob=p.getEmbeddedObject()
JacksonDatabind-83_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
5$text$String text=p.getValueAsString()
11$cause$Exception cause=null
17$iae$IllegalArgumentException iae
19$me$MalformedURLException me
22$msg$String msg="not a valid textual representation"
24$m2$String m2=cause.getMessage()
30$e$JsonMappingException e=ctxt.weirdStringException(text,_valueClass,msg)
37$t$JsonToken t=p.getCurrentToken()
44$ob$Object ob=p.getEmbeddedObject()
JacksonDatabind-85_buggy
2$serializers$SerializerProvider serializers
3$property$BeanProperty property
8$format$JsonFormat.Value format=findFormatOverrides(serializers,property,handledType())
13$shape$JsonFormat.Shape shape=format.getShape()
22$tz$TimeZone tz=format.getTimeZone()
23$pattern$String pattern=format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601
26$loc$Locale loc=format.hasLocale() ? format.getLocale() : serializers.getLocale()
29$df$SimpleDateFormat df=new SimpleDateFormat(pattern,loc)
JacksonDatabind-85_fix
2$serializers$SerializerProvider serializers
3$property$BeanProperty property
8$format$JsonFormat.Value format=findFormatOverrides(serializers,property,handledType())
13$shape$JsonFormat.Shape shape=format.getShape()
21$loc$Locale loc=format.hasLocale() ? format.getLocale() : serializers.getLocale()
24$df$SimpleDateFormat df=new SimpleDateFormat(format.getPattern(),loc)
25$tz$TimeZone tz=format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone()
32$hasLocale$boolean hasLocale=format.hasLocale()
33$hasTZ$boolean hasTZ=format.hasTimeZone()
34$asString$boolean asString=(shape == JsonFormat.Shape.STRING)
40$df0$DateFormat df0=serializers.getConfig().getDateFormat()
43$std$StdDateFormat std=(StdDateFormat)df0
62$df$SimpleDateFormat df=(SimpleDateFormat)df0
69$newTz$TimeZone newTz=format.getTimeZone()
70$changeTZ$boolean changeTZ=(newTz != null) && !newTz.equals(df.getTimeZone())
JacksonDatabind-88_buggy
2$id$String id
2$ctxt$DatabindContext ctxt
8$tf$TypeFactory tf=ctxt.getTypeFactory()
14$t$JavaType t=tf.constructFromCanonical(id)
18$cls$Class<?> cls
21$e$ClassNotFoundException e
25$dctxt$DeserializationContext dctxt=(DeserializationContext)ctxt
31$e$Exception e
JacksonDatabind-88_fix
2$id$String id
2$ctxt$DatabindContext ctxt
8$tf$TypeFactory tf=ctxt.getTypeFactory()
14$t$JavaType t=tf.constructFromCanonical(id)
22$cls$Class<?> cls
25$e$ClassNotFoundException e
29$dctxt$DeserializationContext dctxt=(DeserializationContext)ctxt
35$e$Exception e
JacksonDatabind-9_buggy
2$value$Object value
2$jgen$JsonGenerator jgen
2$provider$SerializerProvider provider
3$str$String str
JacksonDatabind-9_fix
2$value$Object value
2$jgen$JsonGenerator jgen
2$provider$SerializerProvider provider
3$str$String str
4$cls$Class<?> cls=value.getClass()
JacksonDatabind-91_buggy
2$t$JavaType t
5$ct$JavaType ct=t.getContentType()
JacksonDatabind-91_fix
2$t$JavaType t
5$ct$JavaType ct=t.getContentType()
13$kt$JavaType kt=t.getKeyType()
JacksonDatabind-93_buggy
2$ctxt$DeserializationContext ctxt
2$type$JavaType type
6$raw$Class<?> raw=type.getRawClass()
7$full$String full=raw.getName()
19$cls$Class<?> cls=raw
20$name$String name=cls.getSimpleName()
JacksonDatabind-93_fix
2$ctxt$DeserializationContext ctxt
2$type$JavaType type
6$raw$Class<?> raw=type.getRawClass()
7$full$String full=raw.getName()
19$cls$Class<?> cls=raw
20$name$String name=cls.getSimpleName()
JacksonDatabind-96_buggy
2$ctxt$DeserializationContext ctxt
3$beanDesc$BeanDescription beanDesc
3$creators$CreatorCollector creators
4$candidate$CreatorCandidate candidate
11$oneNotInjected$int oneNotInjected=candidate.findOnlyParamWithoutInjection()
22$param$AnnotatedParameter param=candidate.parameter(0)
23$injectId$JacksonInject.Value injectId=candidate.injection(0)
24$paramName$PropertyName paramName=candidate.explicitParamName(0)
25$paramDef$BeanPropertyDefinition paramDef=candidate.propertyDef(0)
28$useProps$boolean useProps=(paramName != null) || (injectId != null)
40$properties$SettableBeanProperty[] properties=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
JacksonDatabind-96_fix
2$ctxt$DeserializationContext ctxt
3$beanDesc$BeanDescription beanDesc
3$creators$CreatorCollector creators
4$candidate$CreatorCandidate candidate
11$oneNotInjected$int oneNotInjected=candidate.findOnlyParamWithoutInjection()
22$param$AnnotatedParameter param=candidate.parameter(0)
23$injectId$JacksonInject.Value injectId=candidate.injection(0)
24$paramName$PropertyName paramName=candidate.explicitParamName(0)
25$paramDef$BeanPropertyDefinition paramDef=candidate.propertyDef(0)
28$useProps$boolean useProps=(paramName != null) || (injectId != null)
40$properties$SettableBeanProperty[] properties=new SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)}
JacksonDatabind-97_buggy
2$gen$JsonGenerator gen
2$ctxt$SerializerProvider ctxt
JacksonDatabind-97_fix
2$gen$JsonGenerator gen
2$ctxt$SerializerProvider ctxt
JacksonDatabind-98_buggy
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
3$buffer$PropertyValueBuffer buffer
3$creator$PropertyBasedCreator creator
7$len$int len=_properties.length
8$values$Object[] values=new Object[len]
9$i$int i=0
10$typeId$String typeId=_typeIds[i]
11$extProp$ExtTypedProperty extProp=_properties[i]
27$prop$SettableBeanProperty prop=extProp.getProperty()
34$prop$SettableBeanProperty prop=extProp.getProperty()
40$typeProp$SettableBeanProperty typeProp=extProp.getTypeProperty()
49$bean$Object bean=creator.build(ctxt,buffer)
51$i$int i=0
52$prop$SettableBeanProperty prop=_properties[i].getProperty()
JacksonDatabind-98_fix
2$p$JsonParser p
2$ctxt$DeserializationContext ctxt
3$buffer$PropertyValueBuffer buffer
3$creator$PropertyBasedCreator creator
7$len$int len=_properties.length
8$values$Object[] values=new Object[len]
9$i$int i=0
10$typeId$String typeId=_typeIds[i]
11$extProp$ExtTypedProperty extProp=_properties[i]
27$prop$SettableBeanProperty prop=extProp.getProperty()
34$prop$SettableBeanProperty prop=extProp.getProperty()
40$typeProp$SettableBeanProperty typeProp=extProp.getTypeProperty()
45$v$Object v
49$tb$TokenBuffer tb=new TokenBuffer(p,ctxt)
58$bean$Object bean=creator.build(ctxt,buffer)
60$i$int i=0
61$prop$SettableBeanProperty prop=_properties[i].getProperty()
JacksonDatabind-99_buggy
4$sb$StringBuilder sb=new StringBuilder()
JacksonDatabind-99_fix
4$sb$StringBuilder sb=new StringBuilder()
JacksonXml-1_buggy
6$t$JsonToken t=_nextToken
29$token$int token=_xmlTokens.next()
48$name$String name=_xmlTokens.getLocalName()
JacksonXml-1_fix
6$t$JsonToken t=_nextToken
29$token$int token=_xmlTokens.next()
48$name$String name=_xmlTokens.getLocalName()
JacksonXml-3_buggy
6$t$JsonToken t=_nextToken
18$token$int token=_xmlTokens.next()
33$name$String name=_xmlTokens.getLocalName()
JacksonXml-3_fix
6$t$JsonToken t=_nextToken
18$token$int token=_xmlTokens.next()
33$name$String name=_xmlTokens.getLocalName()
JacksonXml-4_buggy
2$jgen$JsonGenerator jgen
JacksonXml-4_fix
2$jgen$JsonGenerator jgen
6$rootName$QName rootName=_rootNameFromConfig()
JacksonXml-5_buggy
2$src$XmlSerializerProvider src
JacksonXml-5_fix
2$src$XmlSerializerProvider src
Jsoup-1_buggy
2$element$Element element
3$toMove$List<Node> toMove=new ArrayList<Node>()
4$node$Node node
6$tn$TextNode tn=(TextNode)node
12$node$Node node
Jsoup-1_fix
2$element$Element element
3$toMove$List<Node> toMove=new ArrayList<Node>()
4$node$Node node
6$tn$TextNode tn=(TextNode)node
12$node$Node node
Jsoup-10_buggy
2$attributeKey$String attributeKey
5$relUrl$String relUrl=attr(attributeKey)
9$base$URL base
13$e$MalformedURLException e
15$abs$URL abs=new URL(relUrl)
19$abs$URL abs=new URL(base,relUrl)
21$e$MalformedURLException e
Jsoup-10_fix
2$attributeKey$String attributeKey
5$relUrl$String relUrl=attr(attributeKey)
9$base$URL base
13$e$MalformedURLException e
15$abs$URL abs=new URL(relUrl)
21$abs$URL abs=new URL(base,relUrl)
23$e$MalformedURLException e
Jsoup-13_buggy
2$attributeKey$String attributeKey
Jsoup-13_fix
2$attributeKey$String attributeKey
6$key$String key=attributeKey.substring("abs:".length())
Jsoup-15_buggy
2$t$Token t
2$tb$TreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
30$name$String name=startTag.name()
34$html$Element html=tb.getStack().getFirst()
35$attribute$Attribute attribute
43$stack$LinkedList<Element> stack=tb.getStack()
49$body$Element body=stack.get(1)
50$attribute$Attribute attribute
57$stack$LinkedList<Element> stack=tb.getStack()
64$second$Element second=stack.get(1)
105$form$Element form=tb.insert(startTag)
109$stack$LinkedList<Element> stack=tb.getStack()
110$i$int i=stack.size() - 1
111$el$Element el=stack.get(i)
125$stack$LinkedList<Element> stack=tb.getStack()
126$i$int i=stack.size() - 1
127$el$Element el=stack.get(i)
162$remainingA$Element remainingA=tb.getFromStack("a")
169$a$Element a=tb.insert(startTag)
174$el$Element el=tb.insert(startTag)
183$el$Element el=tb.insert(startTag)
203$el$Element el=tb.insertEmpty(startTag)
227$form$Element form=tb.getFormElement()
233$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240$inputAttribs$Attributes inputAttribs=new Attributes()
241$attr$Attribute attr
275$state$TreeBuilderState state=tb.state()
315$endTag$Token.EndTag endTag=t.asEndTag()
326$notIgnored$boolean notIgnored=tb.process(new Token.EndTag("body"))
345$currentForm$Element currentForm=tb.getFormElement()
405$i$int i=0
406$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
419$furthestBlock$Element furthestBlock=null
420$commonAncestor$Element commonAncestor=null
421$seenFormattingElement$boolean seenFormattingElement=false
422$stack$LinkedList<Element> stack=tb.getStack()
423$si$int si=0
424$el$Element el=stack.get(si)
441$node$Element node=furthestBlock
442$lastNode$Element lastNode=furthestBlock
444$j$int j=0
453$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479$adopter$Element adopter=new Element(Tag.valueOf(name),tb.getBaseUri())
480$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481$childNode$Node childNode
Jsoup-15_fix
2$t$Token t
2$tb$TreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
30$name$String name=startTag.name()
34$html$Element html=tb.getStack().getFirst()
35$attribute$Attribute attribute
43$stack$LinkedList<Element> stack=tb.getStack()
49$body$Element body=stack.get(1)
50$attribute$Attribute attribute
57$stack$LinkedList<Element> stack=tb.getStack()
64$second$Element second=stack.get(1)
105$form$Element form=tb.insert(startTag)
109$stack$LinkedList<Element> stack=tb.getStack()
110$i$int i=stack.size() - 1
111$el$Element el=stack.get(i)
125$stack$LinkedList<Element> stack=tb.getStack()
126$i$int i=stack.size() - 1
127$el$Element el=stack.get(i)
162$remainingA$Element remainingA=tb.getFromStack("a")
169$a$Element a=tb.insert(startTag)
174$el$Element el=tb.insert(startTag)
183$el$Element el=tb.insert(startTag)
203$el$Element el=tb.insertEmpty(startTag)
227$form$Element form=tb.getFormElement()
233$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240$inputAttribs$Attributes inputAttribs=new Attributes()
241$attr$Attribute attr
275$state$TreeBuilderState state=tb.state()
315$endTag$Token.EndTag endTag=t.asEndTag()
326$notIgnored$boolean notIgnored=tb.process(new Token.EndTag("body"))
345$currentForm$Element currentForm=tb.getFormElement()
405$i$int i=0
406$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
419$furthestBlock$Element furthestBlock=null
420$commonAncestor$Element commonAncestor=null
421$seenFormattingElement$boolean seenFormattingElement=false
422$stack$LinkedList<Element> stack=tb.getStack()
423$si$int si=0
424$el$Element el=stack.get(si)
441$node$Element node=furthestBlock
442$lastNode$Element lastNode=furthestBlock
444$j$int j=0
453$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
479$adopter$Element adopter=new Element(Tag.valueOf(name),tb.getBaseUri())
480$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()])
481$childNode$Node childNode
Jsoup-19_buggy
2$el$Element el
2$attr$Attribute attr
2$protocols$Set<Protocol> protocols
5$value$String value=el.absUrl(attr.getKey())
9$protocol$Protocol protocol
10$prot$String prot=protocol.toString() + ":"
Jsoup-19_fix
2$el$Element el
2$attr$Attribute attr
2$protocols$Set<Protocol> protocols
5$value$String value=el.absUrl(attr.getKey())
11$protocol$Protocol protocol
12$prot$String prot=protocol.toString() + ":"
Jsoup-2_buggy
4$tagName$String tagName=tq.consumeWord()
12$attributes$Attributes attributes=new Attributes()
14$attribute$Attribute attribute=parseAttribute()
19$tag$Tag tag=Tag.valueOf(tagName)
20$child$Element child=new Element(tag,baseUri,attributes)
22$isEmptyElement$boolean isEmptyElement=tag.isEmpty()
32$data$String data=tq.chompTo("</" + tagName)
35$dataNode$Node dataNode
45$href$String href=child.absUrl("href")
Jsoup-2_fix
4$tagName$String tagName=tq.consumeWord()
12$attributes$Attributes attributes=new Attributes()
14$attribute$Attribute attribute=parseAttribute()
19$tag$Tag tag=Tag.valueOf(tagName)
20$child$Element child=new Element(tag,baseUri,attributes)
22$isEmptyElement$boolean isEmptyElement=tag.isEmpty()
32$data$String data=tq.chompTo("</" + tagName)
36$dataNode$Node dataNode
46$href$String href=child.absUrl("href")
Jsoup-20_buggy
2$byteData$ByteBuffer byteData
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
3$docData$String docData
4$doc$Document doc=null
9$meta$Element meta=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11$foundCharset$String foundCharset=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
Jsoup-20_fix
2$byteData$ByteBuffer byteData
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
3$docData$String docData
4$doc$Document doc=null
9$meta$Element meta=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11$foundCharset$String foundCharset=meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset")
Jsoup-24_buggy
2$t$Tokeniser t
2$r$CharacterReader r
4$name$String name=r.consumeLetterSequence()
12$c$char c=r.consume()
Jsoup-24_fix
2$t$Tokeniser t
2$r$CharacterReader r
4$name$String name=r.consumeLetterSequence()
11$c$char c=r.consume()
Jsoup-26_buggy
2$dirtyDocument$Document dirtyDocument
5$clean$Document clean=Document.createShell(dirtyDocument.baseUri())
Jsoup-26_fix
2$dirtyDocument$Document dirtyDocument
5$clean$Document clean=Document.createShell(dirtyDocument.baseUri())
Jsoup-27_buggy
2$contentType$String contentType
4$m$Matcher m=charsetPattern.matcher(contentType)
6$charset$String charset=m.group(1).trim()
Jsoup-27_fix
2$contentType$String contentType
4$m$Matcher m=charsetPattern.matcher(contentType)
6$charset$String charset=m.group(1).trim()
Jsoup-32_buggy
3$clone$Element clone=(Element)super.clone()
Jsoup-32_fix
3$clone$Element clone=(Element)super.clone()
Jsoup-33_buggy
2$startTag$Token.StartTag startTag
6$el$Element el=insertEmpty(startTag)
12$el$Element el=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
Jsoup-33_fix
2$startTag$Token.StartTag startTag
6$el$Element el=insertEmpty(startTag)
13$el$Element el=new Element(Tag.valueOf(startTag.name()),baseUri,startTag.attributes)
Jsoup-34_buggy
2$seq$CharSequence seq
4$startChar$char startChar=seq.charAt(0)
5$offset$int offset=pos
9$i$int i=offset + 1
10$last$int last=i + seq.length() - 1
12$j$int j=1
Jsoup-34_fix
2$seq$CharSequence seq
4$startChar$char startChar=seq.charAt(0)
5$offset$int offset=pos
9$i$int i=offset + 1
10$last$int last=i + seq.length() - 1
12$j$int j=1
Jsoup-35_buggy
2$t$Token t
2$tb$HtmlTreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
30$name$String name=startTag.name()
34$html$Element html=tb.getStack().getFirst()
35$attribute$Attribute attribute
43$stack$LinkedList<Element> stack=tb.getStack()
49$body$Element body=stack.get(1)
50$attribute$Attribute attribute
57$stack$LinkedList<Element> stack=tb.getStack()
64$second$Element second=stack.get(1)
108$stack$LinkedList<Element> stack=tb.getStack()
109$i$int i=stack.size() - 1
110$el$Element el=stack.get(i)
124$stack$LinkedList<Element> stack=tb.getStack()
125$i$int i=stack.size() - 1
126$el$Element el=stack.get(i)
161$remainingA$Element remainingA=tb.getFromStack("a")
168$a$Element a=tb.insert(startTag)
173$el$Element el=tb.insert(startTag)
182$el$Element el=tb.insert(startTag)
202$el$Element el=tb.insertEmpty(startTag)
226$form$Element form=tb.getFormElement()
232$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239$inputAttribs$Attributes inputAttribs=new Attributes()
240$attr$Attribute attr
274$state$HtmlTreeBuilderState state=tb.state()
314$endTag$Token.EndTag endTag=t.asEndTag()
325$notIgnored$boolean notIgnored=tb.process(new Token.EndTag("body"))
344$currentForm$Element currentForm=tb.getFormElement()
404$i$int i=0
405$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
418$furthestBlock$Element furthestBlock=null
419$commonAncestor$Element commonAncestor=null
420$seenFormattingElement$boolean seenFormattingElement=false
421$stack$LinkedList<Element> stack=tb.getStack()
424$si$int si=0
425$el$Element el=stack.get(si)
442$node$Element node=furthestBlock
443$lastNode$Element lastNode=furthestBlock
445$j$int j=0
454$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480$adopter$Element adopter=new Element(formatEl.tag(),tb.getBaseUri())
481$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
482$childNode$Node childNode
Jsoup-35_fix
2$t$Token t
2$tb$HtmlTreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
30$name$String name=startTag.name()
34$html$Element html=tb.getStack().getFirst()
35$attribute$Attribute attribute
43$stack$LinkedList<Element> stack=tb.getStack()
49$body$Element body=stack.get(1)
50$attribute$Attribute attribute
57$stack$LinkedList<Element> stack=tb.getStack()
64$second$Element second=stack.get(1)
108$stack$LinkedList<Element> stack=tb.getStack()
109$i$int i=stack.size() - 1
110$el$Element el=stack.get(i)
124$stack$LinkedList<Element> stack=tb.getStack()
125$i$int i=stack.size() - 1
126$el$Element el=stack.get(i)
161$remainingA$Element remainingA=tb.getFromStack("a")
168$a$Element a=tb.insert(startTag)
173$el$Element el=tb.insert(startTag)
182$el$Element el=tb.insert(startTag)
202$el$Element el=tb.insertEmpty(startTag)
226$form$Element form=tb.getFormElement()
232$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239$inputAttribs$Attributes inputAttribs=new Attributes()
240$attr$Attribute attr
274$state$HtmlTreeBuilderState state=tb.state()
314$endTag$Token.EndTag endTag=t.asEndTag()
325$notIgnored$boolean notIgnored=tb.process(new Token.EndTag("body"))
344$currentForm$Element currentForm=tb.getFormElement()
404$i$int i=0
405$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
418$furthestBlock$Element furthestBlock=null
419$commonAncestor$Element commonAncestor=null
420$seenFormattingElement$boolean seenFormattingElement=false
421$stack$LinkedList<Element> stack=tb.getStack()
424$si$int si=0
425$el$Element el=stack.get(si)
442$node$Element node=furthestBlock
443$lastNode$Element lastNode=furthestBlock
445$j$int j=0
454$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
480$adopter$Element adopter=new Element(formatEl.tag(),tb.getBaseUri())
482$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
483$childNode$Node childNode
Jsoup-37_buggy
3$accum$StringBuilder accum=new StringBuilder()
Jsoup-37_fix
3$accum$StringBuilder accum=new StringBuilder()
Jsoup-38_buggy
2$t$Token t
2$tb$HtmlTreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
30$name$String name=startTag.name()
34$html$Element html=tb.getStack().getFirst()
35$attribute$Attribute attribute
43$stack$LinkedList<Element> stack=tb.getStack()
49$body$Element body=stack.get(1)
50$attribute$Attribute attribute
57$stack$LinkedList<Element> stack=tb.getStack()
64$second$Element second=stack.get(1)
105$stack$LinkedList<Element> stack=tb.getStack()
106$i$int i=stack.size() - 1
107$el$Element el=stack.get(i)
121$stack$LinkedList<Element> stack=tb.getStack()
122$i$int i=stack.size() - 1
123$el$Element el=stack.get(i)
158$remainingA$Element remainingA=tb.getFromStack("a")
165$a$Element a=tb.insert(startTag)
169$el$Element el=tb.insert(startTag)
178$el$Element el=tb.insert(startTag)
198$el$Element el=tb.insertEmpty(startTag)
220$form$Element form=tb.getFormElement()
226$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
233$inputAttribs$Attributes inputAttribs=new Attributes()
234$attr$Attribute attr
268$state$HtmlTreeBuilderState state=tb.state()
307$endTag$Token.EndTag endTag=t.asEndTag()
318$notIgnored$boolean notIgnored=tb.process(new Token.EndTag("body"))
333$currentForm$Element currentForm=tb.getFormElement()
392$i$int i=0
393$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
406$furthestBlock$Element furthestBlock=null
407$commonAncestor$Element commonAncestor=null
408$seenFormattingElement$boolean seenFormattingElement=false
409$stack$LinkedList<Element> stack=tb.getStack()
412$stackSize$int stackSize=stack.size()
413$si$int si=0
414$el$Element el=stack.get(si)
431$node$Element node=furthestBlock
432$lastNode$Element lastNode=furthestBlock
434$j$int j=0
443$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
469$adopter$Element adopter=new Element(formatEl.tag(),tb.getBaseUri())
471$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
472$childNode$Node childNode
Jsoup-38_fix
2$t$Token t
2$tb$HtmlTreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
30$name$String name=startTag.name()
34$html$Element html=tb.getStack().getFirst()
35$attribute$Attribute attribute
43$stack$LinkedList<Element> stack=tb.getStack()
49$body$Element body=stack.get(1)
50$attribute$Attribute attribute
57$stack$LinkedList<Element> stack=tb.getStack()
64$second$Element second=stack.get(1)
105$stack$LinkedList<Element> stack=tb.getStack()
106$i$int i=stack.size() - 1
107$el$Element el=stack.get(i)
121$stack$LinkedList<Element> stack=tb.getStack()
122$i$int i=stack.size() - 1
123$el$Element el=stack.get(i)
158$remainingA$Element remainingA=tb.getFromStack("a")
165$a$Element a=tb.insert(startTag)
169$el$Element el=tb.insert(startTag)
178$el$Element el=tb.insert(startTag)
198$el$Element el=tb.insertEmpty(startTag)
223$form$Element form=tb.getFormElement()
229$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
236$inputAttribs$Attributes inputAttribs=new Attributes()
237$attr$Attribute attr
271$state$HtmlTreeBuilderState state=tb.state()
310$endTag$Token.EndTag endTag=t.asEndTag()
321$notIgnored$boolean notIgnored=tb.process(new Token.EndTag("body"))
336$currentForm$Element currentForm=tb.getFormElement()
395$i$int i=0
396$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
409$furthestBlock$Element furthestBlock=null
410$commonAncestor$Element commonAncestor=null
411$seenFormattingElement$boolean seenFormattingElement=false
412$stack$LinkedList<Element> stack=tb.getStack()
415$stackSize$int stackSize=stack.size()
416$si$int si=0
417$el$Element el=stack.get(si)
434$node$Element node=furthestBlock
435$lastNode$Element lastNode=furthestBlock
437$j$int j=0
446$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName()),tb.getBaseUri())
472$adopter$Element adopter=new Element(formatEl.tag(),tb.getBaseUri())
474$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
475$childNode$Node childNode
Jsoup-39_buggy
2$byteData$ByteBuffer byteData
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
3$docData$String docData
4$doc$Document doc=null
9$meta$Element meta=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11$foundCharset$String foundCharset
19$e$IllegalCharsetNameException e
Jsoup-39_fix
2$byteData$ByteBuffer byteData
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
3$docData$String docData
4$doc$Document doc=null
9$meta$Element meta=doc.select("meta[http-equiv=content-type], meta[charset]").first()
11$foundCharset$String foundCharset
19$e$IllegalCharsetNameException e
Jsoup-40_buggy
2$name$String name
2$publicId$String publicId
2$systemId$String systemId
2$baseUri$String baseUri
Jsoup-40_fix
2$name$String name
2$publicId$String publicId
2$systemId$String systemId
2$baseUri$String baseUri
Jsoup-41_buggy
2$o$Object o
7$element$Element element=(Element)o
Jsoup-41_fix
2$o$Object o
7$element$Element element=(Element)o
Jsoup-42_buggy
3$data$ArrayList<Connection.KeyVal> data=new ArrayList<Connection.KeyVal>()
6$el$Element el
8$name$String name=el.attr("name")
10$type$String type=el.attr("type")
13$options$Elements options=el.select("option[selected]")
14$set$boolean set=false
15$option$Element option
20$option$Element option=el.select("option").first()
27$val$String val=el.val()
Jsoup-42_fix
3$data$ArrayList<Connection.KeyVal> data=new ArrayList<Connection.KeyVal>()
6$el$Element el
9$name$String name=el.attr("name")
11$type$String type=el.attr("type")
14$options$Elements options=el.select("option[selected]")
15$set$boolean set=false
16$option$Element option
21$option$Element option=el.select("option").first()
28$val$String val=el.val().length() > 0 ? el.val() : "on"
Jsoup-43_buggy
2$search$Element search
2$elements$List<E> elements
6$i$int i=0
7$element$E element=elements.get(i)
Jsoup-43_fix
2$search$Element search
2$elements$List<E> elements
6$i$int i=0
7$element$E element=elements.get(i)
Jsoup-45_buggy
3$last$boolean last=false
4$pos$int pos=stack.size() - 1
5$node$Element node=stack.get(pos)
10$name$String name=node.nodeName()
Jsoup-45_fix
3$last$boolean last=false
4$pos$int pos=stack.size() - 1
5$node$Element node=stack.get(pos)
10$name$String name=node.nodeName()
Jsoup-46_buggy
2$accum$StringBuilder accum
2$string$String string
2$out$Document.OutputSettings out
3$inAttribute$boolean inAttribute
3$normaliseWhite$boolean normaliseWhite
3$stripLeadingWhite$boolean stripLeadingWhite
5$lastWasWhite$boolean lastWasWhite=false
6$reachedNonWhite$boolean reachedNonWhite=false
7$escapeMode$EscapeMode escapeMode=out.escapeMode()
8$encoder$CharsetEncoder encoder=out.encoder()
9$coreCharset$CoreCharset coreCharset=CoreCharset.byName(encoder.charset().name())
10$map$Map<Character,String> map=escapeMode.getMap()
11$length$int length=string.length()
13$codePoint$int codePoint
14$offset$int offset=0
31$c$char c=(char)codePoint
70$c$String c=new String(Character.toChars(codePoint))
Jsoup-46_fix
2$accum$StringBuilder accum
2$string$String string
2$out$Document.OutputSettings out
3$inAttribute$boolean inAttribute
3$normaliseWhite$boolean normaliseWhite
3$stripLeadingWhite$boolean stripLeadingWhite
5$lastWasWhite$boolean lastWasWhite=false
6$reachedNonWhite$boolean reachedNonWhite=false
7$escapeMode$EscapeMode escapeMode=out.escapeMode()
8$encoder$CharsetEncoder encoder=out.encoder()
9$coreCharset$CoreCharset coreCharset=CoreCharset.byName(encoder.charset().name())
10$map$Map<Character,String> map=escapeMode.getMap()
11$length$int length=string.length()
13$codePoint$int codePoint
14$offset$int offset=0
31$c$char c=(char)codePoint
70$c$String c=new String(Character.toChars(codePoint))
Jsoup-47_buggy
2$accum$StringBuilder accum
2$string$String string
2$out$Document.OutputSettings out
3$inAttribute$boolean inAttribute
3$normaliseWhite$boolean normaliseWhite
3$stripLeadingWhite$boolean stripLeadingWhite
5$lastWasWhite$boolean lastWasWhite=false
6$reachedNonWhite$boolean reachedNonWhite=false
7$escapeMode$EscapeMode escapeMode=out.escapeMode()
8$encoder$CharsetEncoder encoder=out.encoder()
9$coreCharset$CoreCharset coreCharset=CoreCharset.byName(encoder.charset().name())
10$map$Map<Character,String> map=escapeMode.getMap()
11$length$int length=string.length()
13$codePoint$int codePoint
14$offset$int offset=0
31$c$char c=(char)codePoint
71$c$String c=new String(Character.toChars(codePoint))
Jsoup-47_fix
2$accum$StringBuilder accum
2$string$String string
2$out$Document.OutputSettings out
3$inAttribute$boolean inAttribute
3$normaliseWhite$boolean normaliseWhite
3$stripLeadingWhite$boolean stripLeadingWhite
5$lastWasWhite$boolean lastWasWhite=false
6$reachedNonWhite$boolean reachedNonWhite=false
7$escapeMode$EscapeMode escapeMode=out.escapeMode()
8$encoder$CharsetEncoder encoder=out.encoder()
9$coreCharset$CoreCharset coreCharset=CoreCharset.byName(encoder.charset().name())
10$map$Map<Character,String> map=escapeMode.getMap()
11$length$int length=string.length()
13$codePoint$int codePoint
14$offset$int offset=0
31$c$char c=(char)codePoint
71$c$String c=new String(Character.toChars(codePoint))
Jsoup-48_buggy
2$resHeaders$Map<String,List<String>> resHeaders
3$entry$Map.Entry<String,List<String>> entry
4$name$String name=entry.getKey()
8$values$List<String> values=entry.getValue()
10$value$String value
13$cd$TokenQueue cd=new TokenQueue(value)
14$cookieName$String cookieName=cd.chompTo("=").trim()
15$cookieVal$String cookieVal=cd.consumeTo(";").trim()
Jsoup-48_fix
2$resHeaders$Map<String,List<String>> resHeaders
3$entry$Map.Entry<String,List<String>> entry
4$name$String name=entry.getKey()
8$values$List<String> values=entry.getValue()
10$value$String value
13$cd$TokenQueue cd=new TokenQueue(value)
14$cookieName$String cookieName=cd.chompTo("=").trim()
15$cookieVal$String cookieVal=cd.consumeTo(";").trim()
25$accum$StringBuilder accum=new StringBuilder()
26$i$int i=0
27$val$String val=values.get(i)
Jsoup-49_buggy
2$index$int index
2$children$Node... children
5$i$int i=children.length - 1
6$in$Node in=children[i]
Jsoup-49_fix
2$index$int index
2$children$Node... children
5$i$int i=children.length - 1
6$in$Node in=children[i]
Jsoup-5_buggy
4$key$String key=tq.consumeAttributeKey()
5$value$String value=""
15$valueAccum$StringBuilder valueAccum=new StringBuilder()
Jsoup-5_fix
4$key$String key=tq.consumeAttributeKey()
5$value$String value=""
15$valueAccum$StringBuilder valueAccum=new StringBuilder()
Jsoup-50_buggy
2$byteData$ByteBuffer byteData
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
3$docData$String docData
4$doc$Document doc=null
12$meta$Element meta=doc.select("meta[http-equiv=content-type], meta[charset]").first()
14$foundCharset$String foundCharset=null
23$e$IllegalCharsetNameException e
Jsoup-50_fix
2$byteData$ByteBuffer byteData
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
3$docData$String docData
4$doc$Document doc=null
8$bom$byte[] bom=new byte[4]
26$meta$Element meta=doc.select("meta[http-equiv=content-type], meta[charset]").first()
28$foundCharset$String foundCharset=null
37$e$IllegalCharsetNameException e
Jsoup-51_buggy
5$c$char c=input[pos]
Jsoup-51_fix
5$c$char c=input[pos]
Jsoup-53_buggy
2$open$char open
2$close$char close
3$start$int start=-1
4$end$int end=-1
5$depth$int depth=0
6$last$char last=0
10$c$Character c=consume()
Jsoup-53_fix
2$open$char open
2$close$char close
3$start$int start=-1
4$end$int end=-1
5$depth$int depth=0
6$last$char last=0
7$inQuote$boolean inQuote=false
11$c$Character c=consume()
Jsoup-54_buggy
2$source$org.jsoup.nodes.Node source
2$el$Element el
3$attribute$Attribute attribute
5$key$String key=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
Jsoup-54_fix
2$source$org.jsoup.nodes.Node source
2$el$Element el
3$attribute$Attribute attribute
5$key$String key=attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]","")
Jsoup-55_buggy
2$t$Tokeniser t
2$r$CharacterReader r
3$c$char c=r.consume()
Jsoup-55_fix
2$t$Tokeniser t
2$r$CharacterReader r
3$c$char c=r.consume()
Jsoup-57_buggy
2$key$String key
6$it$Iterator<String> it=attributes.keySet().iterator()
7$attrKey$String attrKey=it.next()
Jsoup-57_fix
2$key$String key
6$it$Iterator<String> it=attributes.keySet().iterator()
7$attrKey$String attrKey=it.next()
Jsoup-59_buggy
9$attribute$Attribute attribute
Jsoup-59_fix
10$attribute$Attribute attribute
Jsoup-6_buggy
2$string$String string
6$m$Matcher m=unescapePattern.matcher(string)
7$accum$StringBuffer accum=new StringBuffer(string.length())
11$charval$int charval=-1
12$num$String num=m.group(3)
15$base$int base=m.group(2) != null ? 16 : 10
17$e$NumberFormatException e
20$name$String name=m.group(1)
26$c$String c=Character.toString((char)charval)
Jsoup-6_fix
2$string$String string
6$m$Matcher m=unescapePattern.matcher(string)
7$accum$StringBuffer accum=new StringBuffer(string.length())
11$charval$int charval=-1
12$num$String num=m.group(3)
15$base$int base=m.group(2) != null ? 16 : 10
17$e$NumberFormatException e
20$name$String name=m.group(1)
26$c$String c=Character.toString((char)charval)
Jsoup-61_buggy
2$className$String className
3$classAttr$String classAttr=attributes.get("class")
4$len$int len=classAttr.length()
5$wantLen$int wantLen=className.length()
17$inClass$boolean inClass=false
18$start$int start=0
19$i$int i=0
Jsoup-61_fix
2$className$String className
3$classAttr$String classAttr=attributes.getIgnoreCase("class")
4$len$int len=classAttr.length()
5$wantLen$int wantLen=className.length()
17$inClass$boolean inClass=false
18$start$int start=0
19$i$int i=0
Jsoup-62_buggy
2$t$Token t
2$tb$HtmlTreeBuilder tb
3$name$String name=t.asEndTag().normalName()
4$stack$ArrayList<Element> stack=tb.getStack()
5$pos$int pos=stack.size() - 1
6$node$Element node=stack.get(pos)
Jsoup-62_fix
2$t$Token t
2$tb$HtmlTreeBuilder tb
3$name$String name=t.asEndTag().name()
4$stack$ArrayList<Element> stack=tb.getStack()
5$pos$int pos=stack.size() - 1
6$node$Element node=stack.get(pos)
Jsoup-64_buggy
2$startTag$Token.StartTag startTag
2$tb$HtmlTreeBuilder tb
Jsoup-64_fix
2$startTag$Token.StartTag startTag
2$tb$HtmlTreeBuilder tb
Jsoup-68_buggy
2$targetNames$String[] targetNames
2$baseTypes$String[] baseTypes
2$extraTypes$String[] extraTypes
4$bottom$int bottom=stack.size() - 1
8$top$int top=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
11$pos$int pos=bottom
12$elName$String elName=stack.get(pos).nodeName()
Jsoup-68_fix
2$targetNames$String[] targetNames
2$baseTypes$String[] baseTypes
2$extraTypes$String[] extraTypes
4$bottom$int bottom=stack.size() - 1
5$top$int top=bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0
8$pos$int pos=bottom
9$elName$String elName=stack.get(pos).nodeName()
Jsoup-70_buggy
2$node$Node node
5$el$Element el=(Element)node
Jsoup-70_fix
2$node$Node node
5$el$Element el=(Element)node
6$i$int i=0
Jsoup-72_buggy
2$charBuf$final char[] charBuf
2$stringCache$final String[] stringCache
2$start$final int start
2$count$final int count
8$hash$int hash=0
9$offset$int offset=start
10$i$int i=0
15$index$int index=hash & stringCache.length - 1
16$cached$String cached=stringCache[index]
Jsoup-72_fix
2$charBuf$final char[] charBuf
2$stringCache$final String[] stringCache
2$start$final int start
2$count$final int count
10$hash$int hash=0
11$offset$int offset=start
12$i$int i=0
17$index$int index=hash & stringCache.length - 1
18$cached$String cached=stringCache[index]
Jsoup-75_buggy
2$accum$final Appendable accum
2$out$final Document.OutputSettings out
3$sz$int sz=size
4$i$int i=0
6$key$String key=keys[i]
7$val$String val=vals[i]
Jsoup-75_fix
2$accum$final Appendable accum
2$out$final Document.OutputSettings out
3$sz$int sz=size
4$i$int i=0
6$key$String key=keys[i]
7$val$String val=vals[i]
Jsoup-76_buggy
2$t$Token t
2$tb$HtmlTreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
31$name$String name=startTag.normalName()
38$remainingA$Element remainingA=tb.getFromStack("a")
45$a$Element a=tb.insert(startTag)
62$stack$ArrayList<Element> stack=tb.getStack()
63$i$int i=stack.size() - 1
64$el$Element el=stack.get(i)
79$html$Element html=tb.getStack().get(0)
80$attribute$Attribute attribute
88$stack$ArrayList<Element> stack=tb.getStack()
94$body$Element body=stack.get(1)
95$attribute$Attribute attribute
102$stack$ArrayList<Element> stack=tb.getStack()
109$second$Element second=stack.get(1)
144$stack$ArrayList<Element> stack=tb.getStack()
145$i$int i=stack.size() - 1
146$el$Element el=stack.get(i)
177$el$Element el=tb.insert(startTag)
186$el$Element el=tb.insert(startTag)
202$el$Element el=tb.insertEmpty(startTag)
226$form$Element form=tb.getFormElement()
232$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
239$inputAttribs$Attributes inputAttribs=new Attributes()
240$attr$Attribute attr
274$state$HtmlTreeBuilderState state=tb.state()
311$endTag$Token.EndTag endTag=t.asEndTag()
315$i$int i=0
316$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
329$furthestBlock$Element furthestBlock=null
330$commonAncestor$Element commonAncestor=null
331$seenFormattingElement$boolean seenFormattingElement=false
332$stack$ArrayList<Element> stack=tb.getStack()
335$stackSize$int stackSize=stack.size()
336$si$int si=0
337$el$Element el=stack.get(si)
354$node$Element node=furthestBlock
355$lastNode$Element lastNode=furthestBlock
356$j$int j=0
365$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
392$adopter$Element adopter=new Element(formatEl.tag(),tb.getBaseUri())
394$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
395$childNode$Node childNode
437$notIgnored$boolean notIgnored=tb.processEndTag("body")
441$currentForm$Element currentForm=tb.getFormElement()
Jsoup-76_fix
2$t$Token t
2$tb$HtmlTreeBuilder tb
5$c$Token.Character c=t.asCharacter()
29$startTag$Token.StartTag startTag=t.asStartTag()
31$name$String name=startTag.normalName()
38$remainingA$Element remainingA=tb.getFromStack("a")
45$a$Element a=tb.insert(startTag)
62$stack$ArrayList<Element> stack=tb.getStack()
63$i$int i=stack.size() - 1
64$el$Element el=stack.get(i)
79$html$Element html=tb.getStack().get(0)
80$attribute$Attribute attribute
88$stack$ArrayList<Element> stack=tb.getStack()
94$body$Element body=stack.get(1)
95$attribute$Attribute attribute
102$stack$ArrayList<Element> stack=tb.getStack()
109$second$Element second=stack.get(1)
145$stack$ArrayList<Element> stack=tb.getStack()
146$i$int i=stack.size() - 1
147$el$Element el=stack.get(i)
178$el$Element el=tb.insert(startTag)
187$el$Element el=tb.insert(startTag)
203$el$Element el=tb.insertEmpty(startTag)
227$form$Element form=tb.getFormElement()
233$prompt$String prompt=startTag.attributes.hasKey("prompt") ? startTag.attributes.get("prompt") : "This is a searchable index. Enter search keywords: "
240$inputAttribs$Attributes inputAttribs=new Attributes()
241$attr$Attribute attr
275$state$HtmlTreeBuilderState state=tb.state()
312$endTag$Token.EndTag endTag=t.asEndTag()
316$i$int i=0
317$formatEl$Element formatEl=tb.getActiveFormattingElement(name)
330$furthestBlock$Element furthestBlock=null
331$commonAncestor$Element commonAncestor=null
332$seenFormattingElement$boolean seenFormattingElement=false
333$stack$ArrayList<Element> stack=tb.getStack()
336$stackSize$int stackSize=stack.size()
337$si$int si=0
338$el$Element el=stack.get(si)
355$node$Element node=furthestBlock
356$lastNode$Element lastNode=furthestBlock
357$j$int j=0
366$replacement$Element replacement=new Element(Tag.valueOf(node.nodeName(),ParseSettings.preserveCase),tb.getBaseUri())
393$adopter$Element adopter=new Element(formatEl.tag(),tb.getBaseUri())
395$childNodes$Node[] childNodes=furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()])
396$childNode$Node childNode
438$notIgnored$boolean notIgnored=tb.processEndTag("body")
442$currentForm$Element currentForm=tb.getFormElement()
Jsoup-77_buggy
2$endTag$Token.EndTag endTag
3$elName$String elName=endTag.name()
4$firstFound$Element firstFound=null
6$pos$int pos=stack.size() - 1
7$next$Element next=stack.get(pos)
16$pos$int pos=stack.size() - 1
17$next$Element next=stack.get(pos)
Jsoup-77_fix
2$endTag$Token.EndTag endTag
3$elName$String elName=endTag.normalName()
4$firstFound$Element firstFound=null
6$pos$int pos=stack.size() - 1
7$next$Element next=stack.get(pos)
16$pos$int pos=stack.size() - 1
17$next$Element next=stack.get(pos)
Jsoup-80_buggy
2$commentToken$Token.Comment commentToken
3$comment$Comment comment=new Comment(commentToken.getData())
4$insert$Node insert=comment
7$data$String data=comment.getData()
9$doc$Document doc=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
10$el$Element el=doc.child(0)
Jsoup-80_fix
2$commentToken$Token.Comment commentToken
3$comment$Comment comment=new Comment(commentToken.getData())
4$insert$Node insert=comment
7$data$String data=comment.getData()
9$doc$Document doc=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri,Parser.xmlParser())
11$el$Element el=doc.child(0)
Jsoup-82_buggy
2$input$InputStream input
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
7$doc$Document doc=null
8$fullyRead$boolean fullyRead=false
12$firstBytes$ByteBuffer firstBytes=readToByteBuffer(input,firstReadBufferSize - 1)
17$bomCharset$BomCharset bomCharset=detectCharsetFromBom(firstBytes)
22$docData$String docData=Charset.forName(defaultCharset).decode(firstBytes).toString()
26$metaElements$Elements metaElements=doc.select("meta[http-equiv=content-type], meta[charset]")
27$foundCharset$String foundCharset=null
28$meta$Element meta
39$first$Node first=doc.childNode(0)
40$decl$XmlDeclaration decl=null
44$comment$Comment comment=(Comment)first
67$reader$BufferedReader reader=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72$e$UncheckedIOException e
76$charset$Charset charset=Charset.forName(charsetName)
Jsoup-82_fix
2$input$InputStream input
2$charsetName$String charsetName
2$baseUri$String baseUri
2$parser$Parser parser
7$doc$Document doc=null
8$fullyRead$boolean fullyRead=false
12$firstBytes$ByteBuffer firstBytes=readToByteBuffer(input,firstReadBufferSize - 1)
17$bomCharset$BomCharset bomCharset=detectCharsetFromBom(firstBytes)
22$docData$String docData=Charset.forName(defaultCharset).decode(firstBytes).toString()
26$metaElements$Elements metaElements=doc.select("meta[http-equiv=content-type], meta[charset]")
27$foundCharset$String foundCharset=null
28$meta$Element meta
39$first$Node first=doc.childNode(0)
40$decl$XmlDeclaration decl=null
44$comment$Comment comment=(Comment)first
67$reader$BufferedReader reader=new BufferedReader(new InputStreamReader(input,charsetName),bufferSize)
72$e$UncheckedIOException e
76$charset$Charset charset=Charset.forName(charsetName)
Jsoup-84_buggy
2$source$org.jsoup.nodes.Node source
2$depth$int depth
5$sourceEl$org.jsoup.nodes.Element sourceEl=(org.jsoup.nodes.Element)source
7$prefix$String prefix=updateNamespaces(sourceEl)
8$namespace$String namespace=namespacesStack.peek().get(prefix)
9$tagName$String tagName=sourceEl.tagName()
11$el$Element el=doc.createElementNS(namespace,tagName)
21$sourceText$org.jsoup.nodes.TextNode sourceText=(org.jsoup.nodes.TextNode)source
22$text$Text text=doc.createTextNode(sourceText.getWholeText())
25$sourceComment$org.jsoup.nodes.Comment sourceComment=(org.jsoup.nodes.Comment)source
26$comment$Comment comment=doc.createComment(sourceComment.getData())
29$sourceData$org.jsoup.nodes.DataNode sourceData=(org.jsoup.nodes.DataNode)source
30$node$Text node=doc.createTextNode(sourceData.getWholeData())
Jsoup-84_fix
2$source$org.jsoup.nodes.Node source
2$depth$int depth
5$sourceEl$org.jsoup.nodes.Element sourceEl=(org.jsoup.nodes.Element)source
7$prefix$String prefix=updateNamespaces(sourceEl)
8$namespace$String namespace=namespacesStack.peek().get(prefix)
9$tagName$String tagName=sourceEl.tagName()
11$el$Element el=namespace == null && tagName.contains(":") ? doc.createElementNS("",tagName) : doc.createElementNS(namespace,tagName)
22$sourceText$org.jsoup.nodes.TextNode sourceText=(org.jsoup.nodes.TextNode)source
23$text$Text text=doc.createTextNode(sourceText.getWholeText())
26$sourceComment$org.jsoup.nodes.Comment sourceComment=(org.jsoup.nodes.Comment)source
27$comment$Comment comment=doc.createComment(sourceComment.getData())
30$sourceData$org.jsoup.nodes.DataNode sourceData=(org.jsoup.nodes.DataNode)source
31$node$Text node=doc.createTextNode(sourceData.getWholeData())
Jsoup-85_buggy
2$key$String key
2$val$String val
2$parent$Attributes parent
Jsoup-85_fix
2$key$String key
2$val$String val
2$parent$Attributes parent
Jsoup-86_buggy
3$data$String data=getData()
4$doc$Document doc=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5$decl$XmlDeclaration decl=null
7$el$Element el=doc.child(0)
Jsoup-86_fix
3$data$String data=getData()
4$doc$Document doc=Jsoup.parse("<" + data.substring(1,data.length() - 1) + ">",baseUri(),Parser.xmlParser())
5$decl$XmlDeclaration decl=null
7$el$Element el=doc.child(0)
Jsoup-88_buggy
Jsoup-88_fix
Jsoup-89_buggy
2$val$String val
3$oldVal$String oldVal=parent.get(this.key)
5$i$int i=parent.indexOfKey(this.key)
Jsoup-89_fix
2$val$String val
3$oldVal$String oldVal=this.val
6$i$int i=parent.indexOfKey(this.key)
Jsoup-90_buggy
2$input$byte[] input
3$i$int i=0
10$end$int end
11$j$int j=input.length
12$o$int o=input[i]
Jsoup-90_fix
2$input$byte[] input
3$i$int i=0
10$end$int end
11$j$int j=input.length
12$o$int o=input[i]
Jsoup-93_buggy
3$data$ArrayList<Connection.KeyVal> data=new ArrayList<>()
6$el$Element el
9$name$String name=el.attr("name")
11$type$String type=el.attr("type")
15$options$Elements options=el.select("option[selected]")
16$set$boolean set=false
17$option$Element option
22$option$Element option=el.select("option").first()
29$val$String val=el.val().length() > 0 ? el.val() : "on"
Jsoup-93_fix
3$data$ArrayList<Connection.KeyVal> data=new ArrayList<>()
6$el$Element el
9$name$String name=el.attr("name")
11$type$String type=el.attr("type")
16$options$Elements options=el.select("option[selected]")
17$set$boolean set=false
18$option$Element option
23$option$Element option=el.select("option").first()
30$val$String val=el.val().length() > 0 ? el.val() : "on"
JxPath-10_buggy
2$context$EvalContext context
JxPath-10_fix
2$context$EvalContext context
JxPath-12_buggy
2$node$Node node
2$test$NodeTest test
11$nodeNameTest$NodeNameTest nodeNameTest=(NodeNameTest)test
12$testName$QName testName=nodeNameTest.getNodeName()
13$namespaceURI$String namespaceURI=nodeNameTest.getNamespaceURI()
14$wildcard$boolean wildcard=nodeNameTest.isWildcard()
15$testPrefix$String testPrefix=testName.getPrefix()
22$nodeNS$String nodeNS=DOMNodePointer.getNamespaceURI(node)
28$nodeType$int nodeType=node.getNodeType()
45$testPI$String testPI=((ProcessingInstructionTest)test).getTarget()
46$nodePI$String nodePI=((ProcessingInstruction)node).getTarget()
JxPath-12_fix
2$node$Node node
2$test$NodeTest test
11$nodeNameTest$NodeNameTest nodeNameTest=(NodeNameTest)test
12$testName$QName testName=nodeNameTest.getNodeName()
13$namespaceURI$String namespaceURI=nodeNameTest.getNamespaceURI()
14$wildcard$boolean wildcard=nodeNameTest.isWildcard()
15$testPrefix$String testPrefix=testName.getPrefix()
22$nodeNS$String nodeNS=DOMNodePointer.getNamespaceURI(node)
29$nodeType$int nodeType=node.getNodeType()
46$testPI$String testPI=((ProcessingInstructionTest)test).getTarget()
47$nodePI$String nodePI=((ProcessingInstruction)node).getTarget()
JxPath-21_buggy
JxPath-21_fix
3$baseValue$Object baseValue=getBaseValue()
JxPath-22_buggy
2$node$Node node
7$element$Element element=(Element)node
9$uri$String uri=element.getNamespaceURI()
11$prefix$String prefix=getPrefix(node)
12$qname$String qname=prefix == null ? "xmlns" : "xmlns:" + prefix
14$aNode$Node aNode=node
17$attr$Attr attr=((Element)aNode).getAttributeNode(qname)
JxPath-22_fix
2$node$Node node
7$element$Element element=(Element)node
9$uri$String uri=element.getNamespaceURI()
11$prefix$String prefix=getPrefix(node)
12$qname$String qname=prefix == null ? "xmlns" : "xmlns:" + prefix
14$aNode$Node aNode=node
17$attr$Attr attr=((Element)aNode).getAttributeNode(qname)
JxPath-5_buggy
3$p1$NodePointer p1
4$depth1$int depth1
5$p2$NodePointer p2
6$depth2$int depth2
9$r$int r=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13$r$int r=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
29$r$int r=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
JxPath-5_fix
3$p1$NodePointer p1
4$depth1$int depth1
5$p2$NodePointer p2
6$depth2$int depth2
9$r$int r=compareNodePointers(p1,depth1,p2.parent,depth2 - 1)
13$r$int r=compareNodePointers(p1.parent,depth1 - 1,p2,depth2)
27$r$int r=compareNodePointers(p1.parent,depth1 - 1,p2.parent,depth2 - 1)
JxPath-6_buggy
3$context$EvalContext context
4$left$Expression left
5$right$Expression right
7$l$Object l=left.compute(context)
8$r$Object r=right.compute(context)
JxPath-6_fix
3$context$EvalContext context
4$left$Expression left
5$right$Expression right
7$l$Object l=left.compute(context)
8$r$Object r=right.compute(context)
JxPath-8_buggy
2$left$Object left
2$right$Object right
21$ld$double ld=InfoSetUtil.doubleValue(left)
22$rd$double rd=InfoSetUtil.doubleValue(right)
JxPath-8_fix
2$left$Object left
2$right$Object right
21$ld$double ld=InfoSetUtil.doubleValue(left)
25$rd$double rd=InfoSetUtil.doubleValue(right)
Lang-1_buggy
2$str$final String str
10$hex_prefixes$String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"}
11$pfxLen$int pfxLen=0
12$pfx$final String pfx
19$hexDigits$int hexDigits=str.length() - pfxLen
28$lastChar$char lastChar=str.charAt(str.length() - 1)
29$mant$String mant
30$dec$String dec
31$exp$String exp
32$decPos$int decPos=str.indexOf('.')
33$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
37$numDecimals$int numDecimals=0
68$numeric$String numeric=str.substring(0,str.length() - 1)
69$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
78$nfe$final NumberFormatException nfe
88$f$Float f=NumberUtils.createFloat(numeric)
95$nfe$final NumberFormatException nfe
102$d$Double d=NumberUtils.createDouble(numeric)
106$nfe$final NumberFormatException nfe
111$e$final NumberFormatException e
131$nfe$final NumberFormatException nfe
136$nfe$final NumberFormatException nfe
143$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
146$f$Float f=createFloat(str)
151$nfe$final NumberFormatException nfe
156$d$Double d=createDouble(str)
161$nfe$final NumberFormatException nfe
Lang-1_fix
2$str$final String str
10$hex_prefixes$String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"}
11$pfxLen$int pfxLen=0
12$pfx$final String pfx
19$firstSigDigit$char firstSigDigit=0
20$i$int i=pfxLen
28$hexDigits$int hexDigits=str.length() - pfxLen
37$lastChar$char lastChar=str.charAt(str.length() - 1)
38$mant$String mant
39$dec$String dec
40$exp$String exp
41$decPos$int decPos=str.indexOf('.')
42$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
46$numDecimals$int numDecimals=0
77$numeric$String numeric=str.substring(0,str.length() - 1)
78$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
87$nfe$final NumberFormatException nfe
97$f$Float f=NumberUtils.createFloat(numeric)
104$nfe$final NumberFormatException nfe
111$d$Double d=NumberUtils.createDouble(numeric)
115$nfe$final NumberFormatException nfe
120$e$final NumberFormatException e
140$nfe$final NumberFormatException nfe
145$nfe$final NumberFormatException nfe
152$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
155$f$Float f=createFloat(str)
160$nfe$final NumberFormatException nfe
165$d$Double d=createDouble(str)
170$nfe$final NumberFormatException nfe
Lang-10_buggy
2$regex$StringBuilder regex
2$value$String value
2$unquote$boolean unquote
3$wasWhite$boolean wasWhite=false
4$i$int i=0
5$c$char c=value.charAt(i)
Lang-10_fix
2$regex$StringBuilder regex
2$value$String value
2$unquote$boolean unquote
3$i$int i=0
4$c$char c=value.charAt(i)
Lang-11_buggy
2$count$int count
2$start$int start
2$end$int end
2$letters$boolean letters
2$numbers$boolean numbers
3$chars$char[] chars
3$random$Random random
26$buffer$char[] buffer=new char[count]
27$gap$int gap=end - start
30$ch$char ch
Lang-11_fix
2$count$int count
2$start$int start
2$end$int end
2$letters$boolean letters
2$numbers$boolean numbers
3$chars$char[] chars
3$random$Random random
30$buffer$char[] buffer=new char[count]
31$gap$int gap=end - start
34$ch$char ch
Lang-12_buggy
2$count$int count
2$start$int start
2$end$int end
2$letters$boolean letters
2$numbers$boolean numbers
3$chars$char[] chars
3$random$Random random
19$buffer$char[] buffer=new char[count]
20$gap$int gap=end - start
23$ch$char ch
Lang-12_fix
2$count$int count
2$start$int start
2$end$int end
2$letters$boolean letters
2$numbers$boolean numbers
3$chars$char[] chars
3$random$Random random
26$buffer$char[] buffer=new char[count]
27$gap$int gap=end - start
30$ch$char ch
Lang-14_buggy
2$cs1$CharSequence cs1
2$cs2$CharSequence cs2
Lang-14_fix
2$cs1$CharSequence cs1
2$cs2$CharSequence cs2
Lang-16_buggy
2$str$String str
19$lastChar$char lastChar=str.charAt(str.length() - 1)
20$mant$String mant
21$dec$String dec
22$exp$String exp
23$decPos$int decPos=str.indexOf('.')
24$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
55$numeric$String numeric=str.substring(0,str.length() - 1)
56$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
65$nfe$NumberFormatException nfe
75$f$Float f=NumberUtils.createFloat(numeric)
82$nfe$NumberFormatException nfe
89$d$Double d=NumberUtils.createDouble(numeric)
93$nfe$NumberFormatException nfe
98$e$NumberFormatException e
118$nfe$NumberFormatException nfe
123$nfe$NumberFormatException nfe
130$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
132$f$Float f=createFloat(str)
136$nfe$NumberFormatException nfe
140$d$Double d=createDouble(str)
144$nfe$NumberFormatException nfe
Lang-16_fix
2$str$String str
19$lastChar$char lastChar=str.charAt(str.length() - 1)
20$mant$String mant
21$dec$String dec
22$exp$String exp
23$decPos$int decPos=str.indexOf('.')
24$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
55$numeric$String numeric=str.substring(0,str.length() - 1)
56$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
65$nfe$NumberFormatException nfe
75$f$Float f=NumberUtils.createFloat(numeric)
82$nfe$NumberFormatException nfe
89$d$Double d=NumberUtils.createDouble(numeric)
93$nfe$NumberFormatException nfe
98$e$NumberFormatException e
118$nfe$NumberFormatException nfe
123$nfe$NumberFormatException nfe
130$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
132$f$Float f=createFloat(str)
136$nfe$NumberFormatException nfe
140$d$Double d=createDouble(str)
144$nfe$NumberFormatException nfe
Lang-17_buggy
2$input$CharSequence input
2$out$Writer out
9$pos$int pos=0
10$len$int len=Character.codePointCount(input,0,input.length())
12$consumed$int consumed=translate(input,pos,out)
14$c$char[] c=Character.toChars(Character.codePointAt(input,pos))
20$pt$int pt=0
Lang-17_fix
2$input$CharSequence input
2$out$Writer out
9$pos$int pos=0
10$len$int len=input.length()
12$consumed$int consumed=translate(input,pos,out)
14$c$char[] c=Character.toChars(Character.codePointAt(input,pos))
21$pt$int pt=0
Lang-18_buggy
3$symbols$DateFormatSymbols symbols=new DateFormatSymbols(mLocale)
4$rules$List<Rule> rules=new ArrayList<Rule>()
6$ERAs$String[] ERAs=symbols.getEras()
7$months$String[] months=symbols.getMonths()
8$shortMonths$String[] shortMonths=symbols.getShortMonths()
9$weekdays$String[] weekdays=symbols.getWeekdays()
10$shortWeekdays$String[] shortWeekdays=symbols.getShortWeekdays()
11$AmPmStrings$String[] AmPmStrings=symbols.getAmPmStrings()
13$length$int length=mPattern.length()
14$indexRef$int[] indexRef=new int[1]
16$i$int i=0
18$token$String token=parseToken(mPattern,indexRef)
21$tokenLen$int tokenLen=token.length()
26$rule$Rule rule
27$c$char c=token.charAt(0)
108$sub$String sub=token.substring(1)
Lang-18_fix
3$symbols$DateFormatSymbols symbols=new DateFormatSymbols(mLocale)
4$rules$List<Rule> rules=new ArrayList<Rule>()
6$ERAs$String[] ERAs=symbols.getEras()
7$months$String[] months=symbols.getMonths()
8$shortMonths$String[] shortMonths=symbols.getShortMonths()
9$weekdays$String[] weekdays=symbols.getWeekdays()
10$shortWeekdays$String[] shortWeekdays=symbols.getShortWeekdays()
11$AmPmStrings$String[] AmPmStrings=symbols.getAmPmStrings()
13$length$int length=mPattern.length()
14$indexRef$int[] indexRef=new int[1]
16$i$int i=0
18$token$String token=parseToken(mPattern,indexRef)
21$tokenLen$int tokenLen=token.length()
26$rule$Rule rule
27$c$char c=token.charAt(0)
108$sub$String sub=token.substring(1)
Lang-19_buggy
2$input$CharSequence input
2$index$int index
2$out$Writer out
3$seqEnd$int seqEnd=input.length()
6$start$int start=index + 2
7$isHex$boolean isHex=false
9$firstChar$char firstChar=input.charAt(start)
17$end$int end=start
24$entityValue$int entityValue
31$nfe$NumberFormatException nfe
37$chrs$char[] chrs=Character.toChars(entityValue)
Lang-19_fix
2$input$CharSequence input
2$index$int index
2$out$Writer out
3$seqEnd$int seqEnd=input.length()
6$start$int start=index + 2
7$isHex$boolean isHex=false
9$firstChar$char firstChar=input.charAt(start)
20$end$int end=start
29$entityValue$int entityValue
36$nfe$NumberFormatException nfe
42$chrs$char[] chrs=Character.toChars(entityValue)
49$semiNext$boolean semiNext=(end != seqEnd) && (input.charAt(end) == ';')
Lang-21_buggy
2$cal1$Calendar cal1
2$cal2$Calendar cal2
Lang-21_fix
2$cal1$Calendar cal1
2$cal2$Calendar cal2
Lang-22_buggy
2$u$int u
2$v$int v
15$k$int k=0
24$t$int t=((u & 1) == 1) ? v : -(u / 2)
Lang-22_fix
2$u$int u
2$v$int v
21$k$int k=0
30$t$int t=((u & 1) == 1) ? v : -(u / 2)
Lang-24_buggy
2$str$String str
6$chars$char[] chars=str.toCharArray()
7$sz$int sz=chars.length
8$hasExp$boolean hasExp=false
9$hasDecPoint$boolean hasDecPoint=false
10$allowSigns$boolean allowSigns=false
11$foundDigit$boolean foundDigit=false
13$start$int start=(chars[0] == '-') ? 1 : 0
16$i$int i=start + 2
33$i$int i=start
Lang-24_fix
2$str$String str
6$chars$char[] chars=str.toCharArray()
7$sz$int sz=chars.length
8$hasExp$boolean hasExp=false
9$hasDecPoint$boolean hasDecPoint=false
10$allowSigns$boolean allowSigns=false
11$foundDigit$boolean foundDigit=false
13$start$int start=(chars[0] == '-') ? 1 : 0
16$i$int i=start + 2
33$i$int i=start
Lang-26_buggy
2$date$Date date
3$c$Calendar c=new GregorianCalendar(mTimeZone)
Lang-26_fix
2$date$Date date
3$c$Calendar c=new GregorianCalendar(mTimeZone,mLocale)
Lang-27_buggy
2$str$String str
19$lastChar$char lastChar=str.charAt(str.length() - 1)
20$mant$String mant
21$dec$String dec
22$exp$String exp
23$decPos$int decPos=str.indexOf('.')
24$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
52$numeric$String numeric=str.substring(0,str.length() - 1)
53$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
62$nfe$NumberFormatException nfe
72$f$Float f=NumberUtils.createFloat(numeric)
79$nfe$NumberFormatException nfe
86$d$Double d=NumberUtils.createDouble(numeric)
90$nfe$NumberFormatException nfe
95$e$NumberFormatException e
115$nfe$NumberFormatException nfe
120$nfe$NumberFormatException nfe
127$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
129$f$Float f=createFloat(str)
133$nfe$NumberFormatException nfe
137$d$Double d=createDouble(str)
141$nfe$NumberFormatException nfe
Lang-27_fix
2$str$String str
19$lastChar$char lastChar=str.charAt(str.length() - 1)
20$mant$String mant
21$dec$String dec
22$exp$String exp
23$decPos$int decPos=str.indexOf('.')
24$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
55$numeric$String numeric=str.substring(0,str.length() - 1)
56$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
65$nfe$NumberFormatException nfe
75$f$Float f=NumberUtils.createFloat(numeric)
82$nfe$NumberFormatException nfe
89$d$Double d=NumberUtils.createDouble(numeric)
93$nfe$NumberFormatException nfe
98$e$NumberFormatException e
118$nfe$NumberFormatException nfe
123$nfe$NumberFormatException nfe
130$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
132$f$Float f=createFloat(str)
136$nfe$NumberFormatException nfe
140$d$Double d=createDouble(str)
144$nfe$NumberFormatException nfe
Lang-28_buggy
2$input$CharSequence input
2$index$int index
2$out$Writer out
5$start$int start=index + 2
6$isHex$boolean isHex=false
8$firstChar$char firstChar=input.charAt(start)
14$end$int end=start
19$entityValue$int entityValue
26$nfe$NumberFormatException nfe
Lang-28_fix
2$input$CharSequence input
2$index$int index
2$out$Writer out
5$start$int start=index + 2
6$isHex$boolean isHex=false
8$firstChar$char firstChar=input.charAt(start)
14$end$int end=start
19$entityValue$int entityValue
26$nfe$NumberFormatException nfe
31$chrs$char[] chrs=Character.toChars(entityValue)
Lang-29_buggy
2$version$String version
Lang-29_fix
2$version$String version
Lang-3_buggy
2$str$final String str
10$hex_prefixes$String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"}
11$pfxLen$int pfxLen=0
12$pfx$final String pfx
19$hexDigits$int hexDigits=str.length() - pfxLen
28$lastChar$char lastChar=str.charAt(str.length() - 1)
29$mant$String mant
30$dec$String dec
31$exp$String exp
32$decPos$int decPos=str.indexOf('.')
33$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
37$numDecimals$int numDecimals=0
68$numeric$String numeric=str.substring(0,str.length() - 1)
69$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
78$nfe$final NumberFormatException nfe
88$f$Float f=NumberUtils.createFloat(numeric)
95$nfe$final NumberFormatException nfe
102$d$Double d=NumberUtils.createDouble(numeric)
106$nfe$final NumberFormatException nfe
111$e$final NumberFormatException e
131$nfe$final NumberFormatException nfe
136$nfe$final NumberFormatException nfe
143$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
145$f$Float f=createFloat(str)
149$nfe$final NumberFormatException nfe
153$d$Double d=createDouble(str)
157$nfe$final NumberFormatException nfe
Lang-3_fix
2$str$final String str
10$hex_prefixes$String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"}
11$pfxLen$int pfxLen=0
12$pfx$final String pfx
19$hexDigits$int hexDigits=str.length() - pfxLen
28$lastChar$char lastChar=str.charAt(str.length() - 1)
29$mant$String mant
30$dec$String dec
31$exp$String exp
32$decPos$int decPos=str.indexOf('.')
33$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
37$numDecimals$int numDecimals=0
68$numeric$String numeric=str.substring(0,str.length() - 1)
69$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
78$nfe$final NumberFormatException nfe
88$f$Float f=NumberUtils.createFloat(numeric)
95$nfe$final NumberFormatException nfe
102$d$Double d=NumberUtils.createDouble(numeric)
106$nfe$final NumberFormatException nfe
111$e$final NumberFormatException e
131$nfe$final NumberFormatException nfe
136$nfe$final NumberFormatException nfe
143$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
146$f$Float f=createFloat(str)
151$nfe$final NumberFormatException nfe
156$d$Double d=createDouble(str)
161$nfe$final NumberFormatException nfe
Lang-31_buggy
2$cs$CharSequence cs
2$searchChars$char[] searchChars
6$csLength$int csLength=cs.length()
7$searchLength$int searchLength=searchChars.length
8$i$int i=0
9$ch$char ch=cs.charAt(i)
10$j$int j=0
Lang-31_fix
2$cs$CharSequence cs
2$searchChars$char[] searchChars
6$csLength$int csLength=cs.length()
7$searchLength$int searchLength=searchChars.length
8$csLastIndex$int csLastIndex=csLength - 1
9$searchLastIndex$int searchLastIndex=searchLength - 1
10$i$int i=0
11$ch$char ch=cs.charAt(i)
12$j$int j=0
Lang-33_buggy
2$array$Object[] array
8$classes$Class<?>[] classes=new Class[array.length]
9$i$int i=0
Lang-33_fix
2$array$Object[] array
8$classes$Class<?>[] classes=new Class[array.length]
9$i$int i=0
Lang-37_buggy
2$array1$T[] array1
2$array2$T... array2
8$type1$Class<?> type1=array1.getClass().getComponentType()
9$joinedArray$T[] joinedArray=(T[])Array.newInstance(type1,array1.length + array2.length)
Lang-37_fix
2$array1$T[] array1
2$array2$T... array2
8$type1$Class<?> type1=array1.getClass().getComponentType()
9$joinedArray$T[] joinedArray=(T[])Array.newInstance(type1,array1.length + array2.length)
13$ase$ArrayStoreException ase
15$type2$Class<?> type2=array2.getClass().getComponentType()
Lang-38_buggy
2$calendar$Calendar calendar
2$buf$StringBuffer buf
Lang-38_fix
2$calendar$Calendar calendar
2$buf$StringBuffer buf
Lang-39_buggy
2$text$String text
2$searchList$String[] searchList
2$replacementList$String[] replacementList
3$repeat$boolean repeat
3$timeToLive$int timeToLive
20$searchLength$int searchLength=searchList.length
21$replacementLength$int replacementLength=replacementList.length
32$noMoreMatchesForReplIndex$boolean[] noMoreMatchesForReplIndex=new boolean[searchLength]
35$textIndex$int textIndex=-1
36$replaceIndex$int replaceIndex=-1
37$tempIndex$int tempIndex=-1
41$i$int i=0
66$start$int start=0
69$increase$int increase=0
72$i$int i=0
73$greater$int greater=replacementList[i].length() - searchList[i].length()
81$buf$StringBuilder buf=new StringBuilder(text.length() + increase)
85$i$int i=start
97$i$int i=0
118$textLength$int textLength=text.length()
119$i$int i=start
122$result$String result=buf.toString()
Lang-39_fix
2$text$String text
2$searchList$String[] searchList
2$replacementList$String[] replacementList
3$repeat$boolean repeat
3$timeToLive$int timeToLive
20$searchLength$int searchLength=searchList.length
21$replacementLength$int replacementLength=replacementList.length
32$noMoreMatchesForReplIndex$boolean[] noMoreMatchesForReplIndex=new boolean[searchLength]
35$textIndex$int textIndex=-1
36$replaceIndex$int replaceIndex=-1
37$tempIndex$int tempIndex=-1
41$i$int i=0
66$start$int start=0
69$increase$int increase=0
72$i$int i=0
76$greater$int greater=replacementList[i].length() - searchList[i].length()
84$buf$StringBuilder buf=new StringBuilder(text.length() + increase)
88$i$int i=start
100$i$int i=0
121$textLength$int textLength=text.length()
122$i$int i=start
125$result$String result=buf.toString()
Lang-40_buggy
2$str$String str
2$searchStr$String searchStr
Lang-40_fix
2$str$String str
2$searchStr$String searchStr
6$len$int len=searchStr.length()
7$max$int max=str.length() - len
8$i$int i=0
Lang-42_buggy
2$writer$Writer writer
2$str$String str
3$len$int len=str.length()
4$i$int i=0
5$c$char c=str.charAt(i)
6$entityName$String entityName=this.entityName(c)
Lang-42_fix
2$writer$Writer writer
2$str$String str
3$len$int len=str.length()
4$i$int i=0
5$c$int c=Character.codePointAt(str,i)
6$entityName$String entityName=this.entityName(c)
Lang-43_buggy
2$pattern$String pattern
2$pos$ParsePosition pos
3$appendTo$StringBuffer appendTo
3$escapingOn$boolean escapingOn
4$start$int start=pos.getIndex()
5$c$char[] c=pattern.toCharArray()
9$lastHold$int lastHold=start
10$i$int i=pos.getIndex()
Lang-43_fix
2$pattern$String pattern
2$pos$ParsePosition pos
3$appendTo$StringBuffer appendTo
3$escapingOn$boolean escapingOn
4$start$int start=pos.getIndex()
5$c$char[] c=pattern.toCharArray()
10$lastHold$int lastHold=start
11$i$int i=pos.getIndex()
Lang-44_buggy
2$val$String val
19$lastChar$char lastChar=val.charAt(val.length() - 1)
20$mant$String mant
21$dec$String dec
22$exp$String exp
23$decPos$int decPos=val.indexOf('.')
24$expPos$int expPos=val.indexOf('e') + val.indexOf('E') + 1
52$numeric$String numeric=val.substring(0,val.length() - 1)
53$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
62$nfe$NumberFormatException nfe
72$f$Float f=NumberUtils.createFloat(numeric)
79$e$NumberFormatException e
86$d$Double d=NumberUtils.createDouble(numeric)
90$nfe$NumberFormatException nfe
95$e$NumberFormatException e
115$nfe$NumberFormatException nfe
120$nfe$NumberFormatException nfe
127$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
129$f$Float f=createFloat(val)
133$nfe$NumberFormatException nfe
137$d$Double d=createDouble(val)
141$nfe$NumberFormatException nfe
Lang-44_fix
2$val$String val
22$lastChar$char lastChar=val.charAt(val.length() - 1)
23$mant$String mant
24$dec$String dec
25$exp$String exp
26$decPos$int decPos=val.indexOf('.')
27$expPos$int expPos=val.indexOf('e') + val.indexOf('E') + 1
55$numeric$String numeric=val.substring(0,val.length() - 1)
56$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
65$nfe$NumberFormatException nfe
75$f$Float f=NumberUtils.createFloat(numeric)
82$e$NumberFormatException e
89$d$Double d=NumberUtils.createDouble(numeric)
93$nfe$NumberFormatException nfe
98$e$NumberFormatException e
118$nfe$NumberFormatException nfe
123$nfe$NumberFormatException nfe
130$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
132$f$Float f=createFloat(val)
136$nfe$NumberFormatException nfe
140$d$Double d=createDouble(val)
144$nfe$NumberFormatException nfe
Lang-45_buggy
2$str$String str
2$lower$int lower
2$upper$int upper
2$appendToEnd$String appendToEnd
23$result$StringBuffer result=new StringBuffer()
24$index$int index=StringUtils.indexOf(str," ",lower)
Lang-45_fix
2$str$String str
2$lower$int lower
2$upper$int upper
2$appendToEnd$String appendToEnd
26$result$StringBuffer result=new StringBuffer()
27$index$int index=StringUtils.indexOf(str," ",lower)
Lang-48_buggy
2$lhs$Object lhs
2$rhs$Object rhs
13$lhsClass$Class lhsClass=lhs.getClass()
Lang-48_fix
2$lhs$Object lhs
2$rhs$Object rhs
13$lhsClass$Class lhsClass=lhs.getClass()
Lang-49_buggy
3$gcd$int gcd=greatestCommonDivisor(Math.abs(numerator),denominator)
Lang-49_fix
6$gcd$int gcd=greatestCommonDivisor(Math.abs(numerator),denominator)
Lang-5_buggy
2$str$final String str
6$len$int len=str.length()
10$ch0$char ch0=str.charAt(0)
11$ch1$char ch1=str.charAt(1)
24$ch3$char ch3=str.charAt(3)
28$ch4$char ch4=str.charAt(4)
Lang-5_fix
2$str$final String str
6$len$int len=str.length()
10$ch0$char ch0=str.charAt(0)
15$ch1$char ch1=str.charAt(1)
16$ch2$char ch2=str.charAt(2)
31$ch1$char ch1=str.charAt(1)
44$ch3$char ch3=str.charAt(3)
48$ch4$char ch4=str.charAt(4)
Lang-51_buggy
2$str$String str
17$ch0$char ch0=str.charAt(0)
18$ch1$char ch1=str.charAt(1)
24$ch$char ch=str.charAt(0)
37$ch$char ch=str.charAt(0)
Lang-51_fix
2$str$String str
17$ch0$char ch0=str.charAt(0)
18$ch1$char ch1=str.charAt(1)
24$ch$char ch=str.charAt(0)
38$ch$char ch=str.charAt(0)
Lang-52_buggy
2$out$Writer out
2$str$String str
2$escapeSingleQuote$boolean escapeSingleQuote
9$sz$int sz
11$i$int i=0
12$ch$char ch=str.charAt(i)
Lang-52_fix
2$out$Writer out
2$str$String str
2$escapeSingleQuote$boolean escapeSingleQuote
9$sz$int sz
11$i$int i=0
12$ch$char ch=str.charAt(i)
Lang-53_buggy
2$val$Calendar val
2$field$int field
2$round$boolean round
17$date$Date date=val.getTime()
18$time$long time=date.getTime()
19$done$boolean done=false
22$millisecs$int millisecs=val.get(Calendar.MILLISECOND)
31$seconds$int seconds=val.get(Calendar.SECOND)
40$minutes$int minutes=val.get(Calendar.MINUTE)
52$roundUp$boolean roundUp=false
53$i$int i=0
54$j$int j=0
78$offset$int offset=0
79$offsetSet$boolean offsetSet=false
112$min$int min=val.getActualMinimum(fields[i][0])
113$max$int max=val.getActualMaximum(fields[i][0])
Lang-53_fix
2$val$Calendar val
2$field$int field
2$round$boolean round
17$date$Date date=val.getTime()
18$time$long time=date.getTime()
19$done$boolean done=false
22$millisecs$int millisecs=val.get(Calendar.MILLISECOND)
31$seconds$int seconds=val.get(Calendar.SECOND)
40$minutes$int minutes=val.get(Calendar.MINUTE)
52$roundUp$boolean roundUp=false
53$i$int i=0
54$j$int j=0
78$offset$int offset=0
79$offsetSet$boolean offsetSet=false
112$min$int min=val.getActualMinimum(fields[i][0])
113$max$int max=val.getActualMaximum(fields[i][0])
Lang-54_buggy
2$str$String str
6$len$int len=str.length()
10$ch0$char ch0=str.charAt(0)
11$ch1$char ch1=str.charAt(1)
21$ch3$char ch3=str.charAt(3)
22$ch4$char ch4=str.charAt(4)
Lang-54_fix
2$str$String str
6$len$int len=str.length()
10$ch0$char ch0=str.charAt(0)
11$ch1$char ch1=str.charAt(1)
21$ch3$char ch3=str.charAt(3)
25$ch4$char ch4=str.charAt(4)
Lang-55_buggy
Lang-55_fix
Lang-57_buggy
2$locale$Locale locale
Lang-57_fix
2$locale$Locale locale
Lang-58_buggy
2$str$String str
19$lastChar$char lastChar=str.charAt(str.length() - 1)
20$mant$String mant
21$dec$String dec
22$exp$String exp
23$decPos$int decPos=str.indexOf('.')
24$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
52$numeric$String numeric=str.substring(0,str.length() - 1)
53$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
63$nfe$NumberFormatException nfe
73$f$Float f=NumberUtils.createFloat(numeric)
80$nfe$NumberFormatException nfe
87$d$Double d=NumberUtils.createDouble(numeric)
91$nfe$NumberFormatException nfe
96$e$NumberFormatException e
116$nfe$NumberFormatException nfe
121$nfe$NumberFormatException nfe
128$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
130$f$Float f=createFloat(str)
134$nfe$NumberFormatException nfe
138$d$Double d=createDouble(str)
142$nfe$NumberFormatException nfe
Lang-58_fix
2$str$String str
19$lastChar$char lastChar=str.charAt(str.length() - 1)
20$mant$String mant
21$dec$String dec
22$exp$String exp
23$decPos$int decPos=str.indexOf('.')
24$expPos$int expPos=str.indexOf('e') + str.indexOf('E') + 1
52$numeric$String numeric=str.substring(0,str.length() - 1)
53$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
62$nfe$NumberFormatException nfe
72$f$Float f=NumberUtils.createFloat(numeric)
79$nfe$NumberFormatException nfe
86$d$Double d=NumberUtils.createDouble(numeric)
90$nfe$NumberFormatException nfe
95$e$NumberFormatException e
115$nfe$NumberFormatException nfe
120$nfe$NumberFormatException nfe
127$allZeros$boolean allZeros=isAllZeros(mant) && isAllZeros(exp)
129$f$Float f=createFloat(str)
133$nfe$NumberFormatException nfe
137$d$Double d=createDouble(str)
141$nfe$NumberFormatException nfe
Lang-59_buggy
2$obj$Object obj
2$width$int width
2$padChar$char padChar
5$str$String str=(obj == null ? getNullText() : obj.toString())
6$strLen$int strLen=str.length()
10$padLen$int padLen=width - strLen
12$i$int i=0
Lang-59_fix
2$obj$Object obj
2$width$int width
2$padChar$char padChar
5$str$String str=(obj == null ? getNullText() : obj.toString())
6$strLen$int strLen=str.length()
10$padLen$int padLen=width - strLen
12$i$int i=0
Lang-6_buggy
2$input$CharSequence input
2$out$Writer out
9$pos$int pos=0
10$len$int len=input.length()
12$consumed$int consumed=translate(input,pos,out)
14$c$char[] c=Character.toChars(Character.codePointAt(input,pos))
21$pt$int pt=0
Lang-6_fix
2$input$CharSequence input
2$out$Writer out
9$pos$int pos=0
10$len$int len=input.length()
12$consumed$int consumed=translate(input,pos,out)
14$c$char[] c=Character.toChars(Character.codePointAt(input,pos))
21$pt$int pt=0
Lang-61_buggy
2$str$String str
2$startIndex$int startIndex
7$strLen$int strLen=str.length()
17$thisBuf$char[] thisBuf=buffer
18$len$int len=thisBuf.length - strLen
20$i$int i=startIndex
21$j$int j=0
Lang-61_fix
2$str$String str
2$startIndex$int startIndex
7$strLen$int strLen=str.length()
17$thisBuf$char[] thisBuf=buffer
18$len$int len=size - strLen + 1
20$i$int i=startIndex
21$j$int j=0
Lang-65_buggy
2$val$Calendar val
2$field$int field
2$round$boolean round
24$roundUp$boolean roundUp=false
25$i$int i=0
26$j$int j=0
50$offset$int offset=0
51$offsetSet$boolean offsetSet=false
84$min$int min=val.getActualMinimum(fields[i][0])
85$max$int max=val.getActualMaximum(fields[i][0])
Lang-65_fix
2$val$Calendar val
2$field$int field
2$round$boolean round
17$date$Date date=val.getTime()
18$time$long time=date.getTime()
19$done$boolean done=false
22$millisecs$int millisecs=val.get(Calendar.MILLISECOND)
31$seconds$int seconds=val.get(Calendar.SECOND)
40$minutes$int minutes=val.get(Calendar.MINUTE)
52$roundUp$boolean roundUp=false
53$i$int i=0
54$j$int j=0
78$offset$int offset=0
79$offsetSet$boolean offsetSet=false
112$min$int min=val.getActualMinimum(fields[i][0])
113$max$int max=val.getActualMaximum(fields[i][0])
Lang-9_buggy
7$regex$StringBuilder regex=new StringBuilder()
8$collector$List<Strategy> collector=new ArrayList<Strategy>()
10$patternMatcher$Matcher patternMatcher=formatPattern.matcher(pattern)
16$currentStrategy$Strategy currentStrategy=getStrategy(currentFormatField)
23$nextFormatField$String nextFormatField=patternMatcher.group()
Lang-9_fix
7$regex$StringBuilder regex=new StringBuilder()
8$collector$List<Strategy> collector=new ArrayList<Strategy>()
10$patternMatcher$Matcher patternMatcher=formatPattern.matcher(pattern)
16$currentStrategy$Strategy currentStrategy=getStrategy(currentFormatField)
23$nextFormatField$String nextFormatField=patternMatcher.group()
Math-10_buggy
2$y$final double[] y
2$yOffset$final int yOffset
3$x$final double[] x
3$xOffset$final int xOffset
4$result$final double[] result
4$resultOffset$final int resultOffset
7$tmp1$double[] tmp1=new double[getSize()]
9$tmp2$double[] tmp2=new double[getSize()]
20$i$int i=0
32$i$int i=1
Math-10_fix
2$y$final double[] y
2$yOffset$final int yOffset
3$x$final double[] x
3$xOffset$final int xOffset
4$result$final double[] result
4$resultOffset$final int resultOffset
7$tmp1$double[] tmp1=new double[getSize()]
9$tmp2$double[] tmp2=new double[getSize()]
20$i$int i=0
32$i$int i=1
Math-101_buggy
2$source$String source
2$pos$ParsePosition pos
3$initialIndex$int initialIndex=pos.getIndex()
9$re$Number re=parseNumber(source,getRealFormat(),pos)
19$startIndex$int startIndex=pos.getIndex()
20$c$char c=parseNextCharacter(source,pos)
21$sign$int sign=0
46$im$Number im=parseNumber(source,getRealFormat(),pos)
56$n$int n=getImaginaryCharacter().length()
58$endIndex$int endIndex=startIndex + n
Math-101_fix
2$source$String source
2$pos$ParsePosition pos
3$initialIndex$int initialIndex=pos.getIndex()
9$re$Number re=parseNumber(source,getRealFormat(),pos)
19$startIndex$int startIndex=pos.getIndex()
20$c$char c=parseNextCharacter(source,pos)
21$sign$int sign=0
46$im$Number im=parseNumber(source,getRealFormat(),pos)
56$n$int n=getImaginaryCharacter().length()
58$endIndex$int endIndex=startIndex + n
Math-102_buggy
2$expected$double[] expected
2$observed$long[] observed
12$sumSq$double sumSq=0.0d
13$dev$double dev=0.0d
14$i$int i=0
Math-102_fix
2$expected$double[] expected
2$observed$long[] observed
12$sumExpected$double sumExpected=0d
13$sumObserved$double sumObserved=0d
14$i$int i=0
18$ratio$double ratio=1.0d
19$rescale$boolean rescale=false
24$sumSq$double sumSq=0.0d
25$dev$double dev=0.0d
26$i$int i=0
Math-103_buggy
2$x$double x
Math-103_fix
2$x$double x
6$ex$MaxIterationsExceededException ex
Math-105_buggy
Math-105_fix
Math-106_buggy
2$source$String source
2$pos$ParsePosition pos
4$ret$Fraction ret=super.parse(source,pos)
9$initialIndex$int initialIndex=pos.getIndex()
15$whole$Number whole=getWholeFormat().parse(source,pos)
28$num$Number num=getNumeratorFormat().parse(source,pos)
40$startIndex$int startIndex=pos.getIndex()
41$c$char c=parseNextCharacter(source,pos)
63$den$Number den=getDenominatorFormat().parse(source,pos)
74$w$int w=whole.intValue()
75$n$int n=num.intValue()
76$d$int d=den.intValue()
Math-106_fix
2$source$String source
2$pos$ParsePosition pos
4$ret$Fraction ret=super.parse(source,pos)
9$initialIndex$int initialIndex=pos.getIndex()
15$whole$Number whole=getWholeFormat().parse(source,pos)
28$num$Number num=getNumeratorFormat().parse(source,pos)
44$startIndex$int startIndex=pos.getIndex()
45$c$char c=parseNextCharacter(source,pos)
67$den$Number den=getDenominatorFormat().parse(source,pos)
82$w$int w=whole.intValue()
83$n$int n=num.intValue()
84$d$int d=den.intValue()
Math-11_buggy
2$vals$final double[] vals
3$dim$int dim=getDimension()
Math-11_fix
2$vals$final double[] vals
3$dim$int dim=getDimension()
Math-13_buggy
2$m$RealMatrix m
3$dec$EigenDecomposition dec=new EigenDecomposition(m)
Math-13_fix
2$m$RealMatrix m
4$dim$int dim=m.getRowDimension()
5$sqrtM$RealMatrix sqrtM=new DiagonalMatrix(dim)
6$i$int i=0
11$dec$EigenDecomposition dec=new EigenDecomposition(m)
Math-17_buggy
2$x$final int x
Math-17_fix
2$x$final int x
Math-19_buggy
3$init$double[] init=getStartPoint()
4$lB$double[] lB=getLowerBound()
5$uB$double[] uB=getUpperBound()
8$hasFiniteBounds$boolean hasFiniteBounds=false
9$i$int i=0
17$hasInfiniteBounds$boolean hasInfiniteBounds=false
19$i$int i=0
48$i$int i=0
Math-19_fix
3$init$double[] init=getStartPoint()
4$lB$double[] lB=getLowerBound()
5$uB$double[] uB=getUpperBound()
8$hasFiniteBounds$boolean hasFiniteBounds=false
9$i$int i=0
17$hasInfiniteBounds$boolean hasInfiniteBounds=false
19$i$int i=0
38$i$int i=0
40$max$double max=Double.MAX_VALUE + boundaries[0][i]
41$e$NumberIsTooLargeException e=new NumberIsTooLargeException(boundaries[1][i],max,true)
61$i$int i=0
Math-2_buggy
Math-2_fix
Math-20_buggy
2$x$final double[] x
Math-20_fix
2$x$final double[] x
Math-21_buggy
2$matrix$RealMatrix matrix
2$small$double small
5$order$int order=matrix.getRowDimension()
6$c$double[][] c=matrix.getData()
7$b$double[][] b=new double[order][order]
9$swap$int[] swap=new int[order]
10$index$int[] index=new int[order]
11$i$int i=0
15$r$int r=0
16$loop$boolean loop=true
20$i$int i=r + 1
21$ii$int ii=index[i]
22$isi$int isi=index[swap[i]]
31$tmp$int tmp=index[r]
37$ir$int ir=index[r]
45$i$int i=r
61$sqrt$double sqrt=FastMath.sqrt(c[ir][ir])
63$inverse$double inverse=1 / sqrt
64$i$int i=r + 1
65$ii$int ii=index[i]
66$e$double e=inverse * c[ii][ir]
69$j$int j=r + 1
70$ij$int ij=index[j]
71$f$double f=c[ii][ij] - e * b[j][r]
85$i$int i=0
86$j$int j=0
Math-21_fix
2$matrix$RealMatrix matrix
2$small$double small
5$order$int order=matrix.getRowDimension()
6$c$double[][] c=matrix.getData()
7$b$double[][] b=new double[order][order]
9$index$int[] index=new int[order]
10$i$int i=0
14$r$int r=0
15$loop$boolean loop=true
18$swapR$int swapR=r
19$i$int i=r + 1
20$ii$int ii=index[i]
21$isr$int isr=index[swapR]
30$tmpIndex$int tmpIndex=index[r]
33$tmpRow$double[] tmpRow=b[r]
39$ir$int ir=index[r]
47$i$int i=r
63$sqrt$double sqrt=FastMath.sqrt(c[ir][ir])
65$inverse$double inverse=1 / sqrt
66$inverse2$double inverse2=1 / c[ir][ir]
67$i$int i=r + 1
68$ii$int ii=index[i]
69$e$double e=inverse * c[ii][ir]
72$j$int j=r + 1
73$ij$int ij=index[j]
74$f$double f=c[ii][ij] - e * b[j][r]
88$i$int i=0
89$j$int j=0
Math-23_buggy
3$isMinim$boolean isMinim=getGoalType() == GoalType.MINIMIZE
4$lo$double lo=getMin()
5$mid$double mid=getStartValue()
6$hi$double hi=getMax()
9$checker$ConvergenceChecker<UnivariatePointValuePair> checker=getConvergenceChecker()
12$a$double a
13$b$double b
22$x$double x=mid
23$v$double v=x
24$w$double w=x
25$d$double d=0
26$e$double e=0
27$fx$double fx=computeObjectiveValue(x)
31$fv$double fv=fx
32$fw$double fw=fx
34$previous$UnivariatePointValuePair previous=null
35$current$UnivariatePointValuePair current=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
39$iter$int iter=0
41$m$double m=0.5 * (a + b)
42$tol1$double tol1=relativeThreshold * FastMath.abs(x) + absoluteThreshold
43$tol2$double tol2=2 * tol1
46$stop$boolean stop=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
48$p$double p=0
49$q$double q=0
50$r$double r=0
51$u$double u=0
113$fu$double fu=computeObjectiveValue(u)
Math-23_fix
3$isMinim$boolean isMinim=getGoalType() == GoalType.MINIMIZE
4$lo$double lo=getMin()
5$mid$double mid=getStartValue()
6$hi$double hi=getMax()
9$checker$ConvergenceChecker<UnivariatePointValuePair> checker=getConvergenceChecker()
12$a$double a
13$b$double b
22$x$double x=mid
23$v$double v=x
24$w$double w=x
25$d$double d=0
26$e$double e=0
27$fx$double fx=computeObjectiveValue(x)
31$fv$double fv=fx
32$fw$double fw=fx
34$previous$UnivariatePointValuePair previous=null
35$current$UnivariatePointValuePair current=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38$best$UnivariatePointValuePair best=current
40$iter$int iter=0
42$m$double m=0.5 * (a + b)
43$tol1$double tol1=relativeThreshold * FastMath.abs(x) + absoluteThreshold
44$tol2$double tol2=2 * tol1
47$stop$boolean stop=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
49$p$double p=0
50$q$double q=0
51$r$double r=0
52$u$double u=0
114$fu$double fu=computeObjectiveValue(u)
Math-24_buggy
3$isMinim$boolean isMinim=getGoalType() == GoalType.MINIMIZE
4$lo$double lo=getMin()
5$mid$double mid=getStartValue()
6$hi$double hi=getMax()
9$checker$ConvergenceChecker<UnivariatePointValuePair> checker=getConvergenceChecker()
12$a$double a
13$b$double b
22$x$double x=mid
23$v$double v=x
24$w$double w=x
25$d$double d=0
26$e$double e=0
27$fx$double fx=computeObjectiveValue(x)
31$fv$double fv=fx
32$fw$double fw=fx
34$previous$UnivariatePointValuePair previous=null
35$current$UnivariatePointValuePair current=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38$iter$int iter=0
40$m$double m=0.5 * (a + b)
41$tol1$double tol1=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42$tol2$double tol2=2 * tol1
45$stop$boolean stop=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47$p$double p=0
48$q$double q=0
49$r$double r=0
50$u$double u=0
112$fu$double fu=computeObjectiveValue(u)
Math-24_fix
3$isMinim$boolean isMinim=getGoalType() == GoalType.MINIMIZE
4$lo$double lo=getMin()
5$mid$double mid=getStartValue()
6$hi$double hi=getMax()
9$checker$ConvergenceChecker<UnivariatePointValuePair> checker=getConvergenceChecker()
12$a$double a
13$b$double b
22$x$double x=mid
23$v$double v=x
24$w$double w=x
25$d$double d=0
26$e$double e=0
27$fx$double fx=computeObjectiveValue(x)
31$fv$double fv=fx
32$fw$double fw=fx
34$previous$UnivariatePointValuePair previous=null
35$current$UnivariatePointValuePair current=new UnivariatePointValuePair(x,isMinim ? fx : -fx)
38$iter$int iter=0
40$m$double m=0.5 * (a + b)
41$tol1$double tol1=relativeThreshold * FastMath.abs(x) + absoluteThreshold
42$tol2$double tol2=2 * tol1
45$stop$boolean stop=FastMath.abs(x - m) <= tol2 - 0.5 * (b - a)
47$p$double p=0
48$q$double q=0
49$r$double r=0
50$u$double u=0
112$fu$double fu=computeObjectiveValue(u)
Math-25_buggy
4$sx2$double sx2=0
5$sy2$double sy2=0
6$sxy$double sxy=0
7$sxz$double sxz=0
8$syz$double syz=0
10$currentX$double currentX=observations[0].getX()
11$currentY$double currentY=observations[0].getY()
12$f2Integral$double f2Integral=0
13$fPrime2Integral$double fPrime2Integral=0
14$startX$double startX=currentX
15$i$int i=1
17$previousX$double previousX=currentX
18$previousY$double previousY=currentY
24$dx$double dx=currentX - previousX
25$dy$double dy=currentY - previousY
26$f2StepIntegral$double f2StepIntegral=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28$fPrime2StepIntegral$double fPrime2StepIntegral=dy * dy / dx
30$x$double x=currentX - startX
42$c1$double c1=sy2 * sxz - sxy * syz
43$c2$double c2=sxy * sxz - sx2 * syz
44$c3$double c3=sx2 * sy2 - sxy * sxy
46$last$int last=observations.length - 1
49$xRange$double xRange=observations[last].getX() - observations[0].getX()
55$yMin$double yMin=Double.POSITIVE_INFINITY
56$yMax$double yMax=Double.NEGATIVE_INFINITY
57$i$int i=1
58$y$double y=observations[i].getY()
Math-25_fix
4$sx2$double sx2=0
5$sy2$double sy2=0
6$sxy$double sxy=0
7$sxz$double sxz=0
8$syz$double syz=0
10$currentX$double currentX=observations[0].getX()
11$currentY$double currentY=observations[0].getY()
12$f2Integral$double f2Integral=0
13$fPrime2Integral$double fPrime2Integral=0
14$startX$double startX=currentX
15$i$int i=1
17$previousX$double previousX=currentX
18$previousY$double previousY=currentY
24$dx$double dx=currentX - previousX
25$dy$double dy=currentY - previousY
26$f2StepIntegral$double f2StepIntegral=dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3
28$fPrime2StepIntegral$double fPrime2StepIntegral=dy * dy / dx
30$x$double x=currentX - startX
42$c1$double c1=sy2 * sxz - sxy * syz
43$c2$double c2=sxy * sxz - sx2 * syz
44$c3$double c3=sx2 * sy2 - sxy * sxy
46$last$int last=observations.length - 1
49$xRange$double xRange=observations[last].getX() - observations[0].getX()
55$yMin$double yMin=Double.POSITIVE_INFINITY
56$yMax$double yMax=Double.NEGATIVE_INFINITY
57$i$int i=1
58$y$double y=observations[i].getY()
Math-26_buggy
2$value$double value
2$epsilon$double epsilon
2$maxDenominator$int maxDenominator
2$maxIterations$int maxIterations
5$overflow$long overflow=Integer.MAX_VALUE
6$r0$double r0=value
7$a0$long a0=(long)FastMath.floor(r0)
20$p0$long p0=1
21$q0$long q0=0
22$p1$long p1=a0
23$q1$long q1=1
25$p2$long p2=0
26$q2$long q2=1
28$n$int n=0
29$stop$boolean stop=false
32$r1$double r1=1.0 / (r0 - a0)
33$a1$long a1=(long)FastMath.floor(r1)
40$convergent$double convergent=(double)p2 / (double)q2
Math-26_fix
2$value$double value
2$epsilon$double epsilon
2$maxDenominator$int maxDenominator
2$maxIterations$int maxIterations
5$overflow$long overflow=Integer.MAX_VALUE
6$r0$double r0=value
7$a0$long a0=(long)FastMath.floor(r0)
20$p0$long p0=1
21$q0$long q0=0
22$p1$long p1=a0
23$q1$long q1=1
25$p2$long p2=0
26$q2$long q2=1
28$n$int n=0
29$stop$boolean stop=false
32$r1$double r1=1.0 / (r0 - a0)
33$a1$long a1=(long)FastMath.floor(r1)
40$convergent$double convergent=(double)p2 / (double)q2
Math-27_buggy
Math-27_fix
Math-28_buggy
2$tableau$SimplexTableau tableau
2$col$final int col
4$minRatioPositions$List<Integer> minRatioPositions=new ArrayList<Integer>()
5$minRatio$double minRatio=Double.MAX_VALUE
6$i$int i=tableau.getNumObjectiveFunctions()
7$rhs$double rhs=tableau.getEntry(i,tableau.getWidth() - 1)
8$entry$double entry=tableau.getEntry(i,col)
11$ratio$double ratio=rhs / entry
14$cmp$int cmp=Double.compare(ratio,minRatio)
31$row$Integer row
32$i$int i=0
33$column$int column=i + tableau.getArtificialVariableOffset()
34$entry$double entry=tableau.getEntry(row,column)
50$minRow$Integer minRow=null
51$minIndex$int minIndex=tableau.getWidth()
52$row$Integer row
53$i$int i=tableau.getNumObjectiveFunctions()
Math-28_fix
2$tableau$SimplexTableau tableau
2$col$final int col
4$minRatioPositions$List<Integer> minRatioPositions=new ArrayList<Integer>()
5$minRatio$double minRatio=Double.MAX_VALUE
6$i$int i=tableau.getNumObjectiveFunctions()
7$rhs$double rhs=tableau.getEntry(i,tableau.getWidth() - 1)
8$entry$double entry=tableau.getEntry(i,col)
11$ratio$double ratio=rhs / entry
14$cmp$int cmp=Double.compare(ratio,minRatio)
32$row$Integer row
33$i$int i=0
34$column$int column=i + tableau.getArtificialVariableOffset()
35$entry$double entry=tableau.getEntry(row,column)
53$minRow$Integer minRow=null
54$minIndex$int minIndex=tableau.getWidth()
55$row$Integer row
56$i$int i=tableau.getNumObjectiveFunctions()
Math-3_buggy
2$a$final double[] a
2$b$final double[] b
4$len$int len=a.length
11$prodHigh$double[] prodHigh=new double[len]
12$prodLowSum$double prodLowSum=0
14$i$int i=0
15$ai$double ai=a[i]
16$ca$double ca=SPLIT_FACTOR * ai
17$aHigh$double aHigh=ca - (ca - ai)
18$aLow$double aLow=ai - aHigh
20$bi$double bi=b[i]
21$cb$double cb=SPLIT_FACTOR * bi
22$bHigh$double bHigh=cb - (cb - bi)
23$bLow$double bLow=bi - bHigh
25$prodLow$double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
33$prodHighCur$double prodHighCur=prodHigh[0]
34$prodHighNext$double prodHighNext=prodHigh[1]
35$sHighPrev$double sHighPrev=prodHighCur + prodHighNext
36$sPrime$double sPrime=sHighPrev - prodHighNext
37$sLowSum$double sLowSum=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
39$lenMinusOne$int lenMinusOne=len - 1
40$i$int i=1
42$sHighCur$double sHighCur=sHighPrev + prodHighNext
48$result$double result=sHighPrev + (prodLowSum + sLowSum)
54$i$int i=0
Math-3_fix
2$a$final double[] a
2$b$final double[] b
4$len$int len=a.length
14$prodHigh$double[] prodHigh=new double[len]
15$prodLowSum$double prodLowSum=0
17$i$int i=0
18$ai$double ai=a[i]
19$ca$double ca=SPLIT_FACTOR * ai
20$aHigh$double aHigh=ca - (ca - ai)
21$aLow$double aLow=ai - aHigh
23$bi$double bi=b[i]
24$cb$double cb=SPLIT_FACTOR * bi
25$bHigh$double bHigh=cb - (cb - bi)
26$bLow$double bLow=bi - bHigh
28$prodLow$double prodLow=aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow)
36$prodHighCur$double prodHighCur=prodHigh[0]
37$prodHighNext$double prodHighNext=prodHigh[1]
38$sHighPrev$double sHighPrev=prodHighCur + prodHighNext
39$sPrime$double sPrime=sHighPrev - prodHighNext
40$sLowSum$double sLowSum=(prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
42$lenMinusOne$int lenMinusOne=len - 1
43$i$int i=1
45$sHighCur$double sHighCur=sHighPrev + prodHighNext
51$result$double result=sHighPrev + (prodLowSum + sLowSum)
57$i$int i=0
Math-30_buggy
2$Umin$final double Umin
3$n1$final int n1
4$n2$final int n2
7$n1n2prod$int n1n2prod=n1 * n2
10$EU$double EU=n1n2prod / 2.0
11$VarU$double VarU=n1n2prod * (n1 + n2 + 1) / 12.0
13$z$double z=(Umin - EU) / FastMath.sqrt(VarU)
15$standardNormal$NormalDistribution standardNormal=new NormalDistribution(0,1)
Math-30_fix
2$Umin$final double Umin
3$n1$final int n1
4$n2$final int n2
7$n1n2prod$double n1n2prod=n1 * n2
10$EU$double EU=n1n2prod / 2.0
11$VarU$double VarU=n1n2prod * (n1 + n2 + 1) / 12.0
13$z$double z=(Umin - EU) / FastMath.sqrt(VarU)
15$standardNormal$NormalDistribution standardNormal=new NormalDistribution(0,1)
Math-31_buggy
2$x$double x
2$epsilon$double epsilon
2$maxIterations$int maxIterations
3$small$double small=1e-50
4$hPrev$double hPrev=getA(0,x)
11$n$int n=1
12$dPrev$double dPrev=0.0
13$p0$double p0=1.0
14$q1$double q1=1.0
15$cPrev$double cPrev=hPrev
16$hN$double hN=hPrev
19$a$double a=getA(n,x)
20$b$double b=getB(n,x)
22$cN$double cN=a * hPrev + b * p0
23$q2$double q2=a * q1 + b * dPrev
25$scaleFactor$double scaleFactor=1d
26$lastScaleFactor$double lastScaleFactor=1d
27$maxPower$int maxPower=5
28$scale$double scale=FastMath.max(a,b)
32$i$int i=0
48$deltaN$double deltaN=cN / q2 / cPrev
Math-31_fix
2$x$double x
2$epsilon$double epsilon
2$maxIterations$int maxIterations
3$small$double small=1e-50
4$hPrev$double hPrev=getA(0,x)
11$n$int n=1
12$dPrev$double dPrev=0.0
13$cPrev$double cPrev=hPrev
14$hN$double hN=hPrev
17$a$double a=getA(n,x)
18$b$double b=getB(n,x)
20$dN$double dN=a + b * dPrev
24$cN$double cN=a + b / cPrev
30$deltaN$double deltaN=cN * dN
Math-32_buggy
4$v$Vector2D[][] v=getVertices()
7$tree$BSPTree<Euclidean2D> tree=getTree(false)
23$sum$double sum=0
24$sumX$double sumX=0
25$sumY$double sumY=0
27$loop$Vector2D[] loop
28$x1$double x1=loop[loop.length - 1].getX()
29$y1$double y1=loop[loop.length - 1].getY()
30$point$final Vector2D point
31$x0$double x0=x1
32$y0$double y0=y1
35$factor$double factor=x0 * y1 - y0 * x1
Math-32_fix
4$v$Vector2D[][] v=getVertices()
7$tree$BSPTree<Euclidean2D> tree=getTree(false)
23$sum$double sum=0
24$sumX$double sumX=0
25$sumY$double sumY=0
27$loop$Vector2D[] loop
28$x1$double x1=loop[loop.length - 1].getX()
29$y1$double y1=loop[loop.length - 1].getY()
30$point$final Vector2D point
31$x0$double x0=x1
32$y0$double y0=y1
35$factor$double factor=x0 * y1 - y0 * x1
Math-33_buggy
7$columnsToDrop$List<Integer> columnsToDrop=new ArrayList<Integer>()
11$i$int i=getNumObjectiveFunctions()
12$entry$double entry=tableau.getEntry(0,i)
19$i$int i=0
20$col$int col=i + getArtificialVariableOffset()
26$matrix$double[][] matrix=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27$i$int i=1
28$col$int col=0
29$j$int j=0
36$i$int i=columnsToDrop.size() - 1
Math-33_fix
7$columnsToDrop$List<Integer> columnsToDrop=new ArrayList<Integer>()
11$i$int i=getNumObjectiveFunctions()
12$entry$double entry=tableau.getEntry(0,i)
19$i$int i=0
20$col$int col=i + getArtificialVariableOffset()
26$matrix$double[][] matrix=new double[getHeight() - 1][getWidth() - columnsToDrop.size()]
27$i$int i=1
28$col$int col=0
29$j$int j=0
36$i$int i=columnsToDrop.size() - 1
Math-34_buggy
Math-34_fix
Math-38_buggy
2$lowerBound$double[] lowerBound
3$upperBound$double[] upperBound
6$n$int n=currentBest.getDimension()
7$npt$int npt=numberOfInterpolationPoints
8$ndim$int ndim=bMatrix.getRowDimension()
10$rhosq$double rhosq=initialTrustRegionRadius * initialTrustRegionRadius
11$recip$double recip=1d / rhosq
12$np$int np=n + 1
17$j$int j=0
19$k$int k=0
22$i$int i=0
26$i$int i=0
26$max$int max=n * np / 2
29$k$int k=0
31$j$int j=0
31$max$int max=npt - np
40$ipt$int ipt=0
41$jpt$int jpt=0
42$fbeg$double fbeg=Double.NaN
44$nfm$int nfm=getEvaluations()
45$nfx$int nfx=nfm - n
46$nfmm$int nfmm=nfm - 1
47$nfxm$int nfxm=nfx - 1
48$stepa$double stepa=0
49$stepb$double stepb=0
73$tmp1$int tmp1=(nfm - np) / n
77$tmp2$int tmp2=jpt
82$iptMinus1$int iptMinus1=ipt
83$jptMinus1$int jptMinus1=jpt
91$j$int j=0
103$objectiveValue$double objectiveValue=computeObjectiveValue(currentBest.toArray())
104$f$double f=isMinimize ? objectiveValue : -objectiveValue
105$numEval$int numEval=getEvaluations()
126$oneOverStepA$double oneOverStepA=ONE / stepa
133$ih$int ih=nfx * (nfx + 1) / 2 - 1
134$tmp$double tmp=(f - fbeg) / stepb
135$diff$double diff=stepb - stepa
169$ih$int ih=ipt * (ipt - 1) / 2 + jpt - 1
170$tmp$double tmp=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
Math-38_fix
2$lowerBound$double[] lowerBound
3$upperBound$double[] upperBound
6$n$int n=currentBest.getDimension()
7$npt$int npt=numberOfInterpolationPoints
8$ndim$int ndim=bMatrix.getRowDimension()
10$rhosq$double rhosq=initialTrustRegionRadius * initialTrustRegionRadius
11$recip$double recip=1d / rhosq
12$np$int np=n + 1
17$j$int j=0
19$k$int k=0
22$i$int i=0
26$i$int i=0
26$max$int max=n * np / 2
29$k$int k=0
31$j$int j=0
31$max$int max=npt - np
40$ipt$int ipt=0
41$jpt$int jpt=0
42$fbeg$double fbeg=Double.NaN
44$nfm$int nfm=getEvaluations()
45$nfx$int nfx=nfm - n
46$nfmm$int nfmm=nfm - 1
47$nfxm$int nfxm=nfx - 1
48$stepa$double stepa=0
49$stepb$double stepb=0
73$tmp1$int tmp1=(nfm - np) / n
77$tmp2$int tmp2=jpt
82$iptMinus1$int iptMinus1=ipt - 1
83$jptMinus1$int jptMinus1=jpt - 1
91$j$int j=0
103$objectiveValue$double objectiveValue=computeObjectiveValue(currentBest.toArray())
104$f$double f=isMinimize ? objectiveValue : -objectiveValue
105$numEval$int numEval=getEvaluations()
126$oneOverStepA$double oneOverStepA=ONE / stepa
133$ih$int ih=nfx * (nfx + 1) / 2 - 1
134$tmp$double tmp=(f - fbeg) / stepb
135$diff$double diff=stepb - stepa
169$ih$int ih=ipt * (ipt - 1) / 2 + jpt - 1
170$tmp$double tmp=interpolationPoints.getEntry(nfm,ipt - 1) * interpolationPoints.getEntry(nfm,jpt - 1)
Math-39_buggy
2$equations$final ExpandableStatefulODE equations
2$t$final double t
7$forward$boolean forward=t > equations.getTime()
10$y0$double[] y0=equations.getCompleteState()
11$y$double[] y=y0.clone()
12$stages$int stages=c.length + 1
13$yDotK$double[][] yDotK=new double[stages][y.length]
14$yTmp$double[] yTmp=y0.clone()
15$yDotTmp$double[] yDotTmp=new double[y.length]
18$interpolator$RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy()
25$hNew$double hNew=0
26$firstTime$boolean firstTime=true
36$error$double error=10
45$scale$double[] scale=new double[mainSetDimension]
47$i$int i=0
51$i$int i=0
63$k$int k=1
65$j$int j=0
66$sum$double sum=a[k - 1][0] * yDotK[0][j]
67$l$int l=1
78$j$int j=0
79$sum$double sum=b[0] * yDotK[0][j]
80$l$int l=1
90$factor$double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
116$factor$double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
118$scaledH$double scaledH=stepSize * factor
119$nextT$double nextT=stepStart + scaledH
120$nextIsLast$boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t)
123$filteredNextT$double filteredNextT=stepStart + hNew
124$filteredNextIsLast$boolean filteredNextIsLast=forward ? (filteredNextT >= t) : (filteredNextT <= t)
Math-39_fix
2$equations$final ExpandableStatefulODE equations
2$t$final double t
7$forward$boolean forward=t > equations.getTime()
10$y0$double[] y0=equations.getCompleteState()
11$y$double[] y=y0.clone()
12$stages$int stages=c.length + 1
13$yDotK$double[][] yDotK=new double[stages][y.length]
14$yTmp$double[] yTmp=y0.clone()
15$yDotTmp$double[] yDotTmp=new double[y.length]
18$interpolator$RungeKuttaStepInterpolator interpolator=(RungeKuttaStepInterpolator)prototype.copy()
25$hNew$double hNew=0
26$firstTime$boolean firstTime=true
36$error$double error=10
45$scale$double[] scale=new double[mainSetDimension]
47$i$int i=0
51$i$int i=0
72$k$int k=1
74$j$int j=0
75$sum$double sum=a[k - 1][0] * yDotK[0][j]
76$l$int l=1
87$j$int j=0
88$sum$double sum=b[0] * yDotK[0][j]
89$l$int l=1
99$factor$double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
125$factor$double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety * FastMath.pow(error,exp)))
127$scaledH$double scaledH=stepSize * factor
128$nextT$double nextT=stepStart + scaledH
129$nextIsLast$boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t)
132$filteredNextT$double filteredNextT=stepStart + hNew
133$filteredNextIsLast$boolean filteredNextIsLast=forward ? (filteredNextT >= t) : (filteredNextT <= t)
Math-40_buggy
5$x$double[] x=new double[maximalOrder + 1]
6$y$double[] y=new double[maximalOrder + 1]
26$nbPoints$int nbPoints
27$signChangeIndex$int signChangeIndex
54$tmpX$double[] tmpX=new double[x.length]
57$xA$double xA=x[signChangeIndex - 1]
58$yA$double yA=y[signChangeIndex - 1]
59$absYA$double absYA=FastMath.abs(yA)
60$agingA$int agingA=0
61$xB$double xB=x[signChangeIndex]
62$yB$double yB=y[signChangeIndex]
63$absYB$double absYB=FastMath.abs(yB)
64$agingB$int agingB=0
70$xTol$double xTol=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91$targetY$double targetY
104$nextX$double nextX
105$start$int start=0
106$end$int end=nbPoints
142$nextY$double nextY=computeObjectiveValue(nextX)
Math-40_fix
5$x$double[] x=new double[maximalOrder + 1]
6$y$double[] y=new double[maximalOrder + 1]
26$nbPoints$int nbPoints
27$signChangeIndex$int signChangeIndex
54$tmpX$double[] tmpX=new double[x.length]
57$xA$double xA=x[signChangeIndex - 1]
58$yA$double yA=y[signChangeIndex - 1]
59$absYA$double absYA=FastMath.abs(yA)
60$agingA$int agingA=0
61$xB$double xB=x[signChangeIndex]
62$yB$double yB=y[signChangeIndex]
63$absYB$double absYB=FastMath.abs(yB)
64$agingB$int agingB=0
70$xTol$double xTol=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB))
91$targetY$double targetY
94$p$int p=agingA - MAXIMAL_AGING
95$weightA$double weightA=(1 << p) - 1
96$weightB$double weightB=p + 1
100$p$int p=agingB - MAXIMAL_AGING
101$weightA$double weightA=p + 1
102$weightB$double weightB=(1 << p) - 1
110$nextX$double nextX
111$start$int start=0
112$end$int end=nbPoints
148$nextY$double nextY=computeObjectiveValue(nextX)
Math-41_buggy
2$values$final double[] values
2$weights$final double[] weights
3$mean$final double mean
3$begin$final int begin
3$length$final int length
5$var$double var=Double.NaN
11$accum$double accum=0.0
12$dev$double dev=0.0
13$accum2$double accum2=0.0
14$i$int i=begin
20$sumWts$double sumWts=0
21$i$int i=0
Math-41_fix
2$values$final double[] values
2$weights$final double[] weights
3$mean$final double mean
3$begin$final int begin
3$length$final int length
5$var$double var=Double.NaN
11$accum$double accum=0.0
12$dev$double dev=0.0
13$accum2$double accum2=0.0
14$i$int i=begin
20$sumWts$double sumWts=0
21$i$int i=begin
Math-42_buggy
3$negativeVarColumn$int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4$negativeVarBasicRow$Integer negativeVarBasicRow=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5$mostNegative$double mostNegative=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7$basicRows$Set<Integer> basicRows=new HashSet<Integer>()
8$coefficients$double[] coefficients=new double[getOriginalNumDecisionVariables()]
9$i$int i=0
10$colIndex$int colIndex=columnLabels.indexOf("x" + i)
15$basicRow$Integer basicRow=getBasicRow(colIndex)
Math-42_fix
3$negativeVarColumn$int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL)
4$negativeVarBasicRow$Integer negativeVarBasicRow=negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null
5$mostNegative$double mostNegative=negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow,getRhsOffset())
7$basicRows$Set<Integer> basicRows=new HashSet<Integer>()
8$coefficients$double[] coefficients=new double[getOriginalNumDecisionVariables()]
9$i$int i=0
10$colIndex$int colIndex=columnLabels.indexOf("x" + i)
15$basicRow$Integer basicRow=getBasicRow(colIndex)
Math-43_buggy
2$value$double value
Math-43_fix
2$value$double value
Math-44_buggy
2$interpolator$final AbstractStepInterpolator interpolator
3$y$final double[] y
3$yDot$final double[] yDot
3$tEnd$final double tEnd
6$previousT$double previousT=interpolator.getGlobalPreviousTime()
7$currentT$double currentT=interpolator.getGlobalCurrentTime()
12$state$EventState state
19$orderingSign$int orderingSign=interpolator.isForward() ? +1 : -1
20$occuringEvents$SortedSet<EventState> occuringEvents=new TreeSet<EventState>(new Comparator<EventState>(){\n  /** \n * {@inheritDoc} \n */\n  public int compare(  EventState es0,  EventState es1){\n    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());\n  }\n}\n)
23$es0$EventState es0
23$es1$EventState es1
29$state$final EventState state
39$iterator$Iterator<EventState> iterator=occuringEvents.iterator()
40$currentEvent$EventState currentEvent=iterator.next()
44$eventT$double eventT=currentEvent.getEventTime()
50$eventY$double[] eventY=interpolator.getInterpolatedState()
55$handler$final StepHandler handler
88$currentY$double[] currentY=interpolator.getInterpolatedState()
89$state$final EventState state
96$handler$StepHandler handler
Math-44_fix
2$interpolator$final AbstractStepInterpolator interpolator
3$y$final double[] y
3$yDot$final double[] yDot
3$tEnd$final double tEnd
6$previousT$double previousT=interpolator.getGlobalPreviousTime()
7$currentT$double currentT=interpolator.getGlobalCurrentTime()
11$state$EventState state
18$orderingSign$int orderingSign=interpolator.isForward() ? +1 : -1
19$occuringEvents$SortedSet<EventState> occuringEvents=new TreeSet<EventState>(new Comparator<EventState>(){\n  /** \n * {@inheritDoc} \n */\n  public int compare(  EventState es0,  EventState es1){\n    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());\n  }\n}\n)
22$es0$EventState es0
22$es1$EventState es1
28$state$final EventState state
38$iterator$Iterator<EventState> iterator=occuringEvents.iterator()
39$currentEvent$EventState currentEvent=iterator.next()
43$eventT$double eventT=currentEvent.getEventTime()
49$eventY$double[] eventY=interpolator.getInterpolatedState()
54$handler$final StepHandler handler
61$remaining$final EventState remaining
73$remaining$final EventState remaining
93$currentY$double[] currentY=interpolator.getInterpolatedState()
94$state$final EventState state
101$handler$StepHandler handler
Math-45_buggy
2$rowDimension$int rowDimension
2$columnDimension$int columnDimension
Math-45_fix
2$rowDimension$int rowDimension
2$columnDimension$int columnDimension
4$lRow$long lRow=(long)rowDimension
5$lCol$long lCol=(long)columnDimension
Math-48_buggy
4$x0$double x0=getMin()
5$x1$double x1=getMax()
6$f0$double f0=computeObjectiveValue(x0)
7$f1$double f1=computeObjectiveValue(x1)
23$ftol$double ftol=getFunctionValueAccuracy()
24$atol$double atol=getAbsoluteAccuracy()
25$rtol$double rtol=getRelativeAccuracy()
29$inverted$boolean inverted=false
34$x$double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35$fx$double fx=computeObjectiveValue(x)
Math-48_fix
4$x0$double x0=getMin()
5$x1$double x1=getMax()
6$f0$double f0=computeObjectiveValue(x0)
7$f1$double f1=computeObjectiveValue(x1)
23$ftol$double ftol=getFunctionValueAccuracy()
24$atol$double atol=getAbsoluteAccuracy()
25$rtol$double rtol=getRelativeAccuracy()
29$inverted$boolean inverted=false
34$x$double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35$fx$double fx=computeObjectiveValue(x)
Math-5_buggy
16$q$double q=real / imaginary
17$scale$double scale=1. / (real * q + imaginary)
20$q$double q=imaginary / real
21$scale$double scale=1. / (imaginary * q + real)
Math-5_fix
16$q$double q=real / imaginary
17$scale$double scale=1. / (real * q + imaginary)
20$q$double q=imaginary / real
21$scale$double scale=1. / (imaginary * q + real)
Math-50_buggy
4$x0$double x0=getMin()
5$x1$double x1=getMax()
6$f0$double f0=computeObjectiveValue(x0)
7$f1$double f1=computeObjectiveValue(x1)
23$ftol$double ftol=getFunctionValueAccuracy()
24$atol$double atol=getAbsoluteAccuracy()
25$rtol$double rtol=getRelativeAccuracy()
29$inverted$boolean inverted=false
34$x$double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35$fx$double fx=computeObjectiveValue(x)
Math-50_fix
4$x0$double x0=getMin()
5$x1$double x1=getMax()
6$f0$double f0=computeObjectiveValue(x0)
7$f1$double f1=computeObjectiveValue(x1)
23$ftol$double ftol=getFunctionValueAccuracy()
24$atol$double atol=getAbsoluteAccuracy()
25$rtol$double rtol=getRelativeAccuracy()
29$inverted$boolean inverted=false
34$x$double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35$fx$double fx=computeObjectiveValue(x)
Math-51_buggy
4$x0$double x0=getMin()
5$x1$double x1=getMax()
6$f0$double f0=computeObjectiveValue(x0)
7$f1$double f1=computeObjectiveValue(x1)
23$ftol$double ftol=getFunctionValueAccuracy()
24$atol$double atol=getAbsoluteAccuracy()
25$rtol$double rtol=getRelativeAccuracy()
29$inverted$boolean inverted=false
34$x$double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35$fx$double fx=computeObjectiveValue(x)
Math-51_fix
4$x0$double x0=getMin()
5$x1$double x1=getMax()
6$f0$double f0=computeObjectiveValue(x0)
7$f1$double f1=computeObjectiveValue(x1)
23$ftol$double ftol=getFunctionValueAccuracy()
24$atol$double atol=getAbsoluteAccuracy()
25$rtol$double rtol=getRelativeAccuracy()
29$inverted$boolean inverted=false
34$x$double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0))
35$fx$double fx=computeObjectiveValue(x)
61$delta$double delta=FastMath.max(rtol * FastMath.abs(x1),atol)
Math-52_buggy
2$u1$Vector3D u1
2$u2$Vector3D u2
2$v1$Vector3D v1
2$v2$Vector3D v2
5$u1u1$double u1u1=u1.getNormSq()
6$u2u2$double u2u2=u2.getNormSq()
7$v1v1$double v1v1=v1.getNormSq()
8$v2v2$double v2v2=v2.getNormSq()
17$u1u2$double u1u2=u1.dotProduct(u2)
18$v1v2$double v1v2=v1.dotProduct(v2)
19$coeffU$double coeffU=u1u2 / u1u1
20$coeffV$double coeffV=v1v2 / u1u1
21$beta$double beta=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22$alpha$double alpha=coeffU - beta * coeffV
26$uRef$Vector3D uRef=u1
27$vRef$Vector3D vRef=v1
28$v1Su1$Vector3D v1Su1=v1.subtract(u1)
29$v2Su2$Vector3D v2Su2=v2.subtract(u2)
30$k$Vector3D k=v1Su1.crossProduct(v2Su2)
31$u3$Vector3D u3=u1.crossProduct(u2)
32$c$double c=k.dotProduct(u3)
36$v3$Vector3D v3=Vector3D.crossProduct(v1,v2)
37$v3Su3$Vector3D v3Su3=v3.subtract(u3)
39$u2Prime$Vector3D u2Prime=u1.crossProduct(u3)
68$inv$double inv=1.0 / (c + c)
Math-52_fix
2$u1$Vector3D u1
2$u2$Vector3D u2
2$v1$Vector3D v1
2$v2$Vector3D v2
5$u1u1$double u1u1=u1.getNormSq()
6$u2u2$double u2u2=u2.getNormSq()
7$v1v1$double v1v1=v1.getNormSq()
8$v2v2$double v2v2=v2.getNormSq()
17$u1u2$double u1u2=u1.dotProduct(u2)
18$v1v2$double v1v2=v1.dotProduct(v2)
19$coeffU$double coeffU=u1u2 / u1u1
20$coeffV$double coeffV=v1v2 / u1u1
21$beta$double beta=FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV))
22$alpha$double alpha=coeffU - beta * coeffV
26$uRef$Vector3D uRef=u1
27$vRef$Vector3D vRef=v1
28$v1Su1$Vector3D v1Su1=v1.subtract(u1)
29$v2Su2$Vector3D v2Su2=v2.subtract(u2)
30$k$Vector3D k=v1Su1.crossProduct(v2Su2)
31$u3$Vector3D u3=u1.crossProduct(u2)
32$c$double c=k.dotProduct(u3)
33$inPlaneThreshold$double inPlaneThreshold=0.001
37$v3$Vector3D v3=Vector3D.crossProduct(v1,v2)
38$v3Su3$Vector3D v3Su3=v3.subtract(u3)
40$u2Prime$Vector3D u2Prime=u1.crossProduct(u3)
69$inv$double inv=1.0 / (c + c)
Math-53_buggy
2$rhs$Complex rhs
Math-53_fix
2$rhs$Complex rhs
Math-55_buggy
2$v1$final Vector3D v1
2$v2$final Vector3D v2
Math-55_fix
2$v1$final Vector3D v1
2$v2$final Vector3D v2
4$n1$double n1=v1.getNormSq()
5$n2$double n2=v2.getNormSq()
12$deltaExp$int deltaExp=(FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4
13$x1$double x1=FastMath.scalb(v1.x,-deltaExp)
14$y1$double y1=FastMath.scalb(v1.y,-deltaExp)
15$z1$double z1=FastMath.scalb(v1.z,-deltaExp)
16$x2$double x2=FastMath.scalb(v2.x,deltaExp)
17$y2$double y2=FastMath.scalb(v2.y,deltaExp)
18$z2$double z2=FastMath.scalb(v2.z,deltaExp)
27$ratio$double ratio=(x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2,2 * deltaExp)
28$rho$double rho=FastMath.rint(256 * ratio) / 256
30$x3$double x3=x1 - rho * x2
31$y3$double y3=y1 - rho * y2
32$z3$double z3=z1 - rho * z2
Math-56_buggy
2$index$int index
8$indices$int[] indices=new int[dimension]
10$count$int count=0
11$i$int i=0
12$idx$int idx=0
13$offset$int offset=uniCounterOffset[i]
23$idx$int idx=1
Math-56_fix
2$index$int index
8$indices$int[] indices=new int[dimension]
10$count$int count=0
11$i$int i=0
12$idx$int idx=0
13$offset$int offset=uniCounterOffset[i]
Math-57_buggy
3$points$final Collection<T> points
3$k$final int k
3$random$final Random random
5$pointSet$List<T> pointSet=new ArrayList<T>(points)
6$resultSet$List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>()
9$firstPoint$T firstPoint=pointSet.remove(random.nextInt(pointSet.size()))
12$dx2$double[] dx2=new double[pointSet.size()]
16$sum$int sum=0
17$i$int i=0
18$p$T p=pointSet.get(i)
19$nearest$Cluster<T> nearest=getNearestCluster(resultSet,p)
20$d$double d=p.distanceFrom(nearest.getCenter())
27$r$double r=random.nextDouble() * sum
28$i$int i=0
30$p$T p=pointSet.remove(i)
Math-57_fix
3$points$final Collection<T> points
3$k$final int k
3$random$final Random random
5$pointSet$List<T> pointSet=new ArrayList<T>(points)
6$resultSet$List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>()
9$firstPoint$T firstPoint=pointSet.remove(random.nextInt(pointSet.size()))
12$dx2$double[] dx2=new double[pointSet.size()]
16$sum$double sum=0
17$i$int i=0
18$p$T p=pointSet.get(i)
19$nearest$Cluster<T> nearest=getNearestCluster(resultSet,p)
20$d$double d=p.distanceFrom(nearest.getCenter())
27$r$double r=random.nextDouble() * sum
28$i$int i=0
30$p$T p=pointSet.remove(i)
Math-58_buggy
3$guess$double[] guess=(new ParameterGuesser(getObservations())).guess()
Math-58_fix
3$guess$double[] guess=(new ParameterGuesser(getObservations())).guess()
Math-59_buggy
2$a$final float a
2$b$final float b
Math-59_fix
2$a$final float a
2$b$final float b
Math-60_buggy
2$x$double x
3$dev$double dev=x - mean
7$ex$MaxIterationsExceededException ex
Math-60_fix
2$x$double x
3$dev$double dev=x - mean
Math-63_buggy
2$x$double x
2$y$double y
Math-63_fix
2$x$double x
2$y$double y
Math-64_buggy
14$delta$double delta=0
15$xNorm$double xNorm=0
16$diag$double[] diag=new double[cols]
17$oldX$double[] oldX=new double[cols]
18$oldRes$double[] oldRes=new double[rows]
19$work1$double[] work1=new double[cols]
20$work2$double[] work2=new double[cols]
21$work3$double[] work3=new double[cols]
28$firstIteration$boolean firstIteration=true
29$current$VectorialPointValuePair current=new VectorialPointValuePair(point,objective)
34$previous$VectorialPointValuePair previous=current
42$k$int k=0
43$pk$int pk=permutation[k]
52$k$int k=0
53$dk$double dk=jacNorm[k]
57$xk$double xk=dk * point[k]
69$maxCosine$double maxCosine=0
71$j$int j=0
72$pj$int pj=permutation[j]
73$s$double s=jacNorm[pj]
75$sum$double sum=0
76$i$int i=0
89$j$int j=0
94$ratio$double ratio=0
97$j$int j=0
98$pj$int pj=permutation[j]
101$previousCost$double previousCost=cost
102$tmpVec$double[] tmpVec=residuals
110$lmNorm$double lmNorm=0
111$j$int j=0
112$pj$int pj=permutation[j]
115$s$double s=diag[pj] * lmDir[pj]
129$actRed$double actRed=-1.0
131$r$double r=cost / previousCost
137$j$int j=0
138$pj$int pj=permutation[j]
139$dirJ$double dirJ=lmDir[pj]
141$i$int i=0
145$coeff1$double coeff1=0
146$j$int j=0
149$pc2$double pc2=previousCost * previousCost
151$coeff2$double coeff2=lmPar * lmNorm * lmNorm / pc2
152$preRed$double preRed=coeff1 + 2 * coeff2
153$dirDer$double dirDer=-(coeff1 + coeff2)
160$tmp$double tmp=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
177$k$int k=0
178$xK$double xK=diag[k] * point[k]
188$j$int j=0
189$pj$int pj=permutation[j]
Math-64_fix
14$delta$double delta=0
15$xNorm$double xNorm=0
16$diag$double[] diag=new double[cols]
17$oldX$double[] oldX=new double[cols]
18$oldRes$double[] oldRes=new double[rows]
19$oldObj$double[] oldObj=new double[rows]
20$qtf$double[] qtf=new double[rows]
21$work1$double[] work1=new double[cols]
22$work2$double[] work2=new double[cols]
23$work3$double[] work3=new double[cols]
30$firstIteration$boolean firstIteration=true
31$current$VectorialPointValuePair current=new VectorialPointValuePair(point,objective)
33$i$int i=0
39$previous$VectorialPointValuePair previous=current
47$k$int k=0
48$pk$int pk=permutation[k]
57$k$int k=0
58$dk$double dk=jacNorm[k]
62$xk$double xk=dk * point[k]
74$maxCosine$double maxCosine=0
76$j$int j=0
77$pj$int pj=permutation[j]
78$s$double s=jacNorm[pj]
80$sum$double sum=0
81$i$int i=0
96$j$int j=0
101$ratio$double ratio=0
104$j$int j=0
105$pj$int pj=permutation[j]
108$previousCost$double previousCost=cost
109$tmpVec$double[] tmpVec=residuals
120$lmNorm$double lmNorm=0
121$j$int j=0
122$pj$int pj=permutation[j]
125$s$double s=diag[pj] * lmDir[pj]
138$actRed$double actRed=-1.0
140$r$double r=cost / previousCost
146$j$int j=0
147$pj$int pj=permutation[j]
148$dirJ$double dirJ=lmDir[pj]
150$i$int i=0
154$coeff1$double coeff1=0
155$j$int j=0
158$pc2$double pc2=previousCost * previousCost
160$coeff2$double coeff2=lmPar * lmNorm * lmNorm / pc2
161$preRed$double preRed=coeff1 + 2 * coeff2
162$dirDer$double dirDer=-(coeff1 + coeff2)
169$tmp$double tmp=(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5
186$k$int k=0
187$xK$double xK=diag[k] * point[k]
203$j$int j=0
204$pj$int pj=permutation[j]
Math-69_buggy
3$tDistribution$TDistribution tDistribution=new TDistributionImpl(nObs - 2)
4$nVars$int nVars=correlationMatrix.getColumnDimension()
5$out$double[][] out=new double[nVars][nVars]
6$i$int i=0
7$j$int j=0
11$r$double r=correlationMatrix.getEntry(i,j)
12$t$double t=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
Math-69_fix
3$tDistribution$TDistribution tDistribution=new TDistributionImpl(nObs - 2)
4$nVars$int nVars=correlationMatrix.getColumnDimension()
5$out$double[][] out=new double[nVars][nVars]
6$i$int i=0
7$j$int j=0
11$r$double r=correlationMatrix.getEntry(i,j)
12$t$double t=Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)))
Math-7_buggy
2$interpolator$final AbstractStepInterpolator interpolator
3$y$final double[] y
3$yDot$final double[] yDot
3$tEnd$final double tEnd
6$previousT$double previousT=interpolator.getGlobalPreviousTime()
7$currentT$double currentT=interpolator.getGlobalCurrentTime()
11$state$EventState state
18$orderingSign$int orderingSign=interpolator.isForward() ? +1 : -1
19$occuringEvents$SortedSet<EventState> occuringEvents=new TreeSet<EventState>(new Comparator<EventState>(){\n  /** \n * {@inheritDoc} \n */\n  public int compare(  EventState es0,  EventState es1){\n    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());\n  }\n}\n)
22$es0$EventState es0
22$es1$EventState es1
28$state$final EventState state
38$iterator$Iterator<EventState> iterator=occuringEvents.iterator()
39$currentEvent$EventState currentEvent=iterator.next()
43$eventT$double eventT=currentEvent.getEventTime()
49$eventY$double[] eventY=interpolator.getInterpolatedState().clone()
56$handler$final StepHandler handler
63$remaining$final EventState remaining
69$needReset$boolean needReset=currentEvent.reset(eventT,eventY)
76$remaining$final EventState remaining
97$currentY$double[] currentY=interpolator.getInterpolatedState()
98$state$final EventState state
105$handler$StepHandler handler
Math-7_fix
2$interpolator$final AbstractStepInterpolator interpolator
3$y$final double[] y
3$yDot$final double[] yDot
3$tEnd$final double tEnd
6$previousT$double previousT=interpolator.getGlobalPreviousTime()
7$currentT$double currentT=interpolator.getGlobalCurrentTime()
11$state$EventState state
18$orderingSign$int orderingSign=interpolator.isForward() ? +1 : -1
19$occuringEvents$SortedSet<EventState> occuringEvents=new TreeSet<EventState>(new Comparator<EventState>(){\n  /** \n * {@inheritDoc} \n */\n  public int compare(  EventState es0,  EventState es1){\n    return orderingSign * Double.compare(es0.getEventTime(),es1.getEventTime());\n  }\n}\n)
22$es0$EventState es0
22$es1$EventState es1
28$state$final EventState state
38$iterator$Iterator<EventState> iterator=occuringEvents.iterator()
39$currentEvent$EventState currentEvent=iterator.next()
43$eventT$double eventT=currentEvent.getEventTime()
49$eventY$double[] eventY=interpolator.getInterpolatedState().clone()
52$state$final EventState state
58$handler$final StepHandler handler
68$needReset$boolean needReset=false
69$state$final EventState state
96$currentY$double[] currentY=interpolator.getInterpolatedState()
97$state$final EventState state
104$handler$StepHandler handler
Math-70_buggy
2$f$final UnivariateRealFunction f
2$min$double min
2$max$double max
2$initial$double initial
Math-70_fix
2$f$final UnivariateRealFunction f
2$min$double min
2$max$double max
2$initial$double initial
Math-72_buggy
2$f$final UnivariateRealFunction f
3$min$final double min
3$max$final double max
3$initial$final double initial
10$yInitial$double yInitial=f.value(initial)
17$yMin$double yMin=f.value(min)
29$yMax$double yMax=f.value(max)
Math-72_fix
2$f$final UnivariateRealFunction f
3$min$final double min
3$max$final double max
3$initial$final double initial
10$yInitial$double yInitial=f.value(initial)
17$yMin$double yMin=f.value(min)
29$yMax$double yMax=f.value(max)
Math-73_buggy
2$f$final UnivariateRealFunction f
3$min$final double min
3$max$final double max
3$initial$final double initial
10$yInitial$double yInitial=f.value(initial)
17$yMin$double yMin=f.value(min)
29$yMax$double yMax=f.value(max)
Math-73_fix
2$f$final UnivariateRealFunction f
3$min$final double min
3$max$final double max
3$initial$final double initial
10$yInitial$double yInitial=f.value(initial)
17$yMin$double yMin=f.value(min)
29$yMax$double yMax=f.value(max)
Math-74_buggy
2$equations$final FirstOrderDifferentialEquations equations
3$t0$final double t0
3$y0$final double[] y0
4$t$final double t
4$y$final double[] y
10$forward$boolean forward=t > t0
13$stages$int stages=c.length + 1
17$yDotK$double[][] yDotK=new double[stages][y0.length]
18$yTmp$double[] yTmp=new double[y0.length]
21$interpolator$AbstractStepInterpolator interpolator
23$rki$RungeKuttaStepInterpolator rki=(RungeKuttaStepInterpolator)prototype.copy()
33$hNew$double hNew=0
34$firstTime$boolean firstTime=true
35$handler$StepHandler handler
38$manager$CombinedEventsManager manager=addEndTimeChecker(t0,t,eventsHandlersManager)
39$lastStep$boolean lastStep=false
46$error$double error=0
47$loop$boolean loop=true
55$scale$double[] scale
70$k$int k=1
72$j$int j=0
73$sum$double sum=a[k - 1][0] * yDotK[0][j]
74$l$int l=1
85$j$int j=0
86$sum$double sum=b[0] * yDotK[0][j]
87$l$int l=1
100$dt$double dt=manager.getEventTime() - stepStart
115$factor$double factor=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
124$nextStep$double nextStep=stepStart + stepSize
131$handler$StepHandler handler
154$factor$double factor=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
157$scaledH$double scaledH=stepSize * factor
158$nextT$double nextT=stepStart + scaledH
159$nextIsLast$boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t)
165$stopTime$double stopTime=stepStart
Math-74_fix
2$equations$final FirstOrderDifferentialEquations equations
3$t0$final double t0
3$y0$final double[] y0
4$t$final double t
4$y$final double[] y
10$forward$boolean forward=t > t0
13$stages$int stages=c.length + 1
17$yDotK$double[][] yDotK=new double[stages][y0.length]
18$yTmp$double[] yTmp=new double[y0.length]
21$interpolator$AbstractStepInterpolator interpolator
23$rki$RungeKuttaStepInterpolator rki=(RungeKuttaStepInterpolator)prototype.copy()
33$hNew$double hNew=0
34$firstTime$boolean firstTime=true
35$handler$StepHandler handler
38$manager$CombinedEventsManager manager=addEndTimeChecker(t0,t,eventsHandlersManager)
39$lastStep$boolean lastStep=false
46$error$double error=0
47$loop$boolean loop=true
55$scale$double[] scale=new double[y0.length]
57$i$int i=0
61$i$int i=0
73$k$int k=1
75$j$int j=0
76$sum$double sum=a[k - 1][0] * yDotK[0][j]
77$l$int l=1
88$j$int j=0
89$sum$double sum=b[0] * yDotK[0][j]
90$l$int l=1
103$dt$double dt=manager.getEventTime() - stepStart
118$factor$double factor=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
127$nextStep$double nextStep=stepStart + stepSize
134$handler$StepHandler handler
157$factor$double factor=Math.min(maxGrowth,Math.max(minReduction,safety * Math.pow(error,exp)))
160$scaledH$double scaledH=stepSize * factor
161$nextT$double nextT=stepStart + scaledH
162$nextIsLast$boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t)
168$stopTime$double stopTime=stepStart
Math-75_buggy
2$v$Object v
Math-75_fix
2$v$Object v
Math-78_buggy
2$interpolator$final StepInterpolator interpolator
8$t1$double t1=interpolator.getCurrentTime()
9$n$int n=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10$h$double h=(t1 - t0) / n
12$ta$double ta=t0
13$ga$double ga=g0
14$tb$double tb=t0 + (interpolator.isForward() ? convergence : -convergence)
15$i$int i=0
20$gb$double gb=handler.g(tb,interpolator.getInterpolatedState())
38$f$UnivariateRealFunction f=new UnivariateRealFunction(){\n  public double value(  final double t) throws FunctionEvaluationException {\n    try {\n      interpolator.setInterpolatedTime(t);\n      return handler.g(t,interpolator.getInterpolatedState());\n    }\n catch (    DerivativeException e) {\n      throw new FunctionEvaluationException(e,t);\n    }\n catch (    EventException e) {\n      throw new FunctionEvaluationException(e,t);\n    }\n  }\n}
39$t$final double t
43$e$DerivativeException e
45$e$EventException e
50$solver$BrentSolver solver=new BrentSolver()
53$root$double root=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
88$e$FunctionEvaluationException e
89$cause$Throwable cause=e.getCause()
Math-78_fix
2$interpolator$final StepInterpolator interpolator
8$t1$double t1=interpolator.getCurrentTime()
9$n$int n=Math.max(1,(int)Math.ceil(Math.abs(t1 - t0) / maxCheckInterval))
10$h$double h=(t1 - t0) / n
12$ta$double ta=t0
13$ga$double ga=g0
14$tb$double tb=t0 + (interpolator.isForward() ? convergence : -convergence)
15$i$int i=0
20$gb$double gb=handler.g(tb,interpolator.getInterpolatedState())
34$epsilon$double epsilon=(forward ? 0.25 : -0.25) * convergence
35$k$int k=0
49$f$UnivariateRealFunction f=new UnivariateRealFunction(){\n  public double value(  final double t) throws FunctionEvaluationException {\n    try {\n      interpolator.setInterpolatedTime(t);\n      return handler.g(t,interpolator.getInterpolatedState());\n    }\n catch (    DerivativeException e) {\n      throw new FunctionEvaluationException(e,t);\n    }\n catch (    EventException e) {\n      throw new FunctionEvaluationException(e,t);\n    }\n  }\n}
50$t$final double t
54$e$DerivativeException e
56$e$EventException e
61$solver$BrentSolver solver=new BrentSolver()
64$root$double root=(ta <= tb) ? solver.solve(f,ta,tb) : solver.solve(f,tb,ta)
99$e$FunctionEvaluationException e
100$cause$Throwable cause=e.getCause()
Math-79_buggy
2$p1$int[] p1
2$p2$int[] p2
3$sum$int sum=0
4$i$int i=0
5$dp$int dp=p1[i] - p2[i]
Math-79_fix
2$p1$int[] p1
2$p2$int[] p2
3$sum$double sum=0
4$i$int i=0
5$dp$double dp=p1[i] - p2[i]
Math-8_buggy
2$sampleSize$int sampleSize
8$out$T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize)
10$i$int i=0
Math-8_fix
2$sampleSize$int sampleSize
8$out$Object[] out=new Object[sampleSize]
10$i$int i=0
Math-80_buggy
2$n$final int n
2$step$final int step
5$j$int j=4 * n - 1
6$i$int i=0
7$k$int k=0
8$tmp$double tmp=work[i + k]
Math-80_fix
2$n$final int n
2$step$final int step
5$j$int j=4 * (n - 1)
6$i$int i=0
7$k$int k=0
8$tmp$double tmp=work[i + k]
Math-82_buggy
2$col$final int col
2$tableau$final SimplexTableau tableau
3$minRatio$double minRatio=Double.MAX_VALUE
4$minRatioPos$Integer minRatioPos=null
5$i$int i=tableau.getNumObjectiveFunctions()
6$rhs$double rhs=tableau.getEntry(i,tableau.getWidth() - 1)
7$entry$double entry=tableau.getEntry(i,col)
9$ratio$double ratio=rhs / entry
Math-82_fix
2$col$final int col
2$tableau$final SimplexTableau tableau
3$minRatio$double minRatio=Double.MAX_VALUE
4$minRatioPos$Integer minRatioPos=null
5$i$int i=tableau.getNumObjectiveFunctions()
6$rhs$double rhs=tableau.getEntry(i,tableau.getWidth() - 1)
7$entry$double entry=tableau.getEntry(i,col)
9$ratio$double ratio=rhs / entry
Math-84_buggy
2$comparator$final Comparator<RealPointValuePair> comparator
10$original$RealPointValuePair[] original=simplex
11$best$RealPointValuePair best=original[0]
14$reflected$RealPointValuePair reflected=evaluateNewSimplex(original,1.0,comparator)
18$reflectedSimplex$RealPointValuePair[] reflectedSimplex=simplex
19$expanded$RealPointValuePair expanded=evaluateNewSimplex(original,khi,comparator)
30$contracted$RealPointValuePair contracted=evaluateNewSimplex(original,gamma,comparator)
Math-84_fix
2$comparator$final Comparator<RealPointValuePair> comparator
5$checker$RealConvergenceChecker checker=getConvergenceChecker()
11$original$RealPointValuePair[] original=simplex
12$best$RealPointValuePair best=original[0]
15$reflected$RealPointValuePair reflected=evaluateNewSimplex(original,1.0,comparator)
19$reflectedSimplex$RealPointValuePair[] reflectedSimplex=simplex
20$expanded$RealPointValuePair expanded=evaluateNewSimplex(original,khi,comparator)
31$contracted$RealPointValuePair contracted=evaluateNewSimplex(original,gamma,comparator)
38$iter$int iter=getIterations()
39$converged$boolean converged=true
40$i$int i=0
Math-85_buggy
2$function$UnivariateRealFunction function
3$initial$double initial
3$lowerBound$double lowerBound
3$upperBound$double upperBound
4$maximumIterations$int maximumIterations
19$a$double a=initial
20$b$double b=initial
21$fa$double fa
22$fb$double fb
23$numIterations$int numIterations=0
Math-85_fix
2$function$UnivariateRealFunction function
3$initial$double initial
3$lowerBound$double lowerBound
3$upperBound$double upperBound
4$maximumIterations$int maximumIterations
19$a$double a=initial
20$b$double b=initial
21$fa$double fa
22$fb$double fb
23$numIterations$int numIterations=0
Math-86_buggy
2$matrix$final RealMatrix matrix
3$relativeSymmetryThreshold$final double relativeSymmetryThreshold
4$absolutePositivityThreshold$final double absolutePositivityThreshold
13$order$int order=matrix.getRowDimension()
19$i$int i=0
21$lI$double[] lI=lTData[i]
27$j$int j=i + 1
28$lJ$double[] lJ=lTData[j]
29$lIJ$double lIJ=lI[j]
30$lJI$double lJI=lJ[i]
31$maxDelta$double maxDelta=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
41$i$int i=0
43$ltI$double[] ltI=lTData[i]
48$inverse$double inverse=1.0 / ltI[i]
50$q$int q=order - 1
52$ltQ$double[] ltQ=lTData[q]
53$p$int p=q
Math-86_fix
2$matrix$final RealMatrix matrix
3$relativeSymmetryThreshold$final double relativeSymmetryThreshold
4$absolutePositivityThreshold$final double absolutePositivityThreshold
13$order$int order=matrix.getRowDimension()
19$i$int i=0
21$lI$double[] lI=lTData[i]
24$j$int j=i + 1
25$lJ$double[] lJ=lTData[j]
26$lIJ$double lIJ=lI[j]
27$lJI$double lJI=lJ[i]
28$maxDelta$double maxDelta=relativeSymmetryThreshold * Math.max(Math.abs(lIJ),Math.abs(lJI))
38$i$int i=0
40$ltI$double[] ltI=lTData[i]
48$inverse$double inverse=1.0 / ltI[i]
50$q$int q=order - 1
52$ltQ$double[] ltQ=lTData[q]
53$p$int p=q
Math-87_buggy
2$col$final int col
3$row$Integer row=null
4$i$int i=getNumObjectiveFunctions()
Math-87_fix
2$col$final int col
3$row$Integer row=null
4$i$int i=getNumObjectiveFunctions()
Math-88_buggy
3$coefficients$double[] coefficients=new double[getOriginalNumDecisionVariables()]
4$basicRow$Integer basicRow=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6$mostNegative$double mostNegative=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7$i$int i=0
15$j$int j=getNumObjectiveFunctions()
Math-88_fix
3$coefficients$double[] coefficients=new double[getOriginalNumDecisionVariables()]
4$basicRow$Integer basicRow=getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables())
6$mostNegative$double mostNegative=basicRow == null ? 0 : getEntry(basicRow,getRhsOffset())
7$basicRows$Set<Integer> basicRows=new HashSet<Integer>()
8$i$int i=0
Math-89_buggy
2$v$Object v
Math-89_fix
2$v$Object v
Math-9_buggy
3$reverted$Line reverted=new Line(zero,zero.subtract(direction))
Math-9_fix
3$reverted$Line reverted=new Line(this)
Math-90_buggy
2$v$Object v
14$obj$Object obj=v
19$count$Long count=(Long)freqTable.get(obj)
25$ex$ClassCastException ex
Math-90_fix
2$v$Object v
Math-91_buggy
2$object$Fraction object
3$nOd$double nOd=doubleValue()
4$dOn$double dOn=object.doubleValue()
Math-91_fix
2$object$Fraction object
3$nOd$long nOd=((long)numerator) * object.denominator
4$dOn$long dOn=((long)denominator) * object.numerator
Math-94_buggy
2$u$int u
2$v$int v
18$k$int k=0
30$t$int t=((u & 1) == 1) ? v : -(u / 2)
Math-94_fix
2$u$int u
2$v$int v
18$k$int k=0
30$t$int t=((u & 1) == 1) ? v : -(u / 2)
Math-95_buggy
2$p$double p
3$ret$double ret
4$d$double d=getDenominatorDegreesOfFreedom()
Math-95_fix
2$p$double p
3$ret$double ret=1.0
4$d$double d=getDenominatorDegreesOfFreedom()
Math-96_buggy
2$other$Object other
3$ret$boolean ret
11$rhs$Complex rhs=(Complex)other
17$ex$ClassCastException ex
Math-96_fix
2$other$Object other
3$ret$boolean ret
11$rhs$Complex rhs=(Complex)other
17$ex$ClassCastException ex
Math-97_buggy
2$min$double min
2$max$double max
8$ret$double ret=Double.NaN
10$yMin$double yMin=f.value(min)
11$yMax$double yMax=f.value(max)
14$sign$double sign=yMin * yMax
Math-97_fix
2$min$double min
2$max$double max
8$ret$double ret=Double.NaN
10$yMin$double yMin=f.value(min)
11$yMax$double yMax=f.value(max)
14$sign$double sign=yMin * yMax
Mockito-1_buggy
2$invocation$Invocation invocation
4$indexOfVararg$int indexOfVararg=invocation.getRawArguments().length - 1
8$position$int position=0
9$m$Matcher m=matchers.get(position)
Mockito-1_fix
2$invocation$Invocation invocation
4$indexOfVararg$int indexOfVararg=invocation.getRawArguments().length - 1
5$position$int position=0
6$m$Matcher m=matchers.get(position)
11$position$int position=indexOfVararg
12$m$Matcher m=matchers.get(position)
19$position$int position=0
20$m$Matcher m=matchers.get(position)
Mockito-12_buggy
2$field$Field field
3$generic$Type generic=field.getGenericType()
5$actual$Type actual=((ParameterizedType)generic).getActualTypeArguments()[0]
Mockito-12_fix
2$field$Field field
3$generic$Type generic=field.getGenericType()
5$actual$Type actual=((ParameterizedType)generic).getActualTypeArguments()[0]
Mockito-13_buggy
2$invocation$Invocation invocation
5$invocationMatcher$InvocationMatcher invocationMatcher=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10$verificationMode$VerificationMode verificationMode=mockingProgress.pullVerificationMode()
12$invocationMatcher$InvocationMatcher invocationMatcher=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22$data$VerificationDataImpl data=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
31$ongoingStubbing$OngoingStubbingImpl<T> ongoingStubbing=new OngoingStubbingImpl<T>(invocationContainerImpl)
34$stubbedInvocation$StubbedInvocationMatcher stubbedInvocation=invocationContainerImpl.findAnswerFor(invocation)
40$ret$Object ret=mockSettings.getDefaultAnswer().answer(invocation)
Mockito-13_fix
2$invocation$Invocation invocation
5$invocationMatcher$InvocationMatcher invocationMatcher=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
10$verificationMode$VerificationMode verificationMode=mockingProgress.pullVerificationMode()
12$invocationMatcher$InvocationMatcher invocationMatcher=matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),invocation)
22$data$VerificationDataImpl data=new VerificationDataImpl(invocationContainerImpl,invocationMatcher)
33$ongoingStubbing$OngoingStubbingImpl<T> ongoingStubbing=new OngoingStubbingImpl<T>(invocationContainerImpl)
36$stubbedInvocation$StubbedInvocationMatcher stubbedInvocation=invocationContainerImpl.findAnswerFor(invocation)
42$ret$Object ret=mockSettings.getDefaultAnswer().answer(invocation)
Mockito-18_buggy
2$type$Class<?> type
Mockito-18_fix
2$type$Class<?> type
Mockito-20_buggy
2$settings$MockCreationSettings<T> settings
2$handler$MockHandler handler
6$mockedProxyType$Class<? extends T> mockedProxyType=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10$mockInstance$T mockInstance=null
13$mockAccess$MockMethodInterceptor.MockAccess mockAccess=(MockMethodInterceptor.MockAccess)mockInstance
17$cce$ClassCastException cce
28$e$org.mockito.internal.creation.instance.InstantiationException e
Mockito-20_fix
2$settings$MockCreationSettings<T> settings
2$handler$MockHandler handler
6$mockedProxyType$Class<? extends T> mockedProxyType=cachingMockBytecodeGenerator.get(settings.getTypeToMock(),settings.getExtraInterfaces())
10$instantiator$Instantiator instantiator=new InstantiatorProvider().getInstantiator(settings)
11$mockInstance$T mockInstance=null
14$mockAccess$MockMethodInterceptor.MockAccess mockAccess=(MockMethodInterceptor.MockAccess)mockInstance
18$cce$ClassCastException cce
29$e$org.mockito.internal.creation.instance.InstantiationException e
Mockito-22_buggy
2$o1$Object o1
2$o2$Object o2
Mockito-22_fix
2$o1$Object o1
2$o2$Object o2
Mockito-24_buggy
2$invocation$InvocationOnMock invocation
4$mock$Object mock=invocation.getMock()
5$name$MockName name=mockUtil.getMockName(mock)
18$returnType$Class<?> returnType=invocation.getMethod().getReturnType()
Mockito-24_fix
2$invocation$InvocationOnMock invocation
4$mock$Object mock=invocation.getMock()
5$name$MockName name=mockUtil.getMockName(mock)
18$returnType$Class<?> returnType=invocation.getMethod().getReturnType()
Mockito-27_buggy
2$mock$T mock
3$oldMockHandler$MockHandlerInterface<T> oldMockHandler=getMockHandler(mock)
4$newMockHandler$MockHandler<T> newMockHandler=new MockHandler<T>(oldMockHandler)
5$newFilter$MethodInterceptorFilter newFilter=new MethodInterceptorFilter(newMockHandler,(MockSettingsImpl)org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS))
Mockito-27_fix
2$mock$T mock
3$oldMockHandler$MockHandlerInterface<T> oldMockHandler=getMockHandler(mock)
4$newFilter$MethodInterceptorFilter newFilter=newMethodInterceptorFilter(oldMockHandler.getMockSettings())
Mockito-28_buggy
2$awaitingInjectionClazz$Class<?> awaitingInjectionClazz
2$mocks$Set<Object> mocks
2$fieldInstance$Object fieldInstance
3$field$Field field
Mockito-28_fix
2$awaitingInjectionClazz$Class<?> awaitingInjectionClazz
2$mocks$Set<Object> mocks
2$fieldInstance$Object fieldInstance
3$field$Field field
4$injected$Object injected=mockCandidateFilter.filterCandidate(mocks,field,fieldInstance).thenInject()
Mockito-29_buggy
2$description$Description description
Mockito-29_fix
2$description$Description description
Mockito-33_buggy
2$candidate$Invocation candidate
5$m1$Method m1=invocation.getMethod()
6$m2$Method m2=candidate.getMethod()
Mockito-33_fix
2$candidate$Invocation candidate
5$m1$Method m1=invocation.getMethod()
6$m2$Method m2=candidate.getMethod()
10$params1$Class[] params1=m1.getParameterTypes()
11$params2$Class[] params2=m2.getParameterTypes()
13$i$int i=0
Mockito-34_buggy
2$i$Invocation i
3$k$int k=0
4$m$Matcher m
Mockito-34_fix
2$i$Invocation i
3$k$int k=0
4$m$Matcher m
Mockito-38_buggy
2$m$Matcher m
2$arg$Object arg
Mockito-38_fix
2$m$Matcher m
2$arg$Object arg
Mockito-5_buggy
2$data$VerificationData data
3$error$AssertionError error=null
15$e$MockitoAssertionError e
18$e$org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e
Mockito-5_fix
2$data$VerificationData data
3$error$AssertionError error=null
15$e$MockitoAssertionError e
18$e$AssertionError e
Mockito-7_buggy
3$type$Type type
Mockito-7_fix
3$type$Type type
Mockito-8_buggy
2$classType$Type classType
6$parameterizedType$ParameterizedType parameterizedType=(ParameterizedType)classType
7$typeParameters$TypeVariable[] typeParameters=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8$actualTypeArguments$Type[] actualTypeArguments=parameterizedType.getActualTypeArguments()
9$i$int i=0
10$typeParameter$TypeVariable typeParameter=typeParameters[i]
11$actualTypeArgument$Type actualTypeArgument=actualTypeArguments[i]
Mockito-8_fix
2$classType$Type classType
6$parameterizedType$ParameterizedType parameterizedType=(ParameterizedType)classType
7$typeParameters$TypeVariable[] typeParameters=((Class<?>)parameterizedType.getRawType()).getTypeParameters()
8$actualTypeArguments$Type[] actualTypeArguments=parameterizedType.getActualTypeArguments()
9$i$int i=0
10$typeParameter$TypeVariable typeParameter=typeParameters[i]
11$actualTypeArgument$Type actualTypeArgument=actualTypeArguments[i]
Time-14_buggy
2$partial$ReadablePartial partial
2$fieldIndex$int fieldIndex
2$values$int[] values
2$valueToAdd$int valueToAdd
10$instant$long instant=0L
11$i$int i=0
11$isize$int isize=partial.size()
Time-14_fix
2$partial$ReadablePartial partial
2$fieldIndex$int fieldIndex
2$values$int[] values
2$valueToAdd$int valueToAdd
10$curMonth0$int curMonth0=partial.getValue(0) - 1
11$newMonth$int newMonth=((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1
15$instant$long instant=0L
16$i$int i=0
16$isize$int isize=partial.size()
Time-15_buggy
2$val1$long val1
2$val2$int val2
11$total$long total=val1 * val2
Time-15_fix
2$val1$long val1
2$val2$int val2
14$total$long total=val1 * val2
Time-16_buggy
2$instant$ReadWritableInstant instant
2$text$String text
2$position$int position
3$parser$DateTimeParser parser=requireParser()
8$instantMillis$long instantMillis=instant.getMillis()
9$chrono$Chronology chrono=instant.getChronology()
10$instantLocal$long instantLocal=instantMillis + chrono.getZone().getOffset(instantMillis)
13$bucket$DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,iDefaultYear)
15$newPos$int newPos=parser.parseInto(bucket,text,position)
18$parsedOffset$int parsedOffset=bucket.getOffsetInteger()
19$parsedZone$DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset)
Time-16_fix
2$instant$ReadWritableInstant instant
2$text$String text
2$position$int position
3$parser$DateTimeParser parser=requireParser()
8$instantMillis$long instantMillis=instant.getMillis()
9$chrono$Chronology chrono=instant.getChronology()
10$instantLocal$long instantLocal=instantMillis + chrono.getZone().getOffset(instantMillis)
13$bucket$DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,chrono.year().get(instantLocal))
15$newPos$int newPos=parser.parseInto(bucket,text,position)
18$parsedOffset$int parsedOffset=bucket.getOffsetInteger()
19$parsedZone$DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset)
Time-17_buggy
2$instant$long instant
2$earlierOrLater$boolean earlierOrLater
6$instantBefore$long instantBefore=convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR)
7$instantAfter$long instantAfter=convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR)
13$local$long local=convertUTCToLocal(instant)
Time-17_fix
2$instant$long instant
2$earlierOrLater$boolean earlierOrLater
6$instantBefore$long instantBefore=instant - 3 * DateTimeConstants.MILLIS_PER_HOUR
7$instantAfter$long instantAfter=instant + 3 * DateTimeConstants.MILLIS_PER_HOUR
8$offsetBefore$long offsetBefore=getOffset(instantBefore)
9$offsetAfter$long offsetAfter=getOffset(instantAfter)
15$diff$long diff=offsetBefore - offsetAfter
16$transition$long transition=nextTransition(instantBefore)
17$overlapStart$long overlapStart=transition - diff
18$overlapEnd$long overlapEnd=transition + diff
24$afterStart$long afterStart=instant - overlapStart
Time-18_buggy
2$year$int year
2$monthOfYear$int monthOfYear
2$dayOfMonth$int dayOfMonth
3$hourOfDay$int hourOfDay
3$minuteOfHour$int minuteOfHour
4$secondOfMinute$int secondOfMinute
4$millisOfSecond$int millisOfSecond
7$base$Chronology base
15$instant$long instant
Time-18_fix
2$year$int year
2$monthOfYear$int monthOfYear
2$dayOfMonth$int dayOfMonth
3$hourOfDay$int hourOfDay
3$minuteOfHour$int minuteOfHour
4$secondOfMinute$int secondOfMinute
4$millisOfSecond$int millisOfSecond
7$base$Chronology base
15$instant$long instant
20$ex$IllegalFieldValueException ex
Time-19_buggy
2$instantLocal$long instantLocal
4$offsetLocal$int offsetLocal=getOffset(instantLocal)
6$instantAdjusted$long instantAdjusted=instantLocal - offsetLocal
7$offsetAdjusted$int offsetAdjusted=getOffset(instantAdjusted)
16$nextLocal$long nextLocal=nextTransition(instantAdjusted)
17$nextAdjusted$long nextAdjusted=nextTransition(instantLocal - offsetAdjusted)
23$prev$long prev=previousTransition(instantAdjusted)
25$offsetPrev$int offsetPrev=getOffset(prev)
26$diff$int diff=offsetPrev - offsetLocal
Time-19_fix
2$instantLocal$long instantLocal
4$offsetLocal$int offsetLocal=getOffset(instantLocal)
6$instantAdjusted$long instantAdjusted=instantLocal - offsetLocal
7$offsetAdjusted$int offsetAdjusted=getOffset(instantAdjusted)
16$nextLocal$long nextLocal=nextTransition(instantAdjusted)
17$nextAdjusted$long nextAdjusted=nextTransition(instantLocal - offsetAdjusted)
23$prev$long prev=previousTransition(instantAdjusted)
25$offsetPrev$int offsetPrev=getOffset(prev)
26$diff$int diff=offsetPrev - offsetLocal
Time-20_buggy
2$bucket$DateTimeParserBucket bucket
2$text$String text
2$position$int position
3$str$String str=text.substring(position)
4$id$String id
Time-20_fix
2$bucket$DateTimeParserBucket bucket
2$text$String text
2$position$int position
3$str$String str=text.substring(position)
4$best$String best=null
5$id$String id
Time-22_buggy
2$duration$long duration
Time-22_fix
2$duration$long duration
6$values$int[] values=ISOChronology.getInstanceUTC().get(this,duration)
Time-23_buggy
2$id$String id
3$map$Map<String,String> map=cZoneIdConversion
Time-23_fix
2$id$String id
3$map$Map<String,String> map=cZoneIdConversion
Time-24_buggy
2$resetFields$boolean resetFields
2$text$String text
3$savedFields$SavedField[] savedFields=iSavedFields
4$count$int count=iSavedFieldsCount
12$months$DurationField months=DurationFieldType.months().getField(iChrono)
13$days$DurationField days=DurationFieldType.days().getField(iChrono)
14$first$DurationField first=savedFields[0].iField.getDurationField()
21$millis$long millis=iMillis
23$i$int i=0
26$e$IllegalFieldValueException e
36$offset$int offset=iZone.getOffsetFromLocal(millis)
39$message$String message="Illegal instant due to time zone offset transition (" + iZone + ')'
Time-24_fix
2$resetFields$boolean resetFields
2$text$String text
3$savedFields$SavedField[] savedFields=iSavedFields
4$count$int count=iSavedFieldsCount
12$months$DurationField months=DurationFieldType.months().getField(iChrono)
13$days$DurationField days=DurationFieldType.days().getField(iChrono)
14$first$DurationField first=savedFields[0].iField.getDurationField()
21$millis$long millis=iMillis
23$i$int i=0
27$i$int i=0
31$e$IllegalFieldValueException e
41$offset$int offset=iZone.getOffsetFromLocal(millis)
44$message$String message="Illegal instant due to time zone offset transition (" + iZone + ')'
Time-25_buggy
2$instantLocal$long instantLocal
4$offsetLocal$int offsetLocal=getOffset(instantLocal)
6$instantAdjusted$long instantAdjusted=instantLocal - offsetLocal
7$offsetAdjusted$int offsetAdjusted=getOffset(instantAdjusted)
16$nextLocal$long nextLocal=nextTransition(instantAdjusted)
17$nextAdjusted$long nextAdjusted=nextTransition(instantLocal - offsetAdjusted)
Time-25_fix
2$instantLocal$long instantLocal
4$offsetLocal$int offsetLocal=getOffset(instantLocal)
6$instantAdjusted$long instantAdjusted=instantLocal - offsetLocal
7$offsetAdjusted$int offsetAdjusted=getOffset(instantAdjusted)
16$nextLocal$long nextLocal=nextTransition(instantAdjusted)
17$nextAdjusted$long nextAdjusted=nextTransition(instantLocal - offsetAdjusted)
23$prev$long prev=previousTransition(instantAdjusted)
25$offsetPrev$int offsetPrev=getOffset(prev)
26$diff$int diff=offsetPrev - offsetLocal
Time-27_buggy
2$elementPairs$List<Object> elementPairs
2$notPrinter$boolean notPrinter
2$notParser$boolean notParser
6$size$int size=elementPairs.size()
8$sep$Separator sep=(Separator)elementPairs.get(0)
9$f$PeriodFormatter f=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
13$comp$Object[] comp=createComposite(elementPairs)
Time-27_fix
2$elementPairs$List<Object> elementPairs
2$notPrinter$boolean notPrinter
2$notParser$boolean notParser
6$size$int size=elementPairs.size()
8$sep$Separator sep=(Separator)elementPairs.get(0)
10$f$PeriodFormatter f=toFormatter(elementPairs.subList(2,size),notPrinter,notParser)
15$comp$Object[] comp=createComposite(elementPairs)
Time-4_buggy
2$fieldType$DateTimeFieldType fieldType
2$value$int value
6$index$int index=indexOf(fieldType)
8$newTypes$DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length + 1]
9$newValues$int[] newValues=new int[newTypes.length]
12$i$int i=0
13$unitField$DurationField unitField=fieldType.getDurationType().getField(iChronology)
16$loopType$DateTimeFieldType loopType=iTypes[i]
17$loopUnitField$DurationField loopUnitField=loopType.getDurationType().getField(iChronology)
19$compare$int compare=unitField.compareTo(loopUnitField)
23$rangeField$DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology)
24$loopRangeField$DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology)
40$newPartial$Partial newPartial=new Partial(iChronology,newTypes,newValues)
47$newValues$int[] newValues=getValues()
Time-4_fix
2$fieldType$DateTimeFieldType fieldType
2$value$int value
6$index$int index=indexOf(fieldType)
8$newTypes$DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length + 1]
9$newValues$int[] newValues=new int[newTypes.length]
12$i$int i=0
13$unitField$DurationField unitField=fieldType.getDurationType().getField(iChronology)
16$loopType$DateTimeFieldType loopType=iTypes[i]
17$loopUnitField$DurationField loopUnitField=loopType.getDurationType().getField(iChronology)
19$compare$int compare=unitField.compareTo(loopUnitField)
23$rangeField$DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology)
24$loopRangeField$DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology)
40$newPartial$Partial newPartial=new Partial(newTypes,newValues,iChronology)
47$newValues$int[] newValues=getValues()
Time-5_buggy
2$type$PeriodType type
4$millis$long millis=getMillis()
10$result$Period result=new Period(millis,type,ISOChronology.getInstanceUTC())
11$years$int years=getYears()
12$months$int months=getMonths()
Time-5_fix
2$type$PeriodType type
4$millis$long millis=getMillis()
10$result$Period result=new Period(millis,type,ISOChronology.getInstanceUTC())
11$years$int years=getYears()
12$months$int months=getMonths()
14$totalMonths$long totalMonths=years * 12L + months
16$normalizedYears$int normalizedYears=FieldUtils.safeToInt(totalMonths / 12)
21$normalizedMonths$int normalizedMonths=FieldUtils.safeToInt(totalMonths)
Time-7_buggy
2$instant$ReadWritableInstant instant
2$text$String text
2$position$int position
3$parser$DateTimeParser parser=requireParser()
8$instantMillis$long instantMillis=instant.getMillis()
9$chrono$Chronology chrono=instant.getChronology()
10$instantLocal$long instantLocal=instantMillis + chrono.getZone().getOffset(instantMillis)
12$defaultYear$int defaultYear=chrono.year().get(instantLocal)
14$bucket$DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16$newPos$int newPos=parser.parseInto(bucket,text,position)
19$parsedOffset$int parsedOffset=bucket.getOffsetInteger()
20$parsedZone$DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset)
Time-7_fix
2$instant$ReadWritableInstant instant
2$text$String text
2$position$int position
3$parser$DateTimeParser parser=requireParser()
8$instantMillis$long instantMillis=instant.getMillis()
9$chrono$Chronology chrono=instant.getChronology()
10$defaultYear$int defaultYear=DateTimeUtils.getChronology(chrono).year().get(instantMillis)
11$instantLocal$long instantLocal=instantMillis + chrono.getZone().getOffset(instantMillis)
14$bucket$DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear)
16$newPos$int newPos=parser.parseInto(bucket,text,position)
19$parsedOffset$int parsedOffset=bucket.getOffsetInteger()
20$parsedZone$DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset)
Time-8_buggy
2$hoursOffset$int hoursOffset
2$minutesOffset$int minutesOffset
12$offset$int offset=0
14$hoursInMinutes$int hoursInMinutes=hoursOffset * 60
21$ex$ArithmeticException ex
Time-8_fix
2$hoursOffset$int hoursOffset
2$minutesOffset$int minutesOffset
15$offset$int offset=0
17$hoursInMinutes$int hoursInMinutes=hoursOffset * 60
24$ex$ArithmeticException ex
